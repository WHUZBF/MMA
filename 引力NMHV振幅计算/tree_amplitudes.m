(* ::Package:: *)

(*******************************************************************************************************)
(*******************************************************************************************************)
(*
   CODEBASE for Mathematica Package
    "Tools for Trees"
       by Jacob Bourjaily
               [arXiv:2312.nnnnn].                                                                
       Some of these tools are built upon those of 
            [arXiv:1011.2447], [arXiv:1303.4734] and [arXiv:1505.05886]
      (which include algorithms that likely differ in detail if not usage and output!)                         
*)
(*******************************************************************************************************)
(*******************************************************************************************************)


BeginPackage["TreeAmplitudeTools`"]


Begin["Global`"]


(* ::Section:: *)
(*Abstract Symbols, Objects and Protected Namespace*)


treeTools`functionTypes["A"]="Abstract(/Protected) Symbols";


(* ::Subsection:: *)
(*Labeling External States*)


treeTools`functionTypes["A",1]="Labeling External States";
treeTools`functionNames["A",1]={"m","p","psi[I_]","psiBar[I_]","phi[I,J_]","phiBar[I_,J_]","","mm","pp","gravitino[I_]","gravitinoBar[I_]","graviPhoton[I_,J_]","graviPhotonBar[I_,J_]","psi[I_,J_,K_]","psiBar[I_,J_,K_]","phi[I_,J_,K_,L_]","phiBar[I_,J_,K_,L_]"};


(* ::Subsubsection:: *)
(*Yang-Mills Theory (sYM)*)


Protect[m,p,psi,psiBar,phi,phiBar];


(* ::Subsubsection:: *)
(*Gravity (sGR)*)


Protect[mm,pp,gravitino,gravitinoBar,graviPhoton,graviPhotonBar,psi,psiBar,phi,phiBar];


(* ::Subsection:: *)
(*Kinematic Functions and Invariants*)


treeTools`functionTypes["A",2]="Kinematic Functions, Symbols, and Invariants";
treeTools`functionNames["A",2]={"\[Lambda][a_,\[Alpha]_:]","\[Lambda]b[a_,\[Alpha]_:]","p[a__]","s[a__]","ab[a_Integer,b_Integer]","sb[a_,b_]","asb[a_Integer,pSequence__p,b_Integer]","sab[a_Integer,pSequence__p,b_Integer]","ab[a_Integer,pSequence__p,b_Integer]","sb[a_Integer,pSequence__p,b_Integer]","",
"ab[a_Integer,b_Integer,c_Integer,d_Integer]","cap[{line__},{plane__}]","",
"\[Epsilon][a_Integer]","\[Epsilon]p[a_Integer]","\[Epsilon]m[a_Integer]","ss[x_,y_]"}


Protect[\[Lambda],\[Lambda]b,p,s,ab,asb,sab,cap,abZs,\[Epsilon],\[Epsilon]p,\[Epsilon]m,ss,br];


(* ::Subsection:: *)
(*superFunctions and other Ingredients of Amplitudes*)


treeTools`functionTypes["A",3]="superFunctions and Amplitudes";
treeTools`functionNames["A",3]={"amp[a__Integer]","superFunction[fcn_,cMatrix_]",
"R[a__]","","colorFactor[a_Integer,b__Integer,c_Integer]","tr[a__]"};


(* ::Subsubsection:: *)
(*Amplitudes and superFunctions*)


Protect[superFunction,amp,R];


(* ::Subsubsection:: *)
(*Color-Dressing*)


Protect[colorFactor,tr];


(* ::Subsection:: *)
(*Positroid-Related symbols*)


treeTools`functionTypes["A",4]="Positroids and the Grassmannian";
treeTools`functionNames["A",4]={"positroid[matrix_]","\[Sigma][permutation__]","m[columns__]","\[Alpha][index_]","","\[Tau][transpositionIndices__]","\[Pi][inversionIndices__]"};


Protect[positroid,\[Sigma],m,\[Alpha],\[Tau],\[Pi]];


(* ::Subsection:: *)
(*Scattering Equations and the Twistor String*)


treeTools`functionTypes["A",5]="Scattering Equations and the Twistor String";
treeTools`functionNames["A",5]={"\[Sigma][a_]","\[Sigma][a_,b_]","m[columns__]","\[Xi][a_]"};


Protect[\[Sigma],\[Xi]];


(* ::Section:: *)
(*General Purpose Functions and Mathematical or Miscellaneous Tools*)


treeTools`functionTypes["B"]="General Utilities and Mathematical Tools";
(*treeTools`functionTypeDepths["A"]=5;*)


(* ::Subsection:: *)
(*Mathematical Structures, Operations, and Functions*)


treeTools`functionTypes["B",1]="Mathematical Functions and Operations";
treeTools`functionNames["B",1]={"complement[a_List,b_List]","pfaffian[matrix_]","eulerianNumber[n_,k_]","randomPerm[n_]","randomSubset[n_,k_]","shuffle[a_,b_]"};



complement[lista_,listbs__]:=Block[{dual=Join@@{listbs}},Select[lista,Not[MemberQ[dual,#]]&]];

pfaffian[matrix_List]/;MatrixQ[matrix]:=If[OddQ[Length[matrix]],0,pfaffian[matrix,1]];
pfaffian[matrix_List,switch_]:=Module[{matrix0,n=Length[matrix]/2,pivot,sign=1,matrixPrime,switchPrime},n=Length[matrix]/2;If[n!=1,(matrix0=matrix;pivot=First[Ordering[Normal[Abs[matrix0[[2 n-1,All]]]],-1]];If[pivot!=2 n,matrix0[[{pivot,2 n},All]]=matrix0[[{2 n,pivot},All]];matrix0[[All,{pivot,2 n}]]=matrix0[[All,{2 n,pivot}]];sign=-1;];switchPrime=matrix0[[2 n-1,2 n]];matrixPrime=switchPrime matrix0[[1;;2 n-2,1;;2 n-2]];matrixPrime+=(#-Transpose[#])&@Outer[Times,matrix0[[1;;2 n-2,2 n]],matrix0[[1;;2 n-2,2 n-1]]];matrixPrime/=switch;sign pfaffian[matrixPrime,switchPrime]),matrix[[1,2]]]];

eulerianNumber[n_Integer,m_Integer]:=Sum[Power[-1,k]Binomial[n+1,k]Power[(m+1-k),n],{k,0,m}];

randomPerm[n_Integer]/;n>=1:=Nest[Join[#,(RandomInteger[{1,n-Length[#]},{1}]/.Thread[Rule[Range[n-Length[#]],Complement[Range[n],#]]])]&,{},n];

randomSubset[n_Integer,k_Integer]/;k<=n:=Sort@Nest[Append[#1,Complement[Range[n],#1][[RandomInteger[{1,n-Length[#1]}]]]]&,{},k];
randomSubset[k_Integer,list_List]/;k<=Length[list]:=list[[randomSubset[Length[list],k]]];

shuffle[p_Integer,q_Integer]:=shuffle[p,q]=Which[Min[{p,q}]==0,{Range[Max[{p,q}]]},q==1,(Insert[Range[p],p+1,#]&/@Reverse[Range[p+1]]),p==1,(Insert[Range[q]+1,1,#]&/@Range[q+1]),OrderedQ[{p,q}],Block[{lower=shuffle[p-1,q]+1},DeleteCases[Join@@Transpose[(PadRight[#,p+q,{{}}]&/@(Function[{qList},(Insert[qList,1,#]&/@Range[Ordering[qList][[1]]])]/@lower))],{}]],True,Block[{lower=shuffle[p,q-1]},Join@@Function[{pList},(Insert[pList,p+q,#]&/@Reverse[Range[Ordering[pList][[-1]]+1,p+q]])]/@lower]];
shuffle[a_List,b_List]:=Block[{seeds=(shuffle@@(Length/@{a,b}))},seeds/.Thread[Rule[Range[Length[seeds[[1]]]],Join[a,b]]]];



(* ::Subsection:: *)
(*Generally Useful Mathematica-Like Functions*)


treeTools`functionTypes["B",2]="Generally Useful Mathematical Functions";
treeTools`functionNames["B",2]={"variables[exprn_]","rationalize[number_]","explicify[exprn_]","fuzzify[exprn_]"};


variables[exprn_]:=Block[{firstPass=Variables[exprn]},DeleteDuplicates[firstPass/.{positroid[x__]:>Sequence@@Variables[{x}],superFunction[f_,c_]:>Sequence@@(Join[Variables[f],Join@@(Variables/@Flatten[c])])}]];

rationalize[number_]:=If[Not[NumericQ[number]],number,If[Precision[number]===\[Infinity],number,Block[{prec=Round[Precision[number],10],test},test=Rationalize[number,Power[10,-#]]&/@Range[prec-100,prec,10];If[Count[test,test[[-1]]]>2,test[[-1]],number]]]];rationalize[{number__}]/;Length[Variables[{number}]]==0:=rationalize/@number;


(* ::Subsubsection:: *)
(*Explicification*)


(*Basically throws a random dart for every variable to get a numerical "evaluated" expression (to check vanishing, say); 
HOWEVER, for kinematic expressions, momentum conservation etc. may still leave non-trivial relations; therefore, reference kinematic data is used for evaluation of these variables*)
explicify[inputN_Integer,exprn_]/;inputN<=30:=Block[{n=If[inputN===0,Max[Append[Cases[Cases[exprn,ab[__]|asb[__]|sab[___]|\[Lambda][__]|sb[__]|p[__]|s[__]|\[Sigma][__]|\[Xi][__],{0,\[Infinity]}],q_Integer,{0,\[Infinity]}],4]],inputN]},Block[{Zs=treeTools`referenceTwistorList[[1;;n]],Ls,Lbs,out,lastVars},Ls=Ls=Zs[[All,1;;2]];Lbs=((Normal[SparseArray[Thread[Rule[#,(Det[Ls[[{##}]]]&@@@Partition[RotateLeft[#],2,1,1])/(Det[Ls[[#[[1;;2]]]]]*Det[Ls[[#[[2;;3]]]]])]],Length[Zs]]]&/@(RotateRight@Partition[Range[Length[Zs]],3,1,1])) . Zs[[All,3;;4]]);out=evaluate[exprn];lastVars=variables[out];If[Length[lastVars]==0,out,(out/.Thread[Rule[lastVars,RandomInteger[{1,500},{Length[lastVars]}]]])]]];
explicify[exprn_]:=explicify[0,exprn];

fuzzify[exprn_]:=(explicify[exprn]/.{matrix_List/;MatrixQ[matrix]:>MatrixForm[(matrix/.{0->Style[0,GrayLevel[0.9]],x_?NumericQ:>Style["*",Darker@Blue]})]});


(* ::Subsubsection:: *)
(*Internal Miscellany*)


treeTools`numericMatrixQ[matrix_List]:=MatrixQ[matrix]&&Length[Cases[variables[matrix],ab[___]|sb[___]|s[___]|br[___]|asb[___]|sab[___]|p[___]|\[Alpha][__]|\[Xi][__]|\[Sigma][__],{0,\[Infinity]}]]==0&&Not[DeleteDuplicates[Flatten[matrix]]=={0}];


(* ::Subsection:: *)
(*General Purpose, Non-Mathematical Tools *)


treeTools`functionTypes["B",3]="Generally Useful Non-Mathematical Functions";
treeTools`functionNames["B",3]={"memory","timed[exprn_]","timingData[lineNumber_]","timingDataList"};


memory:=Block[{used=MemoryInUse[],used2=MemoryInUse[$FrontEnd],unitRules=Thread[Rule[Range[0,5],{"bytes","kB","MB","GB","TB","PB"}]],unit},unit=Floor[Log[Power[2,10],#]]&/@{used,used2};Row[{Row[{(Round[100used/(Power[Power[2,10],unit[[1]]])]/100.),(unit[[1]]/.unitRules)},Spacer[1]],Spacer[10],Row[{"("<>ToString[Round[100used2/(Power[Power[2,10],unit[[2]]])]/100.],(unit[[2]]/.unitRules),"for FrontEnd)"},Spacer[0]]}]]

timed[exprn_,minimumTimeInSec_:0]:=Module[{delta=Power[10,0],t0=AbsoluteTime[],tf,exprnHead=Unevaluated[exprn][[0]],formattedHead,output},ClearAll[treeTools`timingHead];If[Not[Head[exprnHead]===Symbol],exprnHead=Head[exprnHead]];Which[exprnHead===Map,(output=Map[timed[Unevaluated[exprn][[1]][#],If[minimumTimeInSec===0,delta,minimumTimeInSec]]&,Unevaluated[exprn][[2]]];tf=AbsoluteTime[]-t0;Set[timingData[$Line],If[Head[timingData[$Line]]===timingData,{{exprnHead,tf}},Prepend[timingData[$Line],{exprnHead,tf}]]];If[tf>minimumTimeInSec,Print[Style[" Evaluation of the function ",FontFamily->"Times",FontSize->14],If[#==="",#,Row[{Style[#,Bold,FontSize->14]," "}]]&@exprnHead,Style["required ",FontFamily->"Times",FontSize->14],Style[niceTime[tf],FontFamily->"Times",FontSize->14,Bold],Style["  to complete.",FontFamily->"Times",FontSize->14]]];output),exprnHead===MapApply,(output=MapApply[timed[Unevaluated[exprn][[1]][##],If[minimumTimeInSec===0,delta,minimumTimeInSec]]&,Unevaluated[exprn][[2]]];tf=AbsoluteTime[]-t0;Set[timingData[$Line],If[Head[timingData[$Line]]===timingData,{{exprnHead,tf}},Prepend[timingData[$Line],{exprnHead,tf}]]];If[tf>minimumTimeInSec,Print[Style[" Evaluation of the function ",FontFamily->"Times",FontSize->14],If[#==="",#,Row[{Style[#,Bold,FontSize->14]," "}]]&@exprnHead,Style["required ",FontFamily->"Times",FontSize->14],Style[niceTime[tf],FontFamily->"Times",FontSize->14,Bold],Style["  to complete.",FontFamily->"Times",FontSize->14]]];output),exprnHead===Table,(output=Table[timed[Unevaluated[exprn][[1]],If[minimumTimeInSec===0,delta,minimumTimeInSec]],Evaluate@Unevaluated[exprn][[-1]]];tf=AbsoluteTime[]-t0;Set[timingData[$Line],If[Head[timingData[$Line]]===timingData,{{exprnHead,tf}},Prepend[timingData[$Line],{exprnHead,tf}]]];If[tf>minimumTimeInSec,Print[Style[" Evaluation of the function ",FontFamily->"Times",FontSize->14],If[#==="",#,Row[{Style[#,Bold,FontSize->14]," "}]]&@exprnHead,Style["required ",FontFamily->"Times",FontSize->14],Style[niceTime[tf],FontFamily->"Times",FontSize->14,Bold],Style["  to complete.",FontFamily->"Times",FontSize->14]]];output),True,(output=Evaluate[ReleaseHold[exprn]];{exprnHead,formattedHead}=Which[ValueQ[treeTools`timingHead],treeTools`timingHead,True,{exprnHead,exprnHead}];tf=AbsoluteTime[]-t0;Set[timingData[$Line],If[Head[timingData[$Line]]===timingData,{{exprnHead,tf}},Append[timingData[$Line],{exprnHead,tf}]]];If[tf>minimumTimeInSec,Print[Style["   Evaluation of the function ",FontFamily->"Times",FontSize->14],If[exprnHead===formattedHead,If[#==="",#,Row[{Style[#,Bold,FontSize->14]," "}]]&@exprnHead,formattedHead],Style["required ",FontFamily->"Times",FontSize->14],Style[niceTime[tf],FontFamily->"Times",FontSize->14,Bold],Style["  to complete.",FontFamily->"Times",FontSize->14]]];output)]];SetAttributes[timed,HoldAll];

timingData[q_Integer]/;q<0:=timingData[$Line+q];

timingDataList:=DownValues[timingData]/.(HoldPattern[_[_[x_]]]:>y_):>{x,y};


(* ::Subsection:: *)
(*Formatting Expressions and Visualization*)


treeTools`functionTypes["B",4]="Formatting Output";
treeTools`functionNames["B",4]={"nice[exprn_]","illustratingNice","niceTime[timeInSeconds_]"};


(* ::Subsubsection:: *)
(*General Expression Formatting*)


nice[exprn_]:=Block[{scatteringEquationRules={c[x_]:>Subscript[Style["c",FontFamily->"Times",Italic],x],num[x_]:>Subscript[Style["n",FontFamily->"Times",Italic],x],\[Epsilon]k[x_,x_]:>Subscript[Style["c",FontFamily->"Times",Italic],Row[{x,x}]],\[Sigma][x_,y_]:>Row[{"(",x,y,")"}],\[Sigma][x_]:>Subscript[\[Sigma],x]},helicityRules={\[Epsilon]m[x_]:>Subsuperscript[\[Epsilon],x,Style["-",Bold]],\[Epsilon]p[x_]:>Subsuperscript[\[Epsilon],x,Style["+",Bold]],\[Epsilon][x_]:>Subscript[\[Epsilon],x],ss[x_,y_]:>Row[{"(",x,"+",y,"\!\(\*SuperscriptBox[\()\), \(2\)]\)"}]},ampRule={amp[x__]/;legalComponentStatesQ[{x}]:>treeTools`stylizedAmp[x],amp[x_,y_,z___]:>treeTools`stylizedAmp[x,y,z]},superRule={superFunction[f_,c_?MatrixQ]:>Row[{f,","Row[{MatrixForm[DeleteDuplicates[c]],"\[CenterDot]",If[Count[c,ab[x_,y_Integer,q_Integer,w_]|ab[a1___,cap[a2___],a3___],{0,\[Infinity]}]>0,\[Eta],OverTilde[\[Eta]]](*,Style["]",FontSize->12*Length[c]]*)}]}],positroid[c_?MatrixQ]:>If[treeTools`numericMatrixQ[c],MatrixForm[c],Row[{1/Times@@Variables[c],","Row[{MatrixForm[DeleteDuplicates[c]],"\[CenterDot]",OverTilde[\[Eta]]}]}]]},colorRule={colorFactor->drawColorFactor,tr->drawColorTrace},stateRules={p->Subsuperscript[Row[{"|","g","\[RightAngleBracket]"}],Row[{""}],"+1"],m->Subsuperscript[Row[{"|","g","\[RightAngleBracket]"}],"","-1"],pp->Subsuperscript[Row[{"|","g","\[RightAngleBracket]"}],Row[{""}],"+2"],gravitino[x_]:>Subsuperscript[Row[{"|","\[Psi]","\[RightAngleBracket]"}],Row[{"(",x,")"}],"+3/2"],graviPhoton[x__]:>Subsuperscript[Row[{"|","\[Gamma]","\[RightAngleBracket]"}],Row[{"(",x,")"}],"+1"],psi[x__]:>Subsuperscript[Row[{"|","\[Psi]","\[RightAngleBracket]"}],Row[{"(",x,")"}],"+1/2"],(*phi[x__]:>Subsuperscript[Row[{"|","\[Phi]","\[RightAngleBracket]"}],If[OrderedQ[{Sort@{x},Complement[Range[2Length[{x}]],{x}]}],Row[{"(",x,")"}],OverBar[Row[{"(",Sequence@@Complement[Range[2Length[{x}]],{x}],")"}]]],"0"],*)phi[x__]:>If[OrderedQ[{Sort@{x},Complement[Range[2Length[{x}]],{x}]}],Subsuperscript[Row[{"|","\[Phi]","\[RightAngleBracket]"}],Row[{"(",x,")"}],"0"],Subsuperscript[Row[{"|",OverBar["\[Phi]"],"\[RightAngleBracket]"}],Row[{"(",OverBar[Row@Complement[Range[2Length[{x}]],{x}]],")"}],"0"]],(*phiBar[x__]:>Subsuperscript[Row[{"|",OverBar["\[Phi]"],"\[RightAngleBracket]"}],If[OrderedQ[{{x},Complement[Range[2Length[{x}]],{x}]}],Row[{"(",OverBar[Row@{x}],")"}],Row[Complement[Range[2Length[{x}]],{x}]]],"0"],*)phiBar[x__]:>If[OrderedQ[{{x},Complement[Range[2Length[{x}]],{x}]}],Subsuperscript[Row[{"|",OverBar["\[Phi]"],"\[RightAngleBracket]"}],Row[{"(",OverBar[Row@{x}],")"}],"0"],Subsuperscript[Row[{"|","\[Phi]","\[RightAngleBracket]"}],Row[{"(",Sequence@@Complement[Range[2Length[{x}]],{x}],")"}],"0"]],psiBar[x__]:>Subsuperscript[Row[{"|",OverBar["\[Psi]"],"\[RightAngleBracket]"}],Row[{"(",OverBar[Row@{x}],")"}],"-1/2"],graviPhotonBar[x__]:>Subsuperscript[Row[{"|",OverBar["\[Gamma]"],"\[RightAngleBracket]"}],Row[{"(",OverBar[Row@{x}],")"}],"-1"],gravitinoBar[x_]:>Subsuperscript[Row[{"|",OverBar["\[Psi]"],"\[RightAngleBracket]"}],Row[{"(",OverBar[Row@{x}],")"}],"-3/2"],mm->Subsuperscript[Row[{"|","g","\[RightAngleBracket]"}],"","-2"]},integerPaddingRule={(integerSequence:_Integer..)/;(Length[{integerSequence}]>1):>(integerSequence/.{q_Integer:>If[q>9,Row[List[Spacer[2],ToString[q],Spacer[2]]],ToString[q]]})},zetaRule={Zeta[x_]:>Row[{"\[Zeta](",x,")"}]},capRule={cap[x_,y_,z___]:>Row[Flatten[List[If[Length[x]>1,{"(",x,")"},x],"\[Intersection]",If[Length[y]>1,{"(",y,")"},y]]]]},bracketRule={m[x___Integer]:>Row[{"(",x,")"}],br[x___]:>Row[{"\[LeftDoubleBracket]",Row@Riffle[{x},","],"\[RightDoubleBracket]"}],s[x___]:>Subscript["s",Row[{x}]],sq[x_]:>Row[{"(",x,Superscript[")",2]}],ab[x1_,x2_]:>Row[{"\[LeftAngleBracket]",x1,x2,"\[RightAngleBracket]"}],sb[x1_,x2_]:>Row[{"[",x1,x2,"]"}],asb[x_,y__p,z_]:>Row[Flatten[{"\[LeftAngleBracket]",x,"|(",Row@Riffle[Row/@List@@@{y},")|("],")|",z,"]"}]],sab[x_,y__p,z_]:>Row[Flatten[{"[",x,"|(",Row@Riffle[Row/@List@@@{y},")|("],")|",z,"\[RightAngleBracket]"}]],ab[x_,y__p,z_]:>Row[Flatten[{"\[LeftAngleBracket]",x,"|(",Row@Riffle[Row/@List@@@{y},")|("],")|",z,"\[RightAngleBracket]"}]],ab[x_,y__,z_]:>Row[Flatten[{"\[LeftAngleBracket]",x,y,z,"\[RightAngleBracket]"}]],sb[x_,y__p,z_]:>Row[Flatten[{"[",x,"|(",Row@Riffle[Row/@List@@@{y},")|("],")|",z,"]"}]]},subscriptRule={\[Xi][x_]:>Subscript[\[Xi],x],\[Alpha][x_Integer]:>Subscript[\[Alpha],x],\[Lambda][x_]:>Subscript[\[Lambda],x],\[Lambda]b[x_]:>Subscript[OverTilde[\[Lambda]],x],\[Lambda]b[x_,y_]:>Subsuperscript[OverTilde[\[Lambda]],x,OverDot[y]],\[Lambda][x_,y_]:>Subsuperscript[\[Lambda],x,y],p[x__]:>Subscript["p",Row[{x}]](*,head_[q_Integer]:>Subscript[head,q]*)},ruleRule=({ruleList:{_Rule..}:>Block[{ruleRows=({ruleList/. {(q_->r_):>Row[{q,"\[Rule]",r},Alignment->Center]}})},(Grid[((#)/.({}->"")),ItemStyle->{FontSize->1.4($DefaultFont)[[2]]},ItemSize->Full,Alignment->Left])&@Transpose@Partition[Flatten[ruleRows,1],Ceiling[Length[Flatten[ruleRows,1]]/Which[Length[Flatten[ruleRows,1]]<10,1,Length[Flatten[ruleRows,1]]<20,2,True,3]],Ceiling[Length[Flatten[ruleRows,1]]/Which[Length[Flatten[ruleRows,1]]<10,1,Length[Flatten[ruleRows,1]]<20,2,True,3]],1,{{}}]]}),matrixRule={Grid[q_?MatrixQ,y___]:>Grid[q,y],q_?MatrixQ:>MatrixForm[q]}},Fold[Replace[#1,#2,{0,\[Infinity]}]&,(exprn),{ampRule,superRule,colorRule,integerPaddingRule,zetaRule,capRule,bracketRule,helicityRules,scatteringEquationRules,subscriptRule,ruleRule,stateRules}]/.matrixRule/.colorRule];

illustratingNice=Column[Column[{Style[#2,FontFamily->"Times",Darker@Blue,FontSize->24,Bold,Italic],Grid[Transpose[{Prepend[nice/@#1,Row[{Style["Output of ",FontFamily->"Times"] ,treeTools`formatFunctionName["nice[]"]}]],Prepend[#1,Row[{Style["Mathematica",FontFamily->"EB Garamond 12 All SC",FontSize->26,Bold],Style[" Syntax",FontFamily->"Times"]}]]}]&@#1,Alignment->{{Left,Left},{Top,Bottom,Center}},Dividers->All,ItemSize->26]},Alignment->{Left,Center}]&@@@Transpose[{treeTools`exampleNiceList,treeTools`exampleNiceNames}]];

niceTime[timeInSec_]:=If[timeInSec<($TimeUnit/1000)||Not[NumericQ[timeInSec]]||Precision[timeInSec]==0,"",Block[{measure=Select[Transpose[{(Quotient[Mod[timeInSec,#1],#2]&@@@Partition[{timeInSec 10,3.15569277216`*^7,3600*24.,3600.,60.,1.,10^-3,10.^-6,10.^-9},2,1]),{" years"," days"," hours"," minutes"," seconds"," ms"," \[Mu]s"," ns"}}],#[[1]]>0&]},If[Length[measure]>0,(*Row[Row[#,""]&/@measure[[1;;Min[2,Length[measure]]]],", "]*)StringJoin@@Riffle[(StringJoin[ToString[#1],#2]&@@@measure[[1;;Min[2,Length[measure]]]]),", "],""]]];


(* ::Subsubsection:: *)
(*Internal: Stylization of Various Symbols and Objects*)


treeTools`exampleNiceList=List[{psi[1],phiBar[1,2],graviPhotonBar[2],amp[m,p,psi[2],psi[2],psiBar[2],psiBar[2]]},{\[Lambda][3,2],ab[1,2],sb[1,2],s[1,2,3],asb[1,p[2,3],4],sab[1,p[2,3],4],ab[1,p[2,3],p[4,5],6],sb[1,p[2],p[3],4]},{ab[1,2,3,4],ab[cap[{1,2},{3,4,cap[{5,6},{7,8,9}]}],10,11,12]},{m[1,3,5,7],gaugeFixedGrassmannianRepresentative[8,{1,3,4,7}],\[Sigma][1,3]},{colorFactor[6,2,1,4,3,5],tr[2,6,1,3,5,4]},{positroid[{{1,\[Alpha][2]+\[Alpha][4],\[Alpha][2] \[Alpha][3],0},{0,1,\[Alpha][3],\[Alpha][1]}}]},{superFunction[fcn,Array[c,{2,4}]]}]
treeTools`exampleNiceNames={"external states","spinors & momentum invariants","momentum twistor brackets","scattering equations","color tensors","positroid objects","superFunctions"};

treeTools`stylizedAmp[cmptList__]/;legalComponentStatesQ[{cmptList}]:=Row[{Style[Subsuperscript["\[ScriptCapitalA]",ToString[Length[{cmptList}]],Row[{"(",ToString[nmhvDegree[{cmptList}]],")"}]],FontFamily->"Times",FontSize->20],Style["(",FontSize->24],Row@Riffle[Style[nice[#],FontFamily->"Times",FontSize->18]&/@({cmptList}/.{m->"-",mm->"--",p->"+",pp->"++"}),","],Style[")",FontSize->24]}];
treeTools`stylizedAmp[n_Integer]:=Row[{Style[Subscript["\[ScriptCapitalA]",ToString[n]],FontFamily->"Times",FontSize->20]," "}];
treeTools`stylizedAmp[n_Integer,k_Integer]:=Row[{Style[Subsuperscript["\[ScriptCapitalA]",ToString[n],Row[{"(",k,")"}]],FontFamily->"Times",FontSize->20]}];
treeTools`stylizedAmp[n_Integer,k_Integer,{legOrdering__Integer}]:=Row[{Style[Subsuperscript["\[ScriptCapitalA]",ToString[n],Row[{"(",k,")"}]],FontFamily->"Times",FontSize->20],Style["(",FontSize->24],Row@Riffle[Style[nice[#],FontFamily->"Times",FontSize->18]&/@({legOrdering}),","],Style[")",FontSize->24]}];
treeTools`stylizedAmp[a1_,a2_,a3__]:=Row[{Style[Subscript["\[ScriptCapitalA]",ToString[Length[{a1,a2,a3}]]],FontFamily->"Times",FontSize->20],Style["(",FontSize->24],Row@Riffle[Style[#,FontFamily->"Times",FontSize->18]&/@{a1,a2,a3},","],Style[")",FontSize->24]}];

treeTools`stylizeStateTable[states_]:=Grid[Style[#,FontFamily->"Times",FontSize->16]&/@#&/@(Prepend[{Magnify[#,1.2]&/@nice[#],(#/.{pp->2,mm->-2,gravitino[x_]:>3/2,gravitinoBar[x_]:>-3/2,graviPhoton[x__]:>1,graviPhotonBar[x__]:>"-1",p->1,m->-1,psi[x___]:>1/2,psiBar[x___]:>-1/2,phi[x___]:>0,phiBar[x__]:>0}),(#/.{pp->{},mm->Row[{OverBar[{}],"=",Range[8]}],m->Row[{OverBar[{}],"=",Range[4]}],gravitino[x_]:>{x},gravitinoBar[x_]:>Row[{OverBar[{x}],"=",Complement[Range[8],{x}]}],graviPhoton[x__]:>{x},graviPhotonBar[x__]:>Row[{OverBar[{x}],"=",Complement[Range[8],{x}]}],p->"{}",psi[x___]:>{x},psiBar[x___]:>Row[{OverBar[{x}],"=",Complement[Range[If[Length[{x}]==3,8,4]],{x}]}],phi[x___]:>{x},phiBar[x__]:>Row[{OverBar[{x}],"=",Complement[Range[If[Length[{x}]==4,8,4]],{x}]}]}),#,(#/.{pp->"",mm->"",gravitino[x_]:>"",gravitinoBar[x_]:>gravitinoBar@@Complement[Range[8],{x}],graviPhoton[x__]:>"",graviPhotonBar[x__]:>graviPhotonBar@@Complement[Range[8],{x}],p->"",m->"",psi[x___]:>"",psiBar[x___]:>psiBar@@Complement[Range[If[Length[{x}]==3,8,4]],{x}],phi[x___]:>"",phiBar[x__]:>phi@@Complement[Range[If[Length[{x}]==4,8,4]],{x}]})}&/@#,{Column[{"(stylized)",Style["state name",Bold]},Alignment->Center],Column[{Style["  helicity  ",Bold]},Alignment->Center],Column[{Style["  R-Charge  ",Bold]},Alignment->Center],Column[{Style["  syntax  ",Bold]},Alignment->Center],Column[{"optional/","alt. syntax"},Alignment->Center]}]&@(Join@@states)),Dividers->{{True,{False},True},{True,True,{False},1}},Alignment->{{Left,Center,Left,Left,Left},{Bottom},{1,3}->{Center,Bottom},{1,4}->{Center,Bottom},{1,5}->{Right,Bottom}}];



(* ::Section:: *)
(*Aspects of External Components of Coherent States*)


treeTools`functionTypes["C"]="Aspects of External Component States";


(* ::Subsection:: *)
(*Listing External Components of \[ScriptCapitalN]-supersymmetric sYM and sGR*)


treeTools`functionTypes["C",1]="(Stylized) Listing of Component States";
treeTools`functionNames["C",1]={"componentStateList[\[ScriptCapitalN]_]","componentStateListYM[\[ScriptCapitalN]_:4]","componentStateListGR[\[ScriptCapitalN]_:8]"};


componentStateList[calN_Integer:4]:=componentStateListYM[calN];

componentStateListYM[calN_Integer:4]/;MemberQ[Range[0,4],calN]:=Column[{Style["States of (pure) \[ScriptCapitalN]="<>ToString[calN]<>" sYM",FontFamily->"Times",FontSize->20,Bold],treeTools`stylizeStateTable[treeTools`coherentStateComponentsYM[calN]]},Alignment->Center];

componentStateListGR[calN__Integer:8]/;MemberQ[Range[0,8],calN]:=Column[{Style["States of (pure) \[ScriptCapitalN]="<>ToString[calN]<>"  sGR",FontFamily->"Times",FontSize->20,Bold],treeTools`stylizeStateTable[treeTools`coherentStateComponentsGR[calN]]},Alignment->Center];



(* ::Subsection:: *)
(*Random-Generation of Sets of External States*)


treeTools`functionTypes["C",2]="Random External States of Amplitudes";
treeTools`functionNames["C",2]={"randomComponentStates[n_,k_]","randomComponentStatesYM[\[ScriptCapitalN]_:4][n_,k_]","randomComponentStatesGR[\[ScriptCapitalN]_:8][n_,k_]","randomHelicityComponent[n_,k_]","randomHelicityComponentGR[n_,k_]","","randomStateSplitting[stateList__]"};


randomComponentStates[susyN_:4][n_Integer,k_Integer]/;((n>=3)&&MemberQ[Range@@Sort[{0,n-4}],k]):=If[susyN<0||susyN>4,Print["\[ScriptCapitalN]="<>ToString[susyN]<>" super Yang-Mills theory does not exist"],Which[(k>n-4&&(n>3))||(k>0&&n==3),Print["Worse than MHV-bar amplitudes vanish"],k<0&&n>3,Print["Worse than MHV amplitudes vanish"],True,Block[{minorList=(PadRight[#[[1;;susyN]],4,#[[{-1}]]]&@(randomSubset[n,k+2]&/@Range[susyN+1])),cmpt},cmpt=Flatten[Position[minorList,#][[All,1]]]&/@Range[n];Replace[cmpt,{Range[4]->m,{}->p,{x_,y_,z_}:>psiBar[Complement[Range[4],{x,y,z}][[1]]],{x_}:>psi[x],{x_,y_}:>If[OrderedQ[{Sort[{x,y}],Complement[Range[4],{x,y}]}],phi[x,y],phiBar@@Complement[Range[4],{x,y}]]},{1}]]]];
randomComponentStates[n_Integer,k_Integer]/;((n>=3)&&MemberQ[Range@@Sort[{0,n-4}],k]):=randomComponentStates[4][n,k];

randomComponentStatesGR[susyN_:8][n_Integer,k_Integer]/;((n>=3)&&MemberQ[Range@@Sort[{0,n-4}],k]):=If[susyN<0||susyN>8,Print["\[ScriptCapitalN]="<>ToString[susyN]<>" supergravity theory does not exist"],Which[(k>n-4&&(n>3))||(k>0&&n==3),Print["Worse than MHV-bar amplitudes vanish"],k<0&&n>3,Print["Worse than MHV amplitudes vanish"],True,Block[{minorList=(PadRight[#[[1;;susyN]],8,#[[{-1}]]]&@(randomSubset[n,k+2]&/@Range[susyN+1])),cmpt},cmpt=Flatten[Position[minorList,#][[All,1]]]&/@Range[n];(Replace[cmpt,{List[x___]:>Which[Length[{x}]==8,mm,Length[{x}]==7,gravitinoBar[Complement[Range[8],{x}][[1]]],Length[{x}]==6,graviPhotonBar@@Complement[Range[8],{x}],Length[{x}]==5,psiBar@@Complement[Range[8],{x}],Length[{x}]==4&&OrderedQ[{{x},Complement[Range[8],{x}]}],phi[x],Length[{x}]==4&&Not[OrderedQ[{{x},Complement[Range[8],{x}]}]],phiBar@@Complement[Range[8],{x}],Length[{x}]==3,psi[x],Length[{x}]==2,graviPhoton[x],Length[{x}]==1,gravitino[x],True,pp]},{1}])]]];
randomComponentStatesGR[n_Integer,k_Integer]/;((n>=3)&&MemberQ[Range@@Sort[{0,n-4}],k]):=randomComponentStatesGR[8][n,k];

randomComponentStatesYM=randomComponentStates;

randomHelicityComponent[n_Integer,k_Integer]:=randomComponentStatesYM[0][n,k];
randomHelicityComponent[n_Integer]/;n>=3:=randomHelicityComponent[n,RandomChoice[Range@@Sort[{0,n-4}]]];

randomHelicityComponentGR[n_,k_]:=randomComponentStatesGR[0][n,k];
randomHelicityComponentGR[n_Integer]/;n>=3:=randomComponentStatesGR[0][n,RandomChoice[Range@@Sort[{0,n-4}]]];

randomStateSplitting[{stateList__}]:=randomStateSplitting[stateList];
randomStateSplitting[stateList__]/;nonVanishingComponentAmpQ[stateList]:=Module[{n=Length[{stateList}],minorList=stateListToMinorList[{stateList}],split=randomSubset[8,4]},minorListToStateList[n]/@{minorList[[split]],minorList[[Complement[Range[8],split]]]}];


(* ::Subsection:: *)
(*Aspects and Manipulations of Sets of External States *)


treeTools`functionTypes["C",3]="Aspects and Manipulations of External States";
treeTools`functionNames["C",3]={"rChargeLabels[componentStates__]","legalComponentStatesQ[componentStates__]","nonVanishingComponentAmpQ[componentStates__]",
"nmhvDegree[componentStates__]","minimalSusyDegree[componentStates__]","conjugateComponentStates[componentStates__]"};


rChargeLabels[{stateList__}]:=rChargeLabels[stateList];
rChargeLabels[stateList__]:={stateList}/.{mm->Range[8],pp->{},p->{},m->Range[4],psi[x__]:>{x},psiBar[x__]:>Complement[Range[2(Length[{x}]+1)],{x}],phi[x__]:>{x},phiBar[x__]:>Complement[Range[2Length[{x}]],{x}],gravitino[x__]:>{x},gravitinoBar[x__]:>Complement[Range[8],{x}],graviPhoton[x__]:>{x},graviPhotonBar[x___]:>Complement[Range[8],{x}]};

legalComponentStatesQ[stateList_List]:=Or[treeTools`legalYMstatesQ[stateList],treeTools`legalGRstatesQ[stateList]];
legalComponentStatesQ[stateList__]:=legalComponentStatesQ[{stateList}];

(*nonVanishingComponentAmpQ[stateList_List]/;legalComponentStatesQ[stateList]:=Block[{minors=stateListToMinorList[stateList],dim},If[Not[MatrixQ[minors]],False,dim=Dimensions[minors];MemberQ[{4,8},dim[[1]]]&&MemberQ[Range@@Sort[{2,Length[stateList]-2}],dim[[2]]]]];*)
nonVanishingComponentAmpQ[stateList_List]/;legalComponentStatesQ[stateList]:=Block[{minors=stateListToMinorList[stateList],dim},If[Not[MatrixQ[minors]],False,dim=Dimensions[minors];MemberQ[{4,8},dim[[1]]](*&&MemberQ[Range@@Sort[{2,Length[stateList]-2}],dim[[2]]]*)]];
nonVanishingComponentAmpQ[stateList__]:=nonVanishingComponentAmpQ[{stateList}];

minimalSusyDegree[stateList_List]/;nonVanishingComponentAmpQ[stateList]:=Block[{minorList=stateListToMinorList[stateList]},(Length[minorList]-Max[Count[minorList,#]&/@DeleteDuplicates[minorList]])/.If[Length[minorList]==4,{3->4},{7->8}]];
minimalSusyDegree[state1_,otherStates__]:=minimalSusyDegree[{state1,otherStates}];

nmhvDegree[stateList_List]/;nonVanishingComponentAmpQ[stateList]:=Block[{minors=stateListToMinorList[stateList]},If[Not[minors==={}]&&(Head[minors]===List),Block[{ks=Length/@minors},If[Length[DeleteDuplicates[ks]]>1,(Print["Amplitudes vanish by supersymmetry for this component"];-2),First[ks]-2]]]];
nmhvDegree[state1_,otherStates__]:=nmhvDegree[{state1,otherStates}];

conjugateComponentStates[stateList_List]:=(conjugateComponentStates@@stateList);
conjugateComponentStates[stateList__]:=({stateList}/.{mm->pp,pp->mm,m->p,p->m,gravitino->gravitinoBar,gravitinoBar->gravitino,graviPhoton->graviPhotonBar,graviPhotonBar->graviPhoton,psi->psiBar,psiBar->psi,phi->phiBar,phiBar->phi});


(* ::Subsection:: *)
(*Helicity and Polarization Rules for Gluons and Gravitons*)


treeTools`functionTypes["C",4]="Helicities and Polarizations of Gluons/Gravitons";
treeTools`functionNames["C",4]={"helicityPolarizationRules[helicityList__]"};


helicityPolarizationRules[helicityList_List]/;MemberQ[{{m,p},{m},{p}},Sort[DeleteDuplicates[helicityList]]]:=Join[\[Epsilon][#1]->ToExpression[ToString[\[Epsilon]]<>ToString[#2]][#1]&@@@Transpose[{Range[Length[helicityList]],helicityList}],{ss[\[Epsilon]p[x_],\[Epsilon]p[y_]]:>0,ss[\[Epsilon]m[x_],\[Epsilon]m[y_]]:>0,ss[\[Epsilon][x_],p[x_]]:>0,ss[\[Epsilon]p[x_],p[x_]]:>0,ss[\[Epsilon]m[x_],p[x_]]:>0}];
helicityPolarizationRules[helicityList1_,helicityList2__]:=helicityPolarizationRules[{helicityList1,helicityList2}];
helicityPolarizationRules[helicityList_List]/;MemberQ[{{mm,pp},{mm},{pp}},Sort[DeleteDuplicates[helicityList]]]:=(helicityPolarizationRules[((helicityList)/.{mm->m,pp->p})]);


(* ::Subsection:: *)
(*Internal: Conventions and Syntax*)


treeTools`coherentStateComponents[susyN_Integer:4]:=If[susyN<0||susyN>4,Print["\[ScriptCapitalN]="<>ToString[susyN]<>" super Yang-Mills theory does not exist"],treeTools`coherentStateComponents[susyN]=(Function[{x,y},x@@@y]@@@If[MemberQ[{3,4},susyN],Transpose[{{p,psi,phi,psiBar,m},Gather[Subsets[Range[4]],Length[#1]==Length[#2]&]}],Transpose[{{p,psi,phi,psiBar,m}[[DeleteDuplicates[Join[Range[susyN+1],Reverse[6-Range[susyN+1]]]]]],Gather[Join[#,Complement[Range[4],#]&/@Reverse[#]]&@Subsets[Range[susyN]],Length[#1]==Length[#2]&]}]])/.{m[x__]:>m,p[]->p,psiBar[x__]:>psiBar@@Complement[Range[4],{x}],phi[x__]:>If[OrderedQ[{{x},Complement[Range[4],{x}]}],phi[x],phiBar@@Complement[Range[4],{x}]]}];

treeTools`coherentStateComponentsGR[susyN_Integer:8]:=If[susyN<0||susyN>8,Print["\[ScriptCapitalN]="<>ToString[susyN]<>" supergravity theory does not exist"],treeTools`coherentStateComponentsGR[susyN]=(Function[{x,y},x@@@y]@@@If[MemberQ[{7,8},susyN],Transpose[{{pp,gravitino,graviPhoton,psi,phi,psiBar,graviPhotonBar,gravitinoBar,mm},Gather[Subsets[Range[8]],Length[#1]==Length[#2]&]}],Transpose[{{pp,gravitino,graviPhoton,psi,phi,psiBar,graviPhotonBar,gravitinoBar,mm}[[DeleteDuplicates[Join[Range[susyN+1],Reverse[10-Range[susyN+1]]]]]],Gather[Join[#,Complement[Range[8],#]&/@Reverse[#]]&@Subsets[Range[susyN]],Length[#1]==Length[#2]&]}]])/.{mm[x__]:>mm,pp[]->pp,gravitinoBar[x__]:>gravitinoBar@@Complement[Range[8],{x}],graviPhotonBar[x__]:>graviPhotonBar@@Complement[Range[8],{x}],psiBar[x__]:>psiBar@@Complement[Range[8],{x}],phi[x__]:>If[OrderedQ[{{x},Complement[Range[8],{x}]}],phi[x],phiBar@@Complement[Range[8],{x}]]}];

treeTools`coherentStateComponentsYM[susyN_Integer:4]:=treeTools`coherentStateComponents[susyN];

treeTools`standardizeSuperstateNames[stateList_]:=(stateList/.{psi[x__]:>psi@@Sort[{x}],psiBar[x__]:>psiBar@@Sort[{x}],phi[x__]:>phi@@Sort[{x}],graviPhoton[x__]:>graviPhoton@@Sort[{x}],graviPhotonBar[x__]:>graviPhotonBar@@Sort[{x}],phiBar[x__]:>phi@@Complement[Range[2Length[{x}]],{x}]});

treeTools`legalYMstatesQ[states_]:=If[Head[states]===List,And@@(treeTools`legalYMstatesQ/@states),MemberQ[((Join@@treeTools`coherentStateComponents[4])/.{phiBar[x__]:>phi@@Complement[Range[4],{x}]}),treeTools`standardizeSuperstateNames[states]]];
treeTools`legalYMstatesQ[states__]:=treeTools`legalYMstatesQ[{states}];

treeTools`legalGRstatesQ[states_]:=If[Head[states]===List,And@@(treeTools`legalGRstatesQ/@states),MemberQ[((Join@@treeTools`coherentStateComponentsGR[8])/.{phiBar[x__]:>phi@@Complement[Range[8],{x}]}),treeTools`standardizeSuperstateNames[states]]];
treeTools`legalGRstatesQ[states__]:=treeTools`legalGRstatesQ[{states}];


(* ::Section:: *)
(*Analytic Expressions of On-Shell Kinematic Data*)


treeTools`functionTypes["D"]="Analytic Expressions of External Kinematics";


(* ::Subsection:: *)
(*General Aspects of Spinor Expressions*)


treeTools`functionTypes["D",1]="General Aspects of Spinor Expressions";
treeTools`functionNames["D",1]={"littleGroup[exprn_,n_:]","massDimension[exprn_]","parityConjugationRule"};


massDimension[exprn_]:=Block[{expanded=Expand[exprn],factors},If[Head[expanded]===Plus,massDimension[expanded[[1]]],If[Count[exprn,superFunction[__],{0,\[Infinity]}]>0,(exprn/.{superFunction[fcn_,mat_]:>(Block[{n=Length[mat[[1]]],nonVanishing,gauge},nonVanishing=(Complement[Range[n],Flatten[Position[#,0]]]&/@mat);gauge=Select[Tuples[nonVanishing],Length[DeleteDuplicates[#]]==Length[mat]&,1];If[Length[gauge]==0,0,(massDimension[fcn]+4(1+Total[(massDimension/@Diagonal[mat[[All,#]]])]))&@gauge[[1]]]])}),factors=Select[FactorList[exprn],Length[Variables[#]]>0&]/.{asb[x_,p___,y_]:>1+Length[{p}],sab[x_,p___,y_]:>1+Length[{p}],ab[x_,p___,y_]:>1+Length[{p}],sb[x_,p___,y_]:>1+Length[{p}],br[x__]:>Length[{x}],s[x__]:>2,ss[x__]:>Total[{x}/.{p[q__]:>1,\[Epsilon][q_]:>0,\[Epsilon]m[q_]:>0,\[Epsilon]p[q_]:>0}]};Total[Times@@@factors]]]];

littleGroup[exprn_List,inputN_:0]:=littleGroup[#,inputN]&/@exprn;
littleGroup[stateList_List]/;legalComponentStatesQ[stateList]:=(treeTools`standardizeSuperstateNames[stateList]/.treeTools`componentStateLittleGroupRules)

littleGroup[cMat_List]/;(MatrixQ[cMat]&&Count[cMat,superFunction[___]|cap[___]|ab[x_Integer,y_Integer,z_Integer,w_Integer],{0,\[Infinity]}]==0):=Block[{n=Length[cMat[[1]]],nonVanishing,gauge},nonVanishing=(Complement[Range[n],Flatten[Position[#,0]]]&/@cMat);gauge=Select[Tuples[nonVanishing],Length[DeleteDuplicates[#]]==Length[cMat]&,1];If[Length[gauge]==0,0&/Range[n],(Normal[SparseArray[#->-1&/@#,{n}]]+Total[(littleGroup[#,n]&/@Diagonal[cMat[[All,#]]])])&@gauge[[1]]]];
littleGroup[cMat_List]/;(MatrixQ[cMat]&&Count[cMat,superFunction[___],{0,\[Infinity]}]==0&&Count[cMat,cap[___]|ab[x_Integer,y_Integer,z_Integer,w_Integer],{0,\[Infinity]}]>0):=Block[{n=Length[cMat[[1]]],nonVanishing,gauge},nonVanishing=(Complement[Range[n],Flatten[Position[#,0]]]&/@cMat);gauge=Select[Tuples[nonVanishing],Length[DeleteDuplicates[#]]==Length[cMat]&,1];If[Length[gauge]==0,0&/Range[n],( Normal[SparseArray[#->1&/@#,{n}]]+Total[(littleGroup[#,n]&/@Diagonal[cMat[[All,#]]])])&@gauge[[1]]]];

littleGroup[fcn_,inputN_:0]/;Not[Head[fcn]===List]:=If[Count[fcn,superFunction[___],{0,\[Infinity]}]>0,((fcn//.superFunctionProductRule//.{q_ superFunction[f_,c_]:>superFunction[f q,c]})/.{superFunction[function_,cMat_]:>4littleGroup[cMat]+littleGroup[function,Length[cMat[[1]]]]}),Block[{monomial=If[Head[#]===Plus,#[[1]],#]&@(Expand[fcn]),labelRange=Sort[DeleteDuplicates[Cases[Variables[(fcn//.{\[Lambda][x_,y_]:>\[Lambda][x],\[Lambda]b[x_,y_]:>\[Lambda]b[x]})],q_Integer,{0,\[Infinity]}]]],factors,n},n=Max[{inputN,Max[labelRange]}];factors=Select[FactorList[Times@@Power@@@({If[Head[Expand[#1]]===Plus,Expand[#1][[1]],#1],#2}&@@@(Select[FactorList[monomial],Length[Variables[#]]>0&]))],Length[Variables[#]]>0&]/.{s[x__]:>(0&/@Range[n]),br[x__]:>(0&/@Range[n]),\[Lambda][x__]:>Normal[SparseArray[{x}[[1]]->1,{n}]],\[Lambda]b[x__]:>Normal[SparseArray[{x}[[1]]->-1,{n}]],ab[x_Integer,y__p,x_Integer]:>Normal[SparseArray[{x->2},{n}]],sb[x_Integer,y__p,x_Integer]:>Normal[SparseArray[{x->-2},{n}]],ab[x_Integer,y___p,z_Integer]:>Normal[SparseArray[{x->1,z->1},{n}]],sb[x_Integer,y___p,z_Integer]:>Normal[SparseArray[{x->-1,z->-1},{n}]],ss[x__]:>Total[{x}/.{p[q__]:>0,\[Epsilon]m[q_]:>Normal[SparseArray[q->2,{n}]],\[Epsilon]p[q_]:>Normal[SparseArray[q->-2,{n}]]}],sab[x_Integer,y___p,z_Integer]:>Normal[SparseArray[If[Not[x===z],{x->1,z->-1},{}],{n}]],asb[x_Integer,y___p,z_Integer]:>Normal[SparseArray[If[Not[x===z],{x->1,z->-1},{}],{n}]],ab[x___]:>Normal[SparseArray[(#->Count[{x},#,{0,\[Infinity]}]&/@Range[n])]]};If[Length[factors]==0,0&/@Range[n],If[MatrixQ[factors[[All,1]]],Total[Times@@@factors],Print[Select[factors,Not[Length[#[[1]]]==n]&][[All,1]]," do not have little group definitions."];Total[Times@@@Select[factors,Length[#[[1]]]==n&]]]]]];

parityConjugationRule={sb->ab,ab->sb,asb[x___]:>asb@@Reverse[{x}],sab[x___]:>asb[x],\[Sigma][perm__]:>parityConjugatePositroid[\[Sigma][perm]]};

treeTools`componentStateLittleGroupRules=Join[Join@@Function[{x,y},#->y&/@x]@@@Transpose[{treeTools`standardizeSuperstateNames/@treeTools`coherentStateComponents[4],Range[-2,2]}],Join@@Function[{x,y},#->y&/@x]@@@Transpose[{treeTools`standardizeSuperstateNames/@treeTools`coherentStateComponentsGR[8],Range[-4,4]}]];


(* ::Subsection:: *)
(*Spinor superFunctions*)


treeTools`functionTypes["D",2]="(Spinor) superFunctions";
treeTools`functionNames["D",2]={"superFunction[f_,C_]","positroidLabel[superFunction[f_,C_]]","standardizeSuperFunctions[exprn_]","superFunctionProductRule"};


standardizeSuperFunctions[exprn_]:=(exprn/.{superFunction[fcn_,cMatrix_?MatrixQ]:>Block[{n=Length[cMatrix[[1]]],gauge=minimalNonVanishingComponent[DeleteDuplicates@cMatrix],det,lMat,fix},lMat=If[And@@(And@@NumericQ/@#&/@cMatrix)&&n===Length[Ls],Transpose[Ls],(canonicalizeSpinors[Length[cMatrix[[1]]]][{-1,1}*(Array[ab[#2,Reverse[{1,n}][[#1]]]/ab[n,1]&,{2,n}]/.ab[x__]:>Signature[{x}]ab@@Sort[{x}])])];fix=Join[lMat[[All,gauge]],IdentityMatrix[Length[gauge]][[3;;-1]]] . FullSimplify[Inverse[Join[lMat,DeleteDuplicates[cMatrix]][[All,gauge]]]];det=FullSimplify[Det[fix]];superFunction[Power[det,-4*If[DuplicateFreeQ[cMatrix],1,2]]fcn,If[DuplicateFreeQ[cMatrix],#,Join[#,#]]&@((fix . Join[lMat,DeleteDuplicates[cMatrix]])[[3;;-1]])]]});

superFunctionProductRule={-superFunction[fcn_,mat_]:>superFunction[-fcn,mat],colorFactor[legs___]superFunction[fcn_,mat_]:>superFunction[colorFactor[legs]fcn,mat],superFunction[fcn_,cMat__]^n_:>superFunction[fcn^n,Join@@(cMat&)/@Range[n]],superFunction[leftF_,leftC_] superFunction[rightF_,rightC_]:>superFunction[leftF rightF,Join[leftC,rightC]],superFunctionL[leftF_,leftC_] superFunctionR[rightF_,rightC_]:>superFunction[leftF rightF,Join[leftC,rightC]],times[superFunction[leftF_,leftC_],superFunction[rightF_,rightC_]]:>superFunction[leftF rightF,Join[leftC,rightC]]};


(* ::Subsection:: *)
(*Component Functions of Spinor superFunctions*)


treeTools`functionTypes["D",3]="Component Functions of (Spinor) superFunctions";
treeTools`functionNames["D",3]={"component[componentStates__][exprn_]","stateListToMinorList[componentStates_]","minorListToStateList[n_:][minors_]","dressedMinor[columnLabels_][cMatrix_]",
"minimalNonVanishingComponent[superFunction[f_,C_]]"};


component[{stateList__}][Plus[x_,y__]]:=Total[component[{stateList}][#]&/@{x,y}];
component[{stateList__}][exprn_]:=Block[{minorList=If[And@@((Head[#]===List)&/@Flatten[{stateList},0])&&MatrixQ[{stateList}],If[Head[Flatten[{stateList},1][[1]]]===Integer,{stateList}],stateListToMinorList[Flatten@{stateList}]],k,susyN},k=Length[First[minorList]]-2;susyN=Length[minorList];If[k===0,(If[NumericQ[Flatten[{exprn}][[1]]],Times@@(Det[Ls[[#]]]&/@minorList),((Times@@(ab@@@minorList)))](exprn/.superFunction[fcn_,cMatrix_]:>0)),(If[Count[exprn,superFunction[__],{0,\[Infinity]}]==0,0,exprn]/.{superFunction[fcn_,cMatrix_]/;Length[cMatrix]==k susyN/4:>If[treeTools`numericMatrixQ[cMatrix],fcn*Product[Det[Join[Transpose[Ls],cMatrix[[1;;k]]][[All,minor]]],{minor,minorList[[1;;susyN/2]]}]Product[Det[Join[Transpose[Ls],cMatrix[[-k;;-1]]][[All,minor]]],{minor,minorList[[-susyN/2;;-1]]}],fcn*Product[dressedMinor[minor][cMatrix[[1;;k]]],{minor,minorList[[1;;susyN/2]]}]Product[dressedMinor[minor][cMatrix[[-k;;-1]]],{minor,minorList[[-susyN/2;;-1]]}]],superFunction[x__]:>0})]];
component[stateList__][exprn_]:=component[{stateList}][exprn];

stateListToMinorList[stateList_List]/;legalComponentStatesQ[stateList]:=Block[{standardStates=treeTools`standardizeSuperstateNames[stateList],susyN=If[(Count[stateList,mm|pp|gravitino[__]|graviPhoton[__]|gravitinoBar[__]|psi[x_,y_,z_]|psiBar[x_,y_,z_]|phi[x_,y_,z_,w_]|phiBar[x_,y_,z_,w_],{0,\[Infinity]}]>0)||(Max[Prepend[Cases[Flatten[stateList],q_Integer,{0,\[Infinity]}],0]]==8),8,4]},Block[{chargeList=(standardStates/.{mm->Range[8],m->Range[4],psi[x_]:>{x},psi[x_,y_,z_]:>{x,y,z},psiBar[x_]:>Complement[Range[susyN],{x}],psiBar[x_,y_,z_]:>Complement[Range[susyN],{x,y,z}],gravitinoBar[x_]:>Complement[Range[8],{x}],phiBar[x__]:>Complement[Range[susyN],{x}],gravitino->List,phi[x_,y_]:>{x,y},phi[x_,y_,z_,w_]:>{x,y,z,w},graviPhoton->List,graviPhotonBar[x__]:>Complement[Range[8],{x}],pp->{},p->{}})},Position[chargeList,#][[All,1]]&/@Range[susyN]]];

minorListToStateList[n_:0][minorList_List]/;Depth[minorList]==3:=Block[{ephN=If[n===0,Max[Append[Cases[Flatten[minorList],q_Integer,{0,\[Infinity]}],0]],n],ephK=DeleteDuplicates[Length[DeleteDuplicates[#]]&/@minorList]},If[(*Length[ephK]>1||*)(Max[Append[Cases[Flatten[minorList],q_Integer,{0,\[Infinity]}],0]]>ephN),Print["Minor lists must consist of 4 or 8 subsets of n."],Block[{susyN=Length[minorList]},If[Not[MemberQ[{4,8},susyN]],Print["You must specify 4 minors for a sYM amplitude or 8 for a SUGRA amplitude"],Block[{cmpt},ephK=ephK[[1]];If[(ephN==3&&Not[MemberQ[{1,2},ephK]])||(ephN>3&&Not[MemberQ[Range[2,ephN-2],ephK]]),Print["The specified minors correspond to a vanishing amplitude"],(cmpt=Position[minorList,#][[All,1]]&/@Range[ephN];(Replace[cmpt,If[susyN==8,{List[x___]:>Which[Length[{x}]==8,mm,Length[{x}]==7,gravitinoBar[Complement[Range[8],{x}][[1]]],Length[{x}]==6,graviPhotonBar@@Complement[Range[8],{x}],Length[{x}]==5,psiBar@@Complement[Range[8],{x}],Length[{x}]==4&&OrderedQ[{{x},Complement[Range[8],{x}]}],phi[x],Length[{x}]==4&&Not[OrderedQ[{{x},Complement[Range[8],{x}]}]],phiBar@@Complement[Range[8],{x}],Length[{x}]==3,psi[x],Length[{x}]==2,graviPhoton[x],Length[{x}]==1,gravitino[x],True,pp]},{Range[4]->m,{}->p,{x_,y_,z_}:>psiBar[Complement[Range[4],{x,y,z}][[1]]],{x_}:>psi[x],{x_,y_}:>If[OrderedQ[{{x,y},Complement[Range[4],{x,y}]}],phi[x,y],phiBar@@Complement[Range[4],{x,y}]]}],{1}]))]]]]]];

dressedMinor[{columnList__Integer}][cMatrix_?MatrixQ]/;(Length[{columnList}]==Length[cMatrix]+2):=Block[{k=Length[DeleteDuplicates[cMatrix]],n=Length[cMatrix[[1]]],relevantColumns=cMatrix[[All,{columnList}]]},If[treeTools`numericMatrixQ[relevantColumns],Det[Join[Transpose[Ls[[{columnList}]]],relevantColumns]],If[k===n-4,Signature[DeleteDuplicates[Join[{columnList},Range[n]]]]sb@@Complement[Range[n],{columnList}],Total[Power[-1,Total[#]-1](ab@@({columnList}[[#]]))Det[relevantColumns[[All,DeleteCases[Range[k+2],Alternatives@@#]]]]&/@Subsets[Range[k+2],{2}]]]]];
dressedMinor[columnList__Integer][cMatrix_?MatrixQ]:=dressedMinor[{columnList}][cMatrix];

minimalNonVanishingComponent[cMatrix_?MatrixQ]:=Block[{nMat=If[treeTools`numericMatrixQ[cMatrix],Join[Transpose[Ls],cMatrix],explicify[Length[cMatrix[[1]]],Join[Array[\[Lambda][#2,#1]&,{2,Length[cMatrix[[1]]]}],DeleteDuplicates@cMatrix]]]},Select[(Join[{1,Length[cMatrix[[1]]]},#]&/@Subsets[DeleteCases[Range[Length[cMatrix[[1]]]-1],Alternatives@@{1}],{Length[DeleteDuplicates[cMatrix]]}]),Not[Det[nMat[[All,#]]]===0]&,1][[1]]];
minimalNonVanishingComponent[superFunction[fcn_,cMatrix_]]:=minimalNonVanishingComponent[cMatrix];


(* ::Subsection:: *)
(*Manipulation of Spinor-Expressions*)


treeTools`functionTypes["D",4]="Manipulations of Spinor Expressions";
treeTools`functionNames["D",4]={"canonicalizeSpinors[n_][exprn_]","permuteLegs[newLegLabels__][exprn_]","bcfwShift[{a_,b_}][exprn_]","expandSpinorBrackets[exprn_]","expandSpinorBrackets[{a_,b_},exprn_]"};


(* ::Subsubsection:: *)
(*Manipulations of Analytic Spinor Expressions*)


canonicalizeSpinors[inputN_:0][exprn_]:=Block[{n=If[inputN===0,Max[Cases[Flatten[Join[Cases[exprn,ab[x__]:>x,{0,\[Infinity]}],Cases[exprn,sb[x__]:>x,{0,\[Infinity]}],Cases[exprn,asb[x__]:>x,{0,\[Infinity]}],Cases[exprn,sab[x__]:>x,{0,\[Infinity]}],Cases[exprn,p[x__]:>x,{0,\[Infinity]}],Cases[exprn,s[x__]:>x,{0,\[Infinity]}]]],q_Integer,{0,\[Infinity]}]],inputN],standardPs},standardPs=Join@@(Partition[Range[n],#,1,1]&/@Range[2,Floor[n/2]]);((exprn//.{p[x__]:>p@@Sort[{x}],ab[x_,y_]:>Signature[{x,y}]ab@@Sort[{x,y}],sb[x_,y_]:>Signature[{x,y}]sb@@Sort[{x,y}]}//.{s[x___]:>s@@(Sort[{Sort[{x}],Complement[Range[n],{x}]}][[1]]),head_[x___,p[],y___]:>0,head_[x_Integer,q__p,y_Integer]:>Block[{duals=(Sort[{Sort[#],Complement[Range[n],#]}][[1]]&/@(List@@@{q})),sign,dropList},sign=Power[-1,Length[{q}]-Count[Transpose[{List@@@{q},duals}],{a_,a_}]];dropList=Partition[RotateLeft[Join[{{y},{x}},duals]],3,1];duals=Complement[#[[2]],Join@@Cases[#[[{1,-1}]],{r_},{1}]]&/@dropList;sign head[x,Sequence@@(p@@@duals),y]]}//.{ab[x_,q___p,y_]:>If[{x,y}==={n,1},ab[x,q,y],If[OrderedQ[{x,y}],ab[x,q,y],-ab[y,Sequence@@Reverse[{q}],x]]],sb[x_,q___p,y_]:>If[{x,y}==={n,1},sb[x,q,y],If[OrderedQ[{x,y}],sb[x,q,y],-sb[y,Sequence@@Reverse[{q}],x]]]}//.{head_[x_Integer,p[q___],y___]:>If[OrderedQ[{Complement[{q},{x}],Complement[Range[n],{x,q}]}],head[x,p@@Complement[{q},{x}],y],-head[x,p@@Complement[Range[n],{x,q}],y]]}//.{head_[y___,p[q___],x_Integer]:>If[OrderedQ[{Complement[{q},{x}],Complement[Range[n],{x,q}]}],head[y,p@@Complement[{q},{x}],x],-head[y,p@@Complement[Range[n],{x,q}],x]]})/.((Total[ab[#1,#2]sb[#1,#2]&@@@Subsets[Sort[#],{2}]]->s@@#)&/@Select[Reverse[standardPs],Length[#]>2&])/.s[x_Integer,y_Integer]:>ab[x,y]sb[x,y]//.{asb[x___,p[y_],q_]:>ab[x,y]sb[y,q],asb[x_,p[y_],q___]:>ab[x,y]sb[y,q],ab[x_,p[y_],q___]:>ab[x,y]asb[Sequence@@Reverse[{q}],y],ab[x___,p[y_],q_]:>ab[y,q]asb[x,y],sb[x_,p[y_],q___]:>sb[x,y]asb[y,q],sb[x___,p[y_],q_]:>sb[y,q]asb[y,Sequence@@Reverse[{x}]]}//.{ab[x_,q___p,y_]:>If[{x,y}==={n,1},ab[x,q,y],If[OrderedQ[{x,y}],ab[x,q,y],-ab[y,Sequence@@Reverse[{q}],x]]],sb[x_,q___p,y_]:>If[{x,y}==={n,1},sb[x,q,y],If[OrderedQ[{x,y}],sb[x,q,y],-sb[y,Sequence@@Reverse[{q}],x]]]}/.{p[x__]:>p@@Sort[{x}],ab[x_,y_]:>Signature[{x,y}]ab@@Sort[{x,y}],sb[x_,y_]:>Signature[{x,y}]sb@@Sort[{x,y}]}//.{head_[x__,p[y__],p[y__],z__]:>-s[y]head[x,z]}//.{head_[a_,p[r1__],p[r2__],b_]:>If[Sort[{a,r1}]===Sort[{r2,b}],-s@@Sort[{r1,a}]head[a,b],head[a,p[r1],p[r2],b]]}//.{head_[x_,p[r__],y_]:>If[OrderedQ[{Sort[{r}],Complement[Range[n],{x,y,r}]}],head[x,p[r],y],-head[x,p@@Complement[Range[n],{x,y,r}],y]](*,head_[x_,q__p,x_]/;EvenQ[Length[{q}]]:>If[Not[OrderedQ[{q}]],-head[x,Sequence@@Reverse[{q}],x],head[x,q,x]]*)(*head_[x_,p[r__],y_]:>If[OrderedQ[{Sort[{r}],Complement[Range[n],{x,y,r}]}],head[x,p[r],y],-head[x,p@@Complement[Range[n],{x,y,r}],y]](*,head_[x_,p[r1__],p[r2__],x_]:>If[OrderedQ[{Sort[{r1}],Complement[Range[n],{x,r1,r2}]}],If[OrderedQ[{Sort[{r2}],Complement[Range[n],{x,r1,r2}]}],-head[x,p[r1],p@@Complement[Range[n],{x,r1,r2}],x],head[x,p[r1],p[r2],x]],-head[x,p@@Complement[Range[n],{x,r1,r2}],p[r2],x]]*),*)}//.{s[x___]:>s@@(Sort[{Sort[{x}],Complement[Range[n],{x}]}][[1]]),head_[x___,p[],y___]:>0,head_[x_Integer,q__p,y_Integer]:>Block[{duals=(Sort[{Sort[#],Complement[Range[n],#]}][[1]]&/@(List@@@{q})),sign,dropList},sign=Power[-1,Length[{q}]-Count[Transpose[{List@@@{q},duals}],{a_,a_}]];dropList=Partition[RotateLeft[Join[{{y},{x}},duals]],3,1];duals=Complement[#[[2]],Join@@Cases[#[[{1,-1}]],{r_},{1}]]&/@dropList;sign head[x,Sequence@@(p@@@duals),y]]}/.Thread[Rule[p@@@(Sort/@standardPs),p@@@standardPs]]/.Thread[Rule[s@@@(Sort/@standardPs),s@@@standardPs]]/.Thread[Rule[ab@@@(Sort/@standardPs[[1;;n]]),(Signature/@standardPs[[1;;n]])*ab@@@(standardPs[[1;;n]])]]/.Thread[Rule[sb@@@(Sort/@standardPs[[1;;n]]),(Signature/@standardPs[[1;;n]])*sb@@@(standardPs[[1;;n]])]])/.((Total[ab[#1,#2]sb[#1,#2]&@@@(Subsets[#,{2}])]->s@@#)&/@Select[Reverse[standardPs],Length[#]>=2&])/.s[x_,y_]:>ab[x,y]sb[x,y]];

permuteLegs[{legs__Integer}][exprn_]:=If[{legs}===Sort[{legs}],exprn,Block[{rule=Thread[Rule[Sort[{legs}],{legs}]],out},out=(exprn/.{ab[x__]:>ab@@({x}/.rule),sb[x__]:>sb@@({x}/.rule),asb[x__]:>asb@@({x}/.rule),sab[x__]:>sab@@({x}/.rule),ss[x__]:>ss@@({x}/.rule),s[x__]:>s@@({x}/.rule),\[Lambda][x_,y_]:>\[Lambda][(x/.rule),y],\[Lambda]b[x_,y_]:>\[Lambda]b[(x/.rule),y],colorFactor[x__]:>colorFactor@@({x}/.rule),tr[x__]:>tr@@({x}/.rule),p[x__]:>p@@({x}/.rule),amp[x__]:>amp@@({x}/.rule),fcn[i_][x__]:>fcn[i]@@({x}/.rule)});out=(out/.{superFunction[fcn_,cMatrix_?MatrixQ]:>superFunction[fcn,cMatrix[[All,Ordering[Range[Length[cMatrix[[1]]]]/.rule]]]]})]];
permuteLegs[legs__Integer][exrpn_]:=permuteLegs[{legs}][exprn];

bcfwShift[{a_Integer,b_Integer}][exprn_]/;(a!=b):=(expandSpinorBrackets[{a,b},exprn]/.{\[Lambda]b[a,x___]:>\[Lambda]b[a,x]-\[Alpha] \[Lambda]b[b,x],\[Lambda][b,x___]:>\[Lambda][b,x]+\[Alpha] \[Lambda][a,x],sb[x___,a,y___]:>sb[x,a,y]-If[MemberQ[{x,y},b],0,\[Alpha] sb[x,b,y]],ab[x___,b,y___]:>ab[x,b,y]+If[MemberQ[{x,y},a],0,\[Alpha] ab[x,a,y]],asb[b,x___,a]:>asb[b,x,a]-\[Alpha] (asb[b,x,b]-asb[a,x,a])-\[Alpha]^2 asb[a,x,b],asb[x___,a]:>asb[x,a]-\[Alpha] asb[x,b],asb[b,x___]:>asb[b,x]+\[Alpha] asb[a,x],s[x___,a,y___]:>If[Not[MemberQ[{x,y},b]],s[x,a,y]+\[Alpha] asb[a,p[x,y],b],s[x,a,y]],s[x___,b,y___]:>If[Not[MemberQ[{x,y},a]],s[x,b,y]-\[Alpha] asb[a,p[x,y],b],s[x,a,y]]})/.{superFunction[fcn_,cMat_]:>superFunction[fcn,(Factor/@#&/@canonicalizeSpinors[Length[cMat[[1]]]][(Transpose[ReplacePart[#,b->#[[b]]-\[Alpha] #[[a]]]&@Transpose[cMat]])]/.{-sb[x_,y_]:>sb[y,x]})]};
bcfwShift[a_Integer,b_Integer][exprn_]/;(a!=b):=bcfwShift[{a,b}][exprn];

expandSpinorBrackets[exprn_]:=((exprn//.{s[x__]:>Total[((ab@@#)(sb@@#)&/@Subsets[{x},{2}])]})//.{asb[x_Integer,q__p,y_Integer]:>Total[Times@@@((ab@@#1sb@@#2&@@@#&/@(Partition[#,2]&/@(Partition[#,2,1]&/@(Tuples@Append[Prepend[(List@@@{q}),{x}],{y}])))))],sab[x_Integer,q__p,y_Integer]:>Total[Times@@@((sb@@#1ab@@#2&@@@#&/@(Partition[#,2]&/@(Partition[#,2,1]&/@(Tuples@Append[Prepend[(List@@@{q}),{x}],{y}])))))],ab[x_Integer,q__p,y_Integer]:>Total[(Times@@@((ab@@#1sb@@#2&@@@#&/@(If[Length[#]==1,Append[#,{}],#]&/@#&/@(Partition[#,2,2,1,{}]&/@(Partition[#,2,1]&/@(Tuples@Append[Prepend[(List@@@{q}),{x}],{y}])))))/.sb[]->1))],sb[x_Integer,q__p,y_Integer]:>Total[(Times@@@((sb@@#1ab@@#2&@@@#&/@(If[Length[#]==1,Append[#,{}],#]&/@#&/@(Partition[#,2,2,1,{}]&/@(Partition[#,2,1]&/@(Tuples@Append[Prepend[(List@@@{q}),{x}],{y}])))))/.ab[]->1))]}//.{ab[x_,x_]:>0,sb[x_,x_]:>0});
expandSpinorBrackets[{a_Integer,b_Integer},exprn_]:=Block[{n=Max[Cases[Flatten[List[{a,b},Cases[exprn,sb[x__]:>x,{0,\[Infinity]}],Cases[exprn,ab[x__]:>x,{0,\[Infinity]}],Cases[exprn,s[x__]:>x,{0,\[Infinity]}],Cases[exprn,asb[x__]:>x,{0,\[Infinity]}],Cases[exprn,sab[x__]:>x,{0,\[Infinity]}],Cases[exprn,p[x__]:>x,{0,\[Infinity]}]]],q_Integer,{0,\[Infinity]}]]},(((exprn//.{s[x___]:>Which[Length[Intersection[{x},{a,b}]]==0,s[x],Length[Intersection[{x},{a,b}]]==2,s@@Complement[Range[n],{x}],True,s[x](*Block[{rest=Complement[{x},{a,b}],anchor=Intersection[{a,b},{x}][[1]]},If[Length[rest]==1,0,s@@rest]-asb[anchor,p@@rest,anchor]]*)]})//.{head_[a,p[y__],rest___]:>If[MemberQ[{y},b]&&Not[MemberQ[{y},a]],head[a,p[a,y],rest],head[a,p[y],rest]],head_[b,p[y__],rest___]:>If[MemberQ[{y},a]&&Not[MemberQ[{y},b]],head[b,p[b,y],rest],head[b,p[y],rest]]}//.{head_[rest__,p[y__],a]:>If[MemberQ[{y},b]&&Not[MemberQ[{y},a]],head[rest,p[a,y],a],head[rest,p[y],a]],head_[rest__,p[y__],b]:>If[MemberQ[{y},a]&&Not[MemberQ[{y},b]],head[rest,p[b,y],b],head[rest,p[y],b]]})/.{head_[x_Integer,q__p,y_Integer]:>Block[{argList=List@@@{q},offSets,sign=1},offSets=Which[Length[Intersection[#,{a,b}]]==0,{#},Length[Intersection[#,{a,b}]]==2,(sign=-sign;{Complement[Range[n],#]}),True,{Complement[#,{a,b}],Intersection[#,{a,b}]}]&/@argList;sign Sum[head[x,Sequence@@(p@@@list),y],{list,Tuples@(offSets)}]]}/.{sab[x___]:>asb@@Reverse[{x}]}//.{sab[x___,p[q_],y___]:>If[MemberQ[{a,b},q],If[EvenQ[Length[{x}]],asb[x,q]asb[q,y],ab[x,q]sb[q,y]],asb[x,p[q],y]],asb[x___,p[q_],y___]:>If[MemberQ[{a,b},q],If[EvenQ[Length[{x}]],asb[x,q]asb[q,y],ab[x,q]sb[q,y]],asb[x,p[q],y]],ab[x___,p[q_],y___]:>If[MemberQ[{a,b},q],If[EvenQ[Length[{x}]],asb[x,q]ab[q,y],ab[x,q]asb[Sequence@@Reverse[{y}],q]],ab[x,p[q],y]],sb[x___,p[q_],y___]:>If[MemberQ[{a,b},q],If[EvenQ[Length[{x}]],asb[q,Sequence@@Reverse[{x}]]sb[q,y],sb[x,q]asb[q,y]],sb[x,p[q],y]]}//.{ab[x___,p[y_],p[r1___,y_,r2___],z___]:>ab[x,p[y],p[r1,r2],z],ab[x___,p[r1___,y_,r2___],p[y_],z___]:>ab[x,p[r1,r2],p[y],z],sb[x___,p[y_],p[r1___,y_,r2___],z___]:>sb[x,p[y],p[r1,r2],z],sb[x___,p[r1___,y_,r2___],p[y_],z___]:>sb[x,p[r1,r2],p[y],z],asb[x___,p[y_],p[r1___,y_,r2___],z___]:>asb[x,p[y],p[r1,r2],z],asb[x___,p[r1___,y_,r2___],p[y_],z___]:>asb[x,p[r1,r2],p[y],z],sab[x___,p[y_],p[r1___,y_,r2___],z___]:>sab[x,p[y],p[r1,r2],z],sab[x___,p[r1___,y_,r2___],p[y_],z___]:>sab[x,p[r1,r2],p[y],z],ab[x___,p[],y___]:>0,asb[x___,p[],y___]:>0,sab[x___,p[],y___]:>0,sb[x___,p[],y___]:>0,sab[x___,p[a],y___]:>If[EvenQ[Length[{x}]],asb[x,a]asb[a,y],ab[x,a]sb[a,y]],sab[x___,p[b],y___]:>If[EvenQ[Length[{x}]],asb[x,b]asb[b,y],ab[x,b]sb[b,y]],asb[x___,p[a],y___]:>If[EvenQ[Length[{x}]],asb[x,a]asb[a,y],ab[x,a]sb[a,y]],asb[x___,p[b],y___]:>If[EvenQ[Length[{x}]],asb[x,b]asb[b,y],ab[x,b]sb[b,y]],ab[x___,p[a],y___]:>If[EvenQ[Length[{x}]],asb[x,a]ab[a,y],ab[x,a]asb[Sequence@@Reverse[{y}],a]],ab[x___,p[b],y___]:>If[EvenQ[Length[{x}]],asb[x,b]ab[b,y],ab[x,b]asb[Sequence@@Reverse[{y}],b]],sb[x___,p[a],y___]:>If[EvenQ[Length[{x}]],asb[a,Sequence@@Reverse[{x}]]sb[a,y],sb[x,a]asb[a,y]],sb[x___,p[b],y___]:>If[EvenQ[Length[{x}]],asb[b,Sequence@@Reverse[{x}]]sb[b,y],sb[x,b]asb[b,y]]})];


treeTools`canonicalizeSs[inputN_:0][exprn_]:=Block[{n=If[inputN===0,Max[Cases[Flatten[Join[Cases[exprn,ab[x__]:>x,{0,\[Infinity]}],Cases[exprn,sb[x__]:>x,{0,\[Infinity]}],Cases[exprn,asb[x__]:>x,{0,\[Infinity]}],Cases[exprn,sab[x__]:>x,{0,\[Infinity]}],Cases[exprn,p[x__]:>x,{0,\[Infinity]}],Cases[exprn,s[x__]:>x,{0,\[Infinity]}]]],q_Integer,{0,\[Infinity]}]],inputN],standardPs},standardPs=Join@@(Partition[Range[n],#,1,1]&/@Range[2,Floor[n/2]]);((exprn//.{s[x___]:>s@@(Sort[{Sort[{x}],Complement[Range[n],{x}]}][[1]])})/.Thread[Rule[s@@@(Sort/@standardPs),s@@@standardPs]])];

treeTools`spinorTransformationFunctions=List[Factor,(#/.Join[{-ab[x_,z_] ab[y_,w_]+ab[x_,y_] ab[z_,w_]:>ab[w,x] ab[y,z],-ab[x_,z_] ab[y_,w_]+ab[x_,y_] ab[z_,w_]:>-ab[x,w] ab[y,z],-ab[x_,z_] ab[y_,w_]+ab[x_,y_] ab[z_,w_]:>-ab[w,x] ab[z,y],-ab[x_,z_] ab[y_,w_]+ab[x_,y_] ab[z_,w_]:>ab[x,w] ab[z,y],ab[w_,z_] ab[x_,y_]+ab[x_,z_] ab[y_,w_]:>-ab[w,x] ab[y,z],ab[w_,z_] ab[x_,y_]+ab[x_,z_] ab[y_,w_]:>ab[x,w] ab[y,z],ab[w_,z_] ab[x_,y_]+ab[x_,z_] ab[y_,w_]:>ab[w,x] ab[z,y],ab[w_,z_] ab[x_,y_]+ab[x_,z_] ab[y_,w_]:>-ab[x,w] ab[z,y],ab[x_,z_] ab[y_,w_]+ab[y_,x_] ab[z_,w_]:>-ab[w,x] ab[y,z],ab[x_,z_] ab[y_,w_]+ab[y_,x_] ab[z_,w_]:>ab[x,w] ab[y,z],ab[x_,z_] ab[y_,w_]+ab[y_,x_] ab[z_,w_]:>ab[w,x] ab[z,y],ab[x_,z_] ab[y_,w_]+ab[y_,x_] ab[z_,w_]:>-ab[x,w] ab[z,y],-ab[x_,z_] ab[y_,w_]+ab[w_,z_] ab[y_,x_]:>ab[w,x] ab[y,z],-ab[x_,z_] ab[y_,w_]+ab[w_,z_] ab[y_,x_]:>-ab[x,w] ab[y,z],-ab[x_,z_] ab[y_,w_]+ab[w_,z_] ab[y_,x_]:>-ab[w,x] ab[z,y],-ab[x_,z_] ab[y_,w_]+ab[w_,z_] ab[y_,x_]:>ab[x,w] ab[z,y],ab[w_,y_] ab[x_,z_]+ab[x_,y_] ab[z_,w_]:>ab[w,x] ab[y,z],ab[w_,y_] ab[x_,z_]+ab[x_,y_] ab[z_,w_]:>-ab[x,w] ab[y,z],ab[w_,y_] ab[x_,z_]+ab[x_,y_] ab[z_,w_]:>-ab[w,x] ab[z,y],ab[w_,y_] ab[x_,z_]+ab[x_,y_] ab[z_,w_]:>ab[x,w] ab[z,y],-ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[x_,z_]:>ab[w,x] ab[y,z],-ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[x_,z_]:>-ab[x,w] ab[y,z],-ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[x_,z_]:>-ab[w,x] ab[z,y],-ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[x_,z_]:>ab[x,w] ab[z,y],ab[w_,y_] ab[x_,z_]-ab[y_,x_] ab[z_,w_]:>ab[w,x] ab[y,z],ab[w_,y_] ab[x_,z_]-ab[y_,x_] ab[z_,w_]:>-ab[x,w] ab[y,z],ab[w_,y_] ab[x_,z_]-ab[y_,x_] ab[z_,w_]:>-ab[w,x] ab[z,y],ab[w_,y_] ab[x_,z_]-ab[y_,x_] ab[z_,w_]:>ab[x,w] ab[z,y],ab[w_,y_] ab[x_,z_]+ab[w_,z_] ab[y_,x_]:>ab[w,x] ab[y,z],ab[w_,y_] ab[x_,z_]+ab[w_,z_] ab[y_,x_]:>-ab[x,w] ab[y,z],ab[w_,y_] ab[x_,z_]+ab[w_,z_] ab[y_,x_]:>-ab[w,x] ab[z,y],ab[w_,y_] ab[x_,z_]+ab[w_,z_] ab[y_,x_]:>ab[x,w] ab[z,y],ab[x_,y_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[y,z],ab[x_,y_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[y,z],ab[x_,y_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[z,y],ab[x_,y_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[z,y],-ab[w_,z_] ab[x_,y_]+ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[y,z],-ab[w_,z_] ab[x_,y_]+ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[y,z],-ab[w_,z_] ab[x_,y_]+ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[z,y],-ab[w_,z_] ab[x_,y_]+ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[z,y],-ab[y_,x_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[y,z],-ab[y_,x_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[y,z],-ab[y_,x_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[z,y],-ab[y_,x_] ab[z_,w_]+ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[z,y],ab[w_,z_] ab[y_,x_]+ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[y,z],ab[w_,z_] ab[y_,x_]+ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[y,z],ab[w_,z_] ab[y_,x_]+ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[z,y],ab[w_,z_] ab[y_,x_]+ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[z,y],ab[x_,y_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[y,z],ab[x_,y_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[y,z],ab[x_,y_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[z,y],ab[x_,y_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[z,y],ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[y,z],ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[y,z],ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[z,y],ab[w_,z_] ab[x_,y_]+ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[z,y],ab[y_,x_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[y,z],ab[y_,x_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[y,z],ab[y_,x_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[z,y],ab[y_,x_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[z,y],ab[w_,z_] ab[y_,x_]-ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[y,z],ab[w_,z_] ab[y_,x_]-ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[y,z],ab[w_,z_] ab[y_,x_]-ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[z,y],ab[w_,z_] ab[y_,x_]-ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[z,y],ab[x_,z_] ab[y_,w_]-ab[x_,y_] ab[z_,w_]:>-ab[w,x] ab[y,z],ab[x_,z_] ab[y_,w_]-ab[x_,y_] ab[z_,w_]:>ab[x,w] ab[y,z],ab[x_,z_] ab[y_,w_]-ab[x_,y_] ab[z_,w_]:>ab[w,x] ab[z,y],ab[x_,z_] ab[y_,w_]-ab[x_,y_] ab[z_,w_]:>-ab[x,w] ab[z,y],-ab[w_,z_] ab[x_,y_]-ab[x_,z_] ab[y_,w_]:>ab[w,x] ab[y,z],-ab[w_,z_] ab[x_,y_]-ab[x_,z_] ab[y_,w_]:>-ab[x,w] ab[y,z],-ab[w_,z_] ab[x_,y_]-ab[x_,z_] ab[y_,w_]:>-ab[w,x] ab[z,y],-ab[w_,z_] ab[x_,y_]-ab[x_,z_] ab[y_,w_]:>ab[x,w] ab[z,y],-ab[x_,z_] ab[y_,w_]-ab[y_,x_] ab[z_,w_]:>ab[w,x] ab[y,z],-ab[x_,z_] ab[y_,w_]-ab[y_,x_] ab[z_,w_]:>-ab[x,w] ab[y,z],-ab[x_,z_] ab[y_,w_]-ab[y_,x_] ab[z_,w_]:>-ab[w,x] ab[z,y],-ab[x_,z_] ab[y_,w_]-ab[y_,x_] ab[z_,w_]:>ab[x,w] ab[z,y],ab[x_,z_] ab[y_,w_]-ab[w_,z_] ab[y_,x_]:>-ab[w,x] ab[y,z],ab[x_,z_] ab[y_,w_]-ab[w_,z_] ab[y_,x_]:>ab[x,w] ab[y,z],ab[x_,z_] ab[y_,w_]-ab[w_,z_] ab[y_,x_]:>ab[w,x] ab[z,y],ab[x_,z_] ab[y_,w_]-ab[w_,z_] ab[y_,x_]:>-ab[x,w] ab[z,y],-ab[w_,y_] ab[x_,z_]-ab[x_,y_] ab[z_,w_]:>-ab[w,x] ab[y,z],-ab[w_,y_] ab[x_,z_]-ab[x_,y_] ab[z_,w_]:>ab[x,w] ab[y,z],-ab[w_,y_] ab[x_,z_]-ab[x_,y_] ab[z_,w_]:>ab[w,x] ab[z,y],-ab[w_,y_] ab[x_,z_]-ab[x_,y_] ab[z_,w_]:>-ab[x,w] ab[z,y],ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[x_,z_]:>-ab[w,x] ab[y,z],ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[x_,z_]:>ab[x,w] ab[y,z],ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[x_,z_]:>ab[w,x] ab[z,y],ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[x_,z_]:>-ab[x,w] ab[z,y],-ab[w_,y_] ab[x_,z_]+ab[y_,x_] ab[z_,w_]:>-ab[w,x] ab[y,z],-ab[w_,y_] ab[x_,z_]+ab[y_,x_] ab[z_,w_]:>ab[x,w] ab[y,z],-ab[w_,y_] ab[x_,z_]+ab[y_,x_] ab[z_,w_]:>ab[w,x] ab[z,y],-ab[w_,y_] ab[x_,z_]+ab[y_,x_] ab[z_,w_]:>-ab[x,w] ab[z,y],-ab[w_,y_] ab[x_,z_]-ab[w_,z_] ab[y_,x_]:>-ab[w,x] ab[y,z],-ab[w_,y_] ab[x_,z_]-ab[w_,z_] ab[y_,x_]:>ab[x,w] ab[y,z],-ab[w_,y_] ab[x_,z_]-ab[w_,z_] ab[y_,x_]:>ab[w,x] ab[z,y],-ab[w_,y_] ab[x_,z_]-ab[w_,z_] ab[y_,x_]:>-ab[x,w] ab[z,y],-ab[x_,y_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[y,z],-ab[x_,y_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[y,z],-ab[x_,y_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[z,y],-ab[x_,y_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[z,y],ab[w_,z_] ab[x_,y_]-ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[y,z],ab[w_,z_] ab[x_,y_]-ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[y,z],ab[w_,z_] ab[x_,y_]-ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[z,y],ab[w_,z_] ab[x_,y_]-ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[z,y],ab[y_,x_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[y,z],ab[y_,x_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[y,z],ab[y_,x_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[z,y],ab[y_,x_] ab[z_,w_]-ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[z,y],-ab[w_,z_] ab[y_,x_]-ab[y_,w_] ab[z_,x_]:>-ab[w,x] ab[y,z],-ab[w_,z_] ab[y_,x_]-ab[y_,w_] ab[z_,x_]:>ab[x,w] ab[y,z],-ab[w_,z_] ab[y_,x_]-ab[y_,w_] ab[z_,x_]:>ab[w,x] ab[z,y],-ab[w_,z_] ab[y_,x_]-ab[y_,w_] ab[z_,x_]:>-ab[x,w] ab[z,y],-ab[x_,y_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[y,z],-ab[x_,y_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[y,z],-ab[x_,y_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[z,y],-ab[x_,y_] ab[z_,w_]+ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[z,y],-ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[y,z],-ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[y,z],-ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[z,y],-ab[w_,z_] ab[x_,y_]-ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[z,y],-ab[y_,x_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[y,z],-ab[y_,x_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[y,z],-ab[y_,x_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[z,y],-ab[y_,x_] ab[z_,w_]-ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[z,y],-ab[w_,z_] ab[y_,x_]+ab[w_,y_] ab[z_,x_]:>-ab[w,x] ab[y,z],-ab[w_,z_] ab[y_,x_]+ab[w_,y_] ab[z_,x_]:>ab[x,w] ab[y,z],-ab[w_,z_] ab[y_,x_]+ab[w_,y_] ab[z_,x_]:>ab[w,x] ab[z,y],-ab[w_,z_] ab[y_,x_]+ab[w_,y_] ab[z_,x_]:>-ab[x,w] ab[z,y]},{-sb[x_,z_] sb[y_,w_]+sb[x_,y_] sb[z_,w_]:>-sb[x,w] sb[y,z],-sb[x_,z_] sb[y_,w_]+sb[x_,y_] sb[z_,w_]:>sb[x,w] sb[z,y],-sb[x_,z_] sb[y_,w_]+sb[x_,y_] sb[z_,w_]:>sb[w,x] sb[y,z],-sb[x_,z_] sb[y_,w_]+sb[x_,y_] sb[z_,w_]:>-sb[w,x] sb[z,y],sb[w_,z_] sb[x_,y_]+sb[x_,z_] sb[y_,w_]:>sb[x,w] sb[y,z],sb[w_,z_] sb[x_,y_]+sb[x_,z_] sb[y_,w_]:>-sb[x,w] sb[z,y],sb[w_,z_] sb[x_,y_]+sb[x_,z_] sb[y_,w_]:>-sb[w,x] sb[y,z],sb[w_,z_] sb[x_,y_]+sb[x_,z_] sb[y_,w_]:>sb[w,x] sb[z,y],sb[x_,z_] sb[y_,w_]+sb[y_,x_] sb[z_,w_]:>sb[x,w] sb[y,z],sb[x_,z_] sb[y_,w_]+sb[y_,x_] sb[z_,w_]:>-sb[x,w] sb[z,y],sb[x_,z_] sb[y_,w_]+sb[y_,x_] sb[z_,w_]:>-sb[w,x] sb[y,z],sb[x_,z_] sb[y_,w_]+sb[y_,x_] sb[z_,w_]:>sb[w,x] sb[z,y],-sb[x_,z_] sb[y_,w_]+sb[w_,z_] sb[y_,x_]:>-sb[x,w] sb[y,z],-sb[x_,z_] sb[y_,w_]+sb[w_,z_] sb[y_,x_]:>sb[x,w] sb[z,y],-sb[x_,z_] sb[y_,w_]+sb[w_,z_] sb[y_,x_]:>sb[w,x] sb[y,z],-sb[x_,z_] sb[y_,w_]+sb[w_,z_] sb[y_,x_]:>-sb[w,x] sb[z,y],sb[w_,y_] sb[x_,z_]+sb[x_,y_] sb[z_,w_]:>-sb[x,w] sb[y,z],sb[w_,y_] sb[x_,z_]+sb[x_,y_] sb[z_,w_]:>sb[x,w] sb[z,y],sb[w_,y_] sb[x_,z_]+sb[x_,y_] sb[z_,w_]:>sb[w,x] sb[y,z],sb[w_,y_] sb[x_,z_]+sb[x_,y_] sb[z_,w_]:>-sb[w,x] sb[z,y],-sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[x_,z_]:>-sb[x,w] sb[y,z],-sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[x_,z_]:>sb[x,w] sb[z,y],-sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[x_,z_]:>sb[w,x] sb[y,z],-sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[x_,z_]:>-sb[w,x] sb[z,y],sb[w_,y_] sb[x_,z_]-sb[y_,x_] sb[z_,w_]:>-sb[x,w] sb[y,z],sb[w_,y_] sb[x_,z_]-sb[y_,x_] sb[z_,w_]:>sb[x,w] sb[z,y],sb[w_,y_] sb[x_,z_]-sb[y_,x_] sb[z_,w_]:>sb[w,x] sb[y,z],sb[w_,y_] sb[x_,z_]-sb[y_,x_] sb[z_,w_]:>-sb[w,x] sb[z,y],sb[w_,y_] sb[x_,z_]+sb[w_,z_] sb[y_,x_]:>-sb[x,w] sb[y,z],sb[w_,y_] sb[x_,z_]+sb[w_,z_] sb[y_,x_]:>sb[x,w] sb[z,y],sb[w_,y_] sb[x_,z_]+sb[w_,z_] sb[y_,x_]:>sb[w,x] sb[y,z],sb[w_,y_] sb[x_,z_]+sb[w_,z_] sb[y_,x_]:>-sb[w,x] sb[z,y],sb[x_,y_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[y,z],sb[x_,y_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[z,y],sb[x_,y_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[y,z],sb[x_,y_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[z,y],-sb[w_,z_] sb[x_,y_]+sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[y,z],-sb[w_,z_] sb[x_,y_]+sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[z,y],-sb[w_,z_] sb[x_,y_]+sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[y,z],-sb[w_,z_] sb[x_,y_]+sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[z,y],-sb[y_,x_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[y,z],-sb[y_,x_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[z,y],-sb[y_,x_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[y,z],-sb[y_,x_] sb[z_,w_]+sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[z,y],sb[w_,z_] sb[y_,x_]+sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[y,z],sb[w_,z_] sb[y_,x_]+sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[z,y],sb[w_,z_] sb[y_,x_]+sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[y,z],sb[w_,z_] sb[y_,x_]+sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[z,y],sb[x_,y_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[y,z],sb[x_,y_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[z,y],sb[x_,y_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[y,z],sb[x_,y_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[z,y],sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[y,z],sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[z,y],sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[y,z],sb[w_,z_] sb[x_,y_]+sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[z,y],sb[y_,x_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[y,z],sb[y_,x_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[z,y],sb[y_,x_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[y,z],sb[y_,x_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[z,y],sb[w_,z_] sb[y_,x_]-sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[y,z],sb[w_,z_] sb[y_,x_]-sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[z,y],sb[w_,z_] sb[y_,x_]-sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[y,z],sb[w_,z_] sb[y_,x_]-sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[z,y],sb[x_,z_] sb[y_,w_]-sb[x_,y_] sb[z_,w_]:>sb[x,w] sb[y,z],sb[x_,z_] sb[y_,w_]-sb[x_,y_] sb[z_,w_]:>-sb[x,w] sb[z,y],sb[x_,z_] sb[y_,w_]-sb[x_,y_] sb[z_,w_]:>-sb[w,x] sb[y,z],sb[x_,z_] sb[y_,w_]-sb[x_,y_] sb[z_,w_]:>sb[w,x] sb[z,y],-sb[w_,z_] sb[x_,y_]-sb[x_,z_] sb[y_,w_]:>-sb[x,w] sb[y,z],-sb[w_,z_] sb[x_,y_]-sb[x_,z_] sb[y_,w_]:>sb[x,w] sb[z,y],-sb[w_,z_] sb[x_,y_]-sb[x_,z_] sb[y_,w_]:>sb[w,x] sb[y,z],-sb[w_,z_] sb[x_,y_]-sb[x_,z_] sb[y_,w_]:>-sb[w,x] sb[z,y],-sb[x_,z_] sb[y_,w_]-sb[y_,x_] sb[z_,w_]:>-sb[x,w] sb[y,z],-sb[x_,z_] sb[y_,w_]-sb[y_,x_] sb[z_,w_]:>sb[x,w] sb[z,y],-sb[x_,z_] sb[y_,w_]-sb[y_,x_] sb[z_,w_]:>sb[w,x] sb[y,z],-sb[x_,z_] sb[y_,w_]-sb[y_,x_] sb[z_,w_]:>-sb[w,x] sb[z,y],sb[x_,z_] sb[y_,w_]-sb[w_,z_] sb[y_,x_]:>sb[x,w] sb[y,z],sb[x_,z_] sb[y_,w_]-sb[w_,z_] sb[y_,x_]:>-sb[x,w] sb[z,y],sb[x_,z_] sb[y_,w_]-sb[w_,z_] sb[y_,x_]:>-sb[w,x] sb[y,z],sb[x_,z_] sb[y_,w_]-sb[w_,z_] sb[y_,x_]:>sb[w,x] sb[z,y],-sb[w_,y_] sb[x_,z_]-sb[x_,y_] sb[z_,w_]:>sb[x,w] sb[y,z],-sb[w_,y_] sb[x_,z_]-sb[x_,y_] sb[z_,w_]:>-sb[x,w] sb[z,y],-sb[w_,y_] sb[x_,z_]-sb[x_,y_] sb[z_,w_]:>-sb[w,x] sb[y,z],-sb[w_,y_] sb[x_,z_]-sb[x_,y_] sb[z_,w_]:>sb[w,x] sb[z,y],sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[x_,z_]:>sb[x,w] sb[y,z],sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[x_,z_]:>-sb[x,w] sb[z,y],sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[x_,z_]:>-sb[w,x] sb[y,z],sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[x_,z_]:>sb[w,x] sb[z,y],-sb[w_,y_] sb[x_,z_]+sb[y_,x_] sb[z_,w_]:>sb[x,w] sb[y,z],-sb[w_,y_] sb[x_,z_]+sb[y_,x_] sb[z_,w_]:>-sb[x,w] sb[z,y],-sb[w_,y_] sb[x_,z_]+sb[y_,x_] sb[z_,w_]:>-sb[w,x] sb[y,z],-sb[w_,y_] sb[x_,z_]+sb[y_,x_] sb[z_,w_]:>sb[w,x] sb[z,y],-sb[w_,y_] sb[x_,z_]-sb[w_,z_] sb[y_,x_]:>sb[x,w] sb[y,z],-sb[w_,y_] sb[x_,z_]-sb[w_,z_] sb[y_,x_]:>-sb[x,w] sb[z,y],-sb[w_,y_] sb[x_,z_]-sb[w_,z_] sb[y_,x_]:>-sb[w,x] sb[y,z],-sb[w_,y_] sb[x_,z_]-sb[w_,z_] sb[y_,x_]:>sb[w,x] sb[z,y],-sb[x_,y_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[y,z],-sb[x_,y_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[z,y],-sb[x_,y_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[y,z],-sb[x_,y_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[z,y],sb[w_,z_] sb[x_,y_]-sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[y,z],sb[w_,z_] sb[x_,y_]-sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[z,y],sb[w_,z_] sb[x_,y_]-sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[y,z],sb[w_,z_] sb[x_,y_]-sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[z,y],sb[y_,x_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[y,z],sb[y_,x_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[z,y],sb[y_,x_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[y,z],sb[y_,x_] sb[z_,w_]-sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[z,y],-sb[w_,z_] sb[y_,x_]-sb[y_,w_] sb[z_,x_]:>sb[x,w] sb[y,z],-sb[w_,z_] sb[y_,x_]-sb[y_,w_] sb[z_,x_]:>-sb[x,w] sb[z,y],-sb[w_,z_] sb[y_,x_]-sb[y_,w_] sb[z_,x_]:>-sb[w,x] sb[y,z],-sb[w_,z_] sb[y_,x_]-sb[y_,w_] sb[z_,x_]:>sb[w,x] sb[z,y],-sb[x_,y_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[y,z],-sb[x_,y_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[z,y],-sb[x_,y_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[y,z],-sb[x_,y_] sb[z_,w_]+sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[z,y],-sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[y,z],-sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[z,y],-sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[y,z],-sb[w_,z_] sb[x_,y_]-sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[z,y],-sb[y_,x_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[y,z],-sb[y_,x_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[z,y],-sb[y_,x_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[y,z],-sb[y_,x_] sb[z_,w_]-sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[z,y],-sb[w_,z_] sb[y_,x_]+sb[w_,y_] sb[z_,x_]:>sb[x,w] sb[y,z],-sb[w_,z_] sb[y_,x_]+sb[w_,y_] sb[z_,x_]:>-sb[x,w] sb[z,y],-sb[w_,z_] sb[y_,x_]+sb[w_,y_] sb[z_,x_]:>-sb[w,x] sb[y,z],-sb[w_,z_] sb[y_,x_]+sb[w_,y_] sb[z_,x_]:>sb[w,x] sb[z,y]}])&,(#/.{ab[x_,y1_] sb[y1_,z_]+ab[x_,y2_] sb[y2_,z_]:>asb[x,p[y1,y2],z],ab[x_,y1_] sb[y1_,z_]-ab[x_,y2_] sb[z_,y2_]:>asb[x,p[y1,y2],z],ab[x_,y2_] sb[y2_,z_]-ab[x_,y1_] sb[z_,y1_]:>asb[x,p[y1,y2],z],ab[x_,y1_] sb[z_,y1_]+ab[x_,y2_] sb[z_,y2_]:>-asb[x,p[y1,y2],z],ab[x_,y1_] sb[y1_,z_]-ab[y2_,x_] sb[y2_,z_]:>asb[x,p[y1,y2],z],ab[x_,y1_] sb[y1_,z_]+ab[y2_,x_] sb[z_,y2_]:>asb[x,p[y1,y2],z],ab[y2_,x_] sb[y2_,z_]+ab[x_,y1_] sb[z_,y1_]:>-asb[x,p[y1,y2],z],-ab[x_,y1_] sb[z_,y1_]+ab[y2_,x_] sb[z_,y2_]:>asb[x,p[y1,y2],z],-ab[y1_,x_] sb[y1_,z_]+ab[x_,y2_] sb[y2_,z_]:>asb[x,p[y1,y2],z],ab[y1_,x_] sb[y1_,z_]+ab[x_,y2_] sb[z_,y2_]:>-asb[x,p[y1,y2],z],ab[x_,y2_] sb[y2_,z_]+ab[y1_,x_] sb[z_,y1_]:>asb[x,p[y1,y2],z],ab[y1_,x_] sb[z_,y1_]-ab[x_,y2_] sb[z_,y2_]:>asb[x,p[y1,y2],z],ab[y1_,x_] sb[y1_,z_]+ab[y2_,x_] sb[y2_,z_]:>-asb[x,p[y1,y2],z],-ab[y1_,x_] sb[y1_,z_]+ab[y2_,x_] sb[z_,y2_]:>asb[x,p[y1,y2],z],-ab[y2_,x_] sb[y2_,z_]+ab[y1_,x_] sb[z_,y1_]:>asb[x,p[y1,y2],z],ab[y1_,x_] sb[z_,y1_]+ab[y2_,x_] sb[z_,y2_]:>asb[x,p[y1,y2],z],-ab[x_,y1_] sb[y1_,z_]-ab[x_,y2_] sb[y2_,z_]:>-asb[x,p[y1,y2],z],-ab[x_,y1_] sb[y1_,z_]+ab[x_,y2_] sb[z_,y2_]:>-asb[x,p[y1,y2],z],-ab[x_,y2_] sb[y2_,z_]+ab[x_,y1_] sb[z_,y1_]:>-asb[x,p[y1,y2],z],-ab[x_,y1_] sb[z_,y1_]-ab[x_,y2_] sb[z_,y2_]:>asb[x,p[y1,y2],z],-ab[x_,y1_] sb[y1_,z_]+ab[y2_,x_] sb[y2_,z_]:>-asb[x,p[y1,y2],z],-ab[x_,y1_] sb[y1_,z_]-ab[y2_,x_] sb[z_,y2_]:>-asb[x,p[y1,y2],z],-ab[y2_,x_] sb[y2_,z_]-ab[x_,y1_] sb[z_,y1_]:>asb[x,p[y1,y2],z],ab[x_,y1_] sb[z_,y1_]-ab[y2_,x_] sb[z_,y2_]:>-asb[x,p[y1,y2],z],ab[y1_,x_] sb[y1_,z_]-ab[x_,y2_] sb[y2_,z_]:>-asb[x,p[y1,y2],z],-ab[y1_,x_] sb[y1_,z_]-ab[x_,y2_] sb[z_,y2_]:>asb[x,p[y1,y2],z],-ab[x_,y2_] sb[y2_,z_]-ab[y1_,x_] sb[z_,y1_]:>-asb[x,p[y1,y2],z],-ab[y1_,x_] sb[z_,y1_]+ab[x_,y2_] sb[z_,y2_]:>-asb[x,p[y1,y2],z],-ab[y1_,x_] sb[y1_,z_]-ab[y2_,x_] sb[y2_,z_]:>asb[x,p[y1,y2],z],ab[y1_,x_] sb[y1_,z_]-ab[y2_,x_] sb[z_,y2_]:>-asb[x,p[y1,y2],z],ab[y2_,x_] sb[y2_,z_]-ab[y1_,x_] sb[z_,y1_]:>-asb[x,p[y1,y2],z],-ab[y1_,x_] sb[z_,y1_]-ab[y2_,x_] sb[z_,y2_]:>-asb[x,p[y1,y2],z]})&,(#/.{asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[x_,y1_,y2__] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[x_,y1_,y2__] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[x_,y2__,y1_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[x_,y2__,y1_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y1_,x_,y2__] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y1_,x_,y2__] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y1_,y2__,x_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y1_,y2__,x_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y2__,x_,y1_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y2__,x_,y1_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y2__,y1_,x_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y2__,y1_,x_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[x_,y1_,y2__] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[x_,y1_,y2__] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[x_,y2__,y1_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[x_,y2__,y1_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y1_,x_,y2__] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y1_,x_,y2__] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y1_,y2__,x_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y1_,y2__,x_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y2__,x_,y1_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y2__,x_,y1_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y2__,y1_,x_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y2__,y1_,x_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[x_,y1_,y2__] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[x_,y1_,y2__] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[x_,y2__,y1_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[x_,y2__,y1_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y1_,x_,y2__] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y1_,x_,y2__] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y1_,y2__,x_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y1_,y2__,x_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y2__,x_,y1_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y2__,x_,y1_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y2__,y1_,x_] sb[z_,w_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y2__,y1_,x_] sb[z_,w_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[x_,y1_,y2__] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[x_,y1_,y2__] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[x_,y2__,y1_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[x_,y2__,y1_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y1_,x_,y2__] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y1_,x_,y2__] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y1_,y2__,x_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y1_,y2__,x_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y2__,x_,y1_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y2__,x_,y1_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y2__,y1_,x_] sb[w_,z_]:>-asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y2__,y1_,x_] sb[w_,z_]:>-asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[x_,y1_,y2__] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[x_,y1_,y2__] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[x_,y2__,y1_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[x_,y2__,y1_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y1_,x_,y2__] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y1_,x_,y2__] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y1_,y2__,x_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y1_,y2__,x_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y2__,x_,y1_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y2__,x_,y1_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[x_,z_] s[y2__,y1_,x_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[x_,z_] s[y2__,y1_,x_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[x_,y1_,y2__] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[x_,y1_,y2__] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[x_,y2__,y1_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[x_,y2__,y1_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y1_,x_,y2__] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y1_,x_,y2__] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y1_,y2__,x_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y1_,y2__,x_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y2__,x_,y1_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y2__,x_,y1_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[x_,z_] s[y2__,y1_,x_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[x_,z_] s[y2__,y1_,x_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[x_,y1_,y2__] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[x_,y1_,y2__] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[x_,y2__,y1_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[x_,y2__,y1_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y1_,x_,y2__] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y1_,x_,y2__] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y1_,y2__,x_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y1_,y2__,x_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y2__,x_,y1_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y2__,x_,y1_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]+ab[z_,x_] s[y2__,y1_,x_] sb[z_,w_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]+ab[z_,x_] s[y2__,y1_,x_] sb[z_,w_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[x_,y1_,y2__] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[x_,y1_,y2__] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[x_,y2__,y1_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[x_,y2__,y1_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y1_,x_,y2__] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y1_,x_,y2__] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y1_,y2__,x_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y1_,y2__,x_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y2__,x_,y1_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y2__,x_,y1_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w],-asb[x_,p[y1_,y2__],w_] s[z_,w_]-ab[z_,x_] s[y2__,y1_,x_] sb[w_,z_]:>asb[x,p[y1,y2],p[x,y1,y2,w],p[z],w],-asb[x_,p[y2__,y1_],w_] s[z_,w_]-ab[z_,x_] s[y2__,y1_,x_] sb[w_,z_]:>asb[x,p[y2,y1],p[x,y1,y2,w],p[z],w]})&,(#//.{asb[x_,p[y1__],z_]+ab[x_,y2_] sb[y2_,x_]:>asb[x,p[y1,y2],z],asb[x_,p[y1__],z_]+ab[x_,y2_] sb[y2_,x_]:>asb[x,p[y2,y1],z],asb[x_,p[y1__],z_]-ab[x_,y2_] sb[x_,y2_]:>asb[x,p[y1,y2],z],asb[x_,p[y1__],z_]-ab[x_,y2_] sb[x_,y2_]:>asb[x,p[y2,y1],z],asb[x_,p[y1__],z_]-ab[y2_,x_] sb[y2_,x_]:>asb[x,p[y1,y2],z],asb[x_,p[y1__],z_]-ab[y2_,x_] sb[y2_,x_]:>asb[x,p[y2,y1],z],asb[x_,p[y1__],z_]+ab[y2_,x_] sb[x_,y2_]:>asb[x,p[y1,y2],z],asb[x_,p[y1__],z_]+ab[y2_,x_] sb[x_,y2_]:>asb[x,p[y2,y1],z],-asb[x_,p[y1__],z_]-ab[x_,y2_] sb[y2_,x_]:>-asb[x,p[y1,y2],z],-asb[x_,p[y1__],z_]-ab[x_,y2_] sb[y2_,x_]:>-asb[x,p[y2,y1],z],-asb[x_,p[y1__],z_]+ab[x_,y2_] sb[x_,y2_]:>-asb[x,p[y1,y2],z],-asb[x_,p[y1__],z_]+ab[x_,y2_] sb[x_,y2_]:>-asb[x,p[y2,y1],z],-asb[x_,p[y1__],z_]+ab[y2_,x_] sb[y2_,x_]:>-asb[x,p[y1,y2],z],-asb[x_,p[y1__],z_]+ab[y2_,x_] sb[y2_,x_]:>-asb[x,p[y2,y1],z],-asb[x_,p[y1__],z_]-ab[y2_,x_] sb[x_,y2_]:>-asb[x,p[y1,y2],z],-asb[x_,p[y1__],z_]-ab[y2_,x_] sb[x_,y2_]:>-asb[x,p[y2,y1],z]})&,(#//.{asb[x_,p[y__],z_]ab[z_,w_]:>ab[x,p[y],p[z],w],asb[x_,p[y__],z_]ab[w_,z_]:>-ab[x,p[y],p[z],w]})&,(#//.{ab[x___,p[y1__],z___]+ab[x__,p[y2__],z__]:>ab[x,p[y1,y2],z],-ab[x___,p[y1__],z___]-ab[x__,p[y2__],z__]:>-ab[x,p[y1,y2],z],asb[x___,p[y1__],z___]+asb[x__,p[y2__],z__]:>asb[x,p[y1,y2],z],asb[x___,p[y1__],z__]+ab[x__,y2_] sb[y2_,z__]:>asb[x,p[y1,y2],z],asb[x___,p[y1__],z__]+ab[x__,y2_] sb[y2_,z__]:>asb[x,p[y1,y2],z],sb[x___,p[y1__],z___]+sb[x__,p[y2__],z__]:>sb[x,p[y1,y2],z]}&),(#/.{sb[x_,y1_]ab[y1_,z_]+asb[z_,p[y2__],x_]:>asb[z,p[y1,y2],x]})&,(#/.{ab[x_,z_] asb[y_,q___]-ab[x_,y_] asb[z_,q___]:>ab[y,z] asb[x,q],ab[x_,z_] asb[y_,q___]+ab[y_,x_] asb[z_,q___]:>ab[y,z] asb[x,q],-ab[z_,x_] asb[y_,q___]-ab[x_,y_] asb[z_,q___]:>ab[y,z] asb[x,q],-ab[z_,x_] asb[y_,q___]+ab[y_,x_] asb[z_,q___]:>ab[y,z] asb[x,q],-ab[x_,z_] asb[y_,q___]+ab[x_,y_] asb[z_,q___]:>-ab[y,z] asb[x,q],-ab[x_,z_] asb[y_,q___]-ab[y_,x_] asb[z_,q___]:>-ab[y,z] asb[x,q],ab[z_,x_] asb[y_,q___]+ab[x_,y_] asb[z_,q___]:>-ab[y,z] asb[x,q],ab[z_,x_] asb[y_,q___]-ab[y_,x_] asb[z_,q___]:>-ab[y,z] asb[x,q]})&];


(* ::Subsection:: *)
(*Analytic Expressions Involving Momentum-Twistor Variables*)


treeTools`functionTypes["D",5]="Analytic Expressions of Momentum Twistors";
treeTools`functionNames["D",5]={"R[twistorLabels__]","ab[a_,b_,c_,d_]","cap[{line__},{plane__}]","","toSuperTwistorFunctions[n_:,gaugeFixQ_:True][rProducts_]","simplifyTwistorBrackets[exprn_]","expandTwistorBrackets[exprn_]"};


toSuperTwistorFunctions[inputN_Integer:0,gaugeFixQ_:False,flippedQ_:False][exprn_]:=Module[{n=If[inputN>0,inputN,Max[Join[Range[5],Cases[Cases[exprn,R[x___]:>{x},{0,\[Infinity]}],q_Integer,{0,\[Infinity]}]]]],ephDelta,ephR,out},Unprotect[R];ClearAll[R];R[x__]:=R[x]=Signature[Ordering[{x}]]ephR@@Sort[{x}];out=exprn;ClearAll[R];Protect[R];ephDelta[x___,cap[y_,z_,q___],w___]:=ephDelta[x,cap[y,z],w]=Block[{fullRange=Join[y,z]},Total[(ephDelta[x,fullRange[[#1]],w] ab@@RotateLeft[Partition[fullRange,4,1,1]][[#1]]&)/@Range[Length[y]]]/.ab[r1___,s_,r2___,s_,r3___]:>0/.ab[r___]:>(Signature[{r}]If[TrueQ[gaugeFixQ],simplifyTwistorBrackets[ab@@Sort[{r}]],ab@@Sort[{r}]])];ephDelta[x___,y_,z___,y_,w___]:=0;ephDelta[x___Integer]:=ephDelta[x]={Normal[SparseArray[Thread[Rule[{x},ab@@@Partition[RotateLeft[{x}],4,1,1]]],n]]};ephR[x__]:=ephR[x]=If[TrueQ[gaugeFixQ],Block[{factors=FactorList[Signature[Ordering[{x}]]Times@@simplifyTwistorBrackets[ab@@@Partition[Sort[{x}],4,1,1]]],gf},gf=Times@@Power@@@(Function[{r,y},{r,Sign[y]Floor[(Abs[y]+1)/4]}]@@@Select[factors,Abs[#[[2]]]>1&]);superFunction[If[TrueQ[flippedQ],#,1/#]&@(Times@@(Power@@@factors)Power[gf,-4]),1/gf ephDelta[x]]],superFunction[If[TrueQ[flippedQ],#,1/#]&@(Times@@(ab@@@Partition[{x},4,1,1])), ephDelta[x]]];out=out//.superFunctionProductRule;out];

simplifyTwistorBrackets[exprn0_]:=Block[{exprn},(Unprotect[ab];ClearAll[ab,treeTools`abE];exprn=ReleaseHold[exprn0];ab[x__]/;Length[{x}]==4:=ab[x]=treeTools`simplifiedAB[x];exprn=exprn;ClearAll[ab];treeTools`abE=ab;exprn=exprn;ClearAll[ab,treeTools`abE];Protect[ab];exprn)];SetAttributes[simplifyTwistorBrackets,HoldFirst];

expandTwistorBrackets[exprn_]:=(exprn//.{ab[x___,cap[{y1_,y2_},{z___}],w___]:>ab[x,y1,w]ab[y2,z]+ab[x,y2,w]ab[z,y1],ab[x___,cap[{y1_,y2_,y3_},{z___}],w___]:>If[Length[{z}]==2,ab[x,y1,w]ab[y2,y3,z]+ab[x,y2,w]ab[y3,z,y1]+ab[x,y3,w]ab[z,y1,y2],ab[x,y1,y2,w]ab[y3,z]+ab[x,y2,y3,w]ab[y1,z]+ab[x,y3,y1,w]ab[y2,z]]}//.ab[x___Integer,y_Integer,z___Integer,y_Integer,w___Integer]:>0);


treeTools`simplifiedAB[zList__]/;Length[{zList}]==4:=treeTools`simplifiedAB[zList]=(((treeTools`abE[zList]//.{treeTools`abE[x___Integer,cap[{a__Integer},{b__Integer}],y___Integer]:>Which[Length[Intersection[{a},{x,y}]]==1,Power[-1,Flatten[Position[{a},Intersection[{a},{x,y}][[1]],1]][[1]]]treeTools`abE[x,Complement[{a},{x,y}][[1]],y]treeTools`abE[Intersection[{a},{x,y}][[1]],b],Length[Intersection[{b},{x,y}]]==2,Signature[Select[{b},MemberQ[{x,y},#]&]](*Signature[Select[{x,y},MemberQ[{b},#]&]]*)Power[-1,Flatten[Position[{b},Complement[{b},{x,y}][[1]],1]][[1]]]treeTools`abE[x,Complement[{b},{x,y}][[1]],y]treeTools`abE[a,Sequence@@(Intersection[{b},{x,y}])],True,treeTools`abE[x,cap[{a},{b}],y]],treeTools`abE[args__]:>Block[{bracket=List[args]},Block[{caps=Position[bracket,cap[{x__},{y__}],{0,\[Infinity]}],capPairs,out,simplify},caps={{##},DeleteCases[bracket[[Sequence@@({##}[[1;;-2]])]],bracket[[##]]],List@@bracket[[##]]}&@@@(caps);capPairs=Select[Join@@(Function[{len},Select[caps,Length[#[[2]]]==len&]]/@Range[3]),Length[#[[1]]]>=1&];out=Catch[(simplify=Select[capPairs,Length[Intersection[#[[3,1]],#[[2]]]]>0&,1];If[Length[simplify]==1,(simplify=simplify[[1]];Block[{shared=Intersection[simplify[[3,1]],simplify[[2]]]},Throw[Power[-1,Flatten[Position[simplify[[3,1]],shared[[1]],1]][[1]]]treeTools`abE[shared[[1]],Sequence@@simplify[[3,2]]]treeTools`abE@@ReplacePart[bracket,simplify[[1]]->Complement[simplify[[3,1]],simplify[[2]]][[1]]]]])];simplify=Select[capPairs,Length[Intersection[#[[3,2]],#[[2]]]]==2&,1];If[Length[simplify]==1,(simplify=simplify[[1]];Block[{distinct=Complement[simplify[[3,2]],simplify[[2]]][[1]]},Throw[Power[-1,Flatten[Position[simplify[[3,2]],distinct,1]][[1]]-0Flatten[Position[simplify[[3,2]],Complement[simplify[[3,2]],simplify[[2]]][[1]],1]][[1]]](*Signature[Select[simplify[[3,2]],Not[MemberQ[{distinct},#]]&]]*)treeTools`abE[Sequence@@(simplify[[3,1]]),Sequence@@(Select[simplify[[3,2]],Not[MemberQ[{distinct},#]]&])]treeTools`abE@@ReplacePart[bracket,simplify[[1]]->(Complement[simplify[[3,2]],simplify[[2]]][[1]])]]])];simplify=Select[capPairs,Count[#[[3,2]],cap[__],{0,\[Infinity]}]==1&&Count[#[[2]],cap[__],{0,\[Infinity]}]==0&&Length[#[[2]]]==3&,1];If[Length[simplify]==1,(simplify=simplify[[1]];Block[{rest=Flatten[Position[bracket,#,{Length[simplify[[1]]]},1]]&/@simplify[[2]]},Throw[-treeTools`abE@@ReplacePart[bracket,{simplify[[1]]->cap[simplify[[3,1]],simplify[[2]]],rest[[1]]->simplify[[3,2,1]],rest[[2]]->simplify[[3,2,2]],rest[[3]]->simplify[[3,2,3]]}]]];)];treeTools`abE@@bracket)];out]]}//.{treeTools`abE[x___,cap[{a__},{b__}],y___]:>Which[Length[Intersection[{a},{x,y}]]==1,Power[-1,Flatten[Position[{a},Intersection[{a},{x,y}][[1]],1]][[1]]]treeTools`abE[x,Complement[{a},{x,y}][[1]],y]treeTools`abE[Intersection[{a},{x,y}][[1]],b],Length[Intersection[{b},{x,y}]]==2,Power[-1,Flatten[Position[{b},Complement[{b},{x,y}][[1]],1]][[1]]-1]treeTools`abE[x,Complement[{b},{x,y}][[1]],y]treeTools`abE[a,Sequence@@(Intersection[{b},{x,y}])],True,treeTools`abE[x,cap[{a},{b}],y]]}//.{treeTools`abE[x1___,cap[{a1__},{b1__}],x2___,cap[{a2__},{b2__}],x3___]:>Which[Length[Intersection[{b1},{a2}]]==2&&Length[Intersection[{a1},{b2}]]==2,-Power[-1,Length[{x2}]+0Flatten[Position[Sort@{b2},Complement[{b2},{a1}][[1]],1]][[1]]+0Flatten[Position[Sort@{b1},Complement[{b1},{a2}][[1]],1]][[1]]]Signature[Ordering[{a2}]]Signature[Ordering[{a1}]]Signature[Ordering[{b1}]]Signature[Ordering[{b2}]]treeTools`abE[Sequence@@Sort[{a1}],Sequence@@Sort[{a2}]]treeTools`abE[Sequence@@Sort[{b2}],cap[{x1,x2,x3},Sort@{b1}]],True,treeTools`abE[x1,cap[{a1},{b1}],x2,cap[{a2},{b2}],x3]]})/.treeTools`abE[x___]:>Signature[Ordering[{x}]]treeTools`abE@@Sort[{x}]));


(* ::Subsection:: *)
(*Transformations from Twistors to Spinors*)


treeTools`functionTypes["D",6]="Translations From Twistors to Spinor Variables";
treeTools`functionNames["D",6]={"fromTwistorsToSpinors[exprn_]","toSuperSpinorFunctions[n_:,gaugeFixQ_:][rProducts_]"};


(* ::Subsubsection:: *)
(*Translations from Twistor Expressions to Spinor Variables and superFunctions*)


fromTwistorsToSpinors[exprn_]/;Not[Head[exprn]===Integer]:=If[Count[exprn,superFunction[__],{0,\[Infinity]}]>0,Module[{upliftMatrix,n=Cases[exprn,superFunction[fcn_,cMat_]:>Length[First[cMat]],{0,\[Infinity]}][[1]]},upliftMatrix=Array[If[#1>#2>1,ab[#2,#1],0]&,{n,n}];((((exprn//.superFunctionProductRule)/.superFunction[fcn_,cMatrix_]:>superFunction[fcn/Times@@ab@@@Partition[Range[n],2,1,1],cMatrix . upliftMatrix]))/.{ab[x_,y_,z_,w_]:>treeTools`spinorFourBracket[n][x,y,z,w]})],Module[{n=Max[Prepend[Cases[Flatten[Join[Cases[exprn,ab[x__]:>{x},{0,\[Infinity]}],Cases[exprn,asb[x__]:>{x},{0,\[Infinity]}],Cases[exprn,sab[x__]:>{x},{0,\[Infinity]}],Cases[exprn,p[x__]:>{x},{0,\[Infinity]}],Cases[exprn,s[x__]:>{x},{0,\[Infinity]}],Cases[exprn,sb[x__]:>{x},{0,\[Infinity]}]]],q_Integer,{0,\[Infinity]}],4]]},(exprn/.ab[x_,y_,z_,w_]:>treeTools`spinorFourBracket[n][x,y,z,w])]];

toSuperSpinorFunctions[inputN_Integer:0,gaugeFixQ_:True][exprn_]:=Block[{n=If[inputN>0,inputN,Max[Join[Range[5],Cases[Cases[exprn,R[x___]:>{x},{0,\[Infinity]}],q_Integer,{0,\[Infinity]}]]]],ephDelta,out,abZsE,abZsTemp,ephR},Unprotect[R];ClearAll[R];R[x__]:=R[x]=Signature[Ordering[Replace[{x},cap[q_,r_]:>cap@@Sort/@{q,r},{0,\[Infinity]}]]](ephR@@Sort[Replace[{x},cap[q_,r_]:>cap@@Sort/@{q,r},{0,\[Infinity]}]]);out=exprn;ClearAll[R];Protect[R];ephDelta[x___,cap[y_,z_,q___],w___]:=ephDelta[x,cap[y,z],w]=Block[{fullRange=Join[y,z]},Total[(ephDelta[x,fullRange[[#1]],w] abZsE@@RotateLeft[Partition[fullRange,4,1,1]][[#1]]&)/@Range[Length[y]]]/.abZsE[r1___,s_,r2___,s_,r3___]:>0/.abZsE[r___]:>Signature[Ordering[{r}]]If[True,canonicalizeSpinors[n][(simplifyTwistorBrackets[ab@@Sort[{r}]]/.ab->abZsTemp)],abZsTemp@@Sort[{r}]]];ephDelta[x___,y_,z___,y_,w___]:=0;ephDelta[x___Integer]:=ephDelta[x]=treeTools`bareEtaCoeffs[n][{x}];abZsTemp[x__]:=abZsTemp[x]=treeTools`spinorFourBracket[n][{x}];ephR[x__]:=ephR[x]=If[TrueQ[gaugeFixQ],Block[{factors=FactorList[Signature[Ordering[{x}]]canonicalizeSpinors[n][Times@@(simplifyTwistorBrackets[ab@@@Partition[Sort[{x}],4,1,1]]/.ab->abZsTemp)]],gf},gf=Times@@Power@@@(Function[{r,y},{r,Sign[y]Floor[(Abs[y]+1)/4]}]@@@Select[factors,Abs[#[[2]]]>1&]);superFunction[1/Times@@(Power@@@factors)Power[gf,4],1/gf ephDelta[x]]],superFunction[Signature[Ordering[{x}]]1/Times@@(simplifyTwistorBrackets[ab@@@Partition[Sort[{x}],4,1,1]]/.ab->abZsTemp), ephDelta[x]]];out=canonicalizeSpinors[n][out//.superFunctionProductRule/.superFunction[fcn_,mat_]:>superFunction[fcn/Times@@ab@@@Partition[Range[n],2,1,1],mat]];out];


(* ::Subsection:: *)
(*Internal: spinor four-brackets and spinor 'five-brackets' *)


treeTools`setupSpinorFourBrackets[n_Integer]/;n>3:=Block[{ab,sq,p,asb,sab},Block[{pairs=({1,#}&/@Range[3,Floor[n/2]+1]),binary=Join[{1,2},#+{0,1}]&/@Subsets[Range[4,n-2],{2}],triples={1,2,3,#}&/@Range[5,n-1],general=(Prepend[#+{1,2,3},1]&/@Subsets[Range[2,n-4],{3}]),seeds,seeds1=Join@@(((Function[{pair},ab[1,2,3,cap[pair[[1]],Prepend[pair[[2]],#]]]&/@Complement[Range[1,pair[[2,2]]],Join@@pair]]/@Select[Tuples[Partition[Range[n],2,1,1][[4;;-2]],{2}],Length[Intersection@@#]==0&]))),seeds2=Join@@(((Function[{pair},ab[1,2,3,cap[pair[[1]],Append[pair[[2]],#]]]&/@Complement[Range[pair[[2,2]],n],Join@@pair]]/@Select[Tuples[Partition[Range[n],2,1,1][[4;;-2]],{2}],Length[Intersection@@#]==0&]))),seeds3=Join@@(((Function[{pair},ab[1,2,#1,cap[pair[[1]],Prepend[pair[[2]],#2]]]&@@@Tuples[{Complement[Range[3,n],pair[[1]]],Intersection[Complement[Range[3,n],pair[[1]]],Range[3,pair[[2,1]]-1]]}]]/@Select[Tuples[{Partition[Range[n],2,1,1][[3;;-2]],Partition[Range[n],2,1,1][[2;;-2]]}],Length[Intersection@@#]==0&]))),seeds4=Join@@(((Function[{pair},ab[1,2,#1,cap[pair[[1]],Append[pair[[2]],#2]]]&@@@Tuples[{Complement[Range[3,n],pair[[1]]],Intersection[Complement[Range[3,n],pair[[1]]],Range[pair[[2,2]]+1,n]]}]]/@Select[Tuples[{Partition[Range[n],2,1,1][[3;;-2]],Partition[Range[n],2,1,1][[2;;-2]]}],Length[Intersection@@#]==0&])))},seeds=(({ab@@Mod[{#1,#1+1,#2,#2+1},n,1],ab[#1,#1+1]ab[#2,#2+1]s@@(Range[#1+1,#2])}&@@@pairs)/.{s[x_,y_]:>ab[x,y]sb[x,y]});seeds=((Join[seeds,Transpose[{ab@@@binary,(-ab[#1,#2]ab[#3,p@@Range[#2,#3-1],p@@Range[#2,#4-1],#4]&@@@binary)}],Transpose[{ab@@@triples,(ab[#1,#2]ab[#2,#3]asb[#4,p@@Range[#3,#4-1],#2]&@@@triples)}],(Transpose[{ab@@@general,-(ab[#1,#2]ab[#3,p@@Range[#3-1],p@@Range[#4-1],#4]-ab[#1,#3]ab[#2,p@@Range[#2-1],p@@Range[#4-1],#4]+ab[#1,#4]ab[#2,p@@Range[#2-1],p@@Range[#3-1],#3]&@@@general)}])]/.{p[x___]:>If[Length[{x}]>Length[Complement[Range[n],{x}]],-p@@Reverse[Complement[Range[n],{x}]],If[Length[{x}]==Length[Complement[Range[n],{x}]],If[Min[{x}]<Min[Complement[Range[n],{x}]],p[x],-p@@Complement[Range[n],{x}]],p[x]]]})//.{ab[x___,-p[q___],r___]:>-ab[x,p[q],r],asb[x___,-p[q___],r___]:>-asb[x,p[q],r]}//.{ab[x_,p[q1___,x_,q2___],p[y___],z_]:>ab[x,p[q1,q2],p[y],z],asb[x_,p[q1___,x_,q2___],z_]:>asb[x,p[q1,q2],z],asb[x_,p[q1___,z_,q2___],z_]:>asb[x,p[q1,q2],z],ab[x_,p[y___],p[q1___,z_,q2___],z_]:>ab[x,p[y],p[q1,q2],z]}/.{ab[x_,p[y_],p[q___],r_]:>ab[x,y]asb[r,p[q],y]}/.{ab[x_,p[q___],p[t_],r_]:>ab[t,r]asb[x,p[q],t]}/.{sq[-p[x___]]:>s[x]}/.{sq[p[x__]]:>s[x]}//.{ab[x_,p[q1___,x_,q2___],p[y___],z_]:>ab[x,p[q1,q2],p[y],z],asb[x_,p[q1___,x_,q2___],z_]:>asb[x,p[q1,q2],z],asb[x_,p[q1___,z_,q2___],z_]:>asb[x,p[q1,q2],z],ab[x_,p[y___],p[q1___,z_,q2___],z_]:>ab[x,p[y],p[q1,q2],z]});seeds=Join[seeds,Transpose[{Join[seeds1,seeds2,seeds3,seeds4],canonicalizeSpinors[n][Join[(seeds1/.{ab[a1_,a2_,x_,cap[{b1_,b2_},{y_,c1_,c2_}]]:>ab[a1,a2]ab[b1,b2]ab[c1,c2]Signature[{a1,b2}]Signature[{b1,c2}]Signature[Ordering@{c2,y}]Signature[Ordering@{a2,x}]ab[x,p@@If[x<a1,Range[x,a1],Range[a2,x]],p@@If[a2<b1,Range[a2,b1],Range[b2,a1]],p@@If[b1<c1,Range[b2,c1],Range[c2,b1]],p@@If[c1<y-1,Range[c2,y],Range[y,c1]],y]}),(seeds2/.{ab[a1_,a2_,x_,cap[{b1_,b2_},{c1_,c2_,y_}]]:>ab[a1,a2]ab[b1,b2]ab[c1,c2]Signature[{a1,b2}]Signature[{b1,c2}]Signature[Ordering@{c2,y}]Signature[Ordering@{a2,x}]ab[x,p@@If[x<a1,Range[x,a1],Range[a2,x]],p@@If[a2<b1,Range[a2,b1],Range[b2,a1]],p@@If[b1<c1,Range[b2,c1],Range[c2,b1]],p@@If[c1<y-1,Range[c2,y],Range[y,c1]],y]}),(seeds3/.{ab[a1_,a2_,x_,cap[{b1_,b2_},{y_,c1_,c2_}]]:>ab[a1,a2]ab[b1,b2]ab[c1,c2]Signature[{a1,b2}]Signature[{b1,c2}]Signature[Ordering@{c2,y}]Signature[Ordering@{a2,x}]ab[x,p@@If[x<a1,Range[x,a1],Range[a2,x]],p@@If[a2<b1,Range[a2,b1],Range[b2,a1]],p@@If[b1<c1,Range[b2,c1],Range[c2,b1]],p@@If[c1<y-1,Range[c2,y],Range[y,c1]],y]}),(seeds4/.{ab[a1_,a2_,x_,cap[{b1_,b2_},{c1_,c2_,y_}]]:>ab[a1,a2]ab[b1,b2]ab[c1,c2]Signature[{a1,b2}]Signature[{b1,c2}]Signature[Ordering@{c2,y}]Signature[Ordering@{a2,x}]ab[x,p@@If[x<a1,Range[x,a1],Range[a2,x]],p@@If[a2<b1,Range[a2,b1],Range[b2,a1]],p@@If[b1<c1,Range[b2,c1],Range[c2,b1]],p@@If[c1<y-1,Range[c2,y],Range[y,c1]],y]})]]}]];Set[treeTools`spinorFourBracket[n][List@@#1],#2]&@@@seeds;]];

treeTools`spinorFourBracket[n_Integer][{args__}]/;Length[{args}]==4:=If[Length[DeleteDuplicates[{args}]]<Length[{args}],0,If[Not[{args}===Sort[(Replace[{args},{cap[y_,z_]:>cap@@(Sort/@{y,z})},{0,\[Infinity]}])]],(Times@@Cases[{args},cap[x_,y_]:>Times@@(Signature[Ordering[Replace[#,cap[q__]:>cap@@(Sort/@{q}),{0,\[Infinity]}]]]&/@{x,y}),{0,\[Infinity]}])Signature[Ordering[Replace[{args},{cap[y_,z_]:>cap@@(Sort/@{y,z})},{0,\[Infinity]}]]]treeTools`spinorFourBracket[n][Sort[Replace[{args},{cap[y_,z_]:>cap@@(Sort/@{y,z})},{0,\[Infinity]}]]],Block[{cyclicImages=((({args}/.(Thread[Rule[Range[n],#]]&/@Join[Partition[Range[n],n,1,1]]))))},If[Count[{args},cap[__],{0,\[Infinity]}]<2,If[Not[{args}===(Sort[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]&/@cyclicImages][[1]])],Signature[Ordering[Replace[(Sort[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]&/@cyclicImages][[1]]/.(Thread[Rule[Range[n],(Ordering/@Partition[Range[n],n,1,1])[[Ordering[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]&/@cyclicImages][[1]]]]]])),{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]](*Signature[Ordering[List@@permuteLegs[Ordering[Join[Partition[Range[n],n,1,1]][[Ordering[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})}]]&/@cyclicImages][[1]]]]]][ab@@(Sort[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})}]]&/@cyclicImages][[1]])]]]*)(Times@@Cases[((Sort[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]&/@cyclicImages][[1]])/.(Thread[Rule[Range[n],(Ordering/@Partition[Range[n],n,1,1])[[Ordering[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]&/@cyclicImages][[1]]]]]])),cap[x_,y_]:>Times@@(Signature[Ordering[Replace[#,cap[q__]:>cap@@(Sort/@{q}),{0,\[Infinity]}]]]&/@{x,y}),{0,\[Infinity]}])permuteLegs[Ordering[Join[Partition[Range[n],n,1,1]][[Ordering[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]&/@cyclicImages][[1]]]]]][treeTools`spinorFourBracket[n][(Sort[Sort[Replace[#,{cap[x__]:>cap@@(Sort/@{x})},{0,\[Infinity]}]]&/@cyclicImages][[1]])]],treeTools`setupSpinorFourBrackets[n];(Set[treeTools`spinorFourBracket[n][{args}],(expandTwistorBrackets[ab[args]]/.{ab[x___]:>treeTools`spinorFourBracket[n][{x}]})])],(Set[treeTools`spinorFourBracket[n][{args}],(expandTwistorBrackets[ab[args]]/.{ab[x___]:>treeTools`spinorFourBracket[n][{x}]})])]]]];
treeTools`spinorFourBracket[n_Integer][args__]/;Length[{args}]==4:=treeTools`spinorFourBracket[n][{args}];

treeTools`setupSpinorFiveBrackets[n_Integer]/;n>=5:=Block[{seedGroups=Function[{diffs},Total[diffs[[1;;#-1]]]+1&/@Range[5]]/@#&/@Append[(Append[#,n-Total[#]]&/@#&/@List[{{1,1,1,1}},{1,1,1,#}&/@Range[2,n-5],{1,1,#,1}&/@Range[2,n-5],{1,1,##}&@@@Select[Tuples[Range[2,n-6],{2}],Total[#]<=n-4&],{1,#1,1,#2}&@@@Select[Tuples[Range[2,n-6],{2}],Total[#]<=n-4&&OrderedQ[#]&],Join@@Table[{1,j,k,1},{j,2,n-7},{k,2,n-3-2j}],{1,##}&@@@Select[Tuples[Range[2,n-7],{3}],Total[#]<=n-3&]]),Select[Join@@(Function[{seed},Prepend[#,seed[[1]]]&/@Permutations[seed[[2;;-1]]]]/@(Reverse/@IntegerPartitions[n,{5},Range[2,n-8]])),Ordering[Partition[#,5,1,1]][[1]]==1&]],seedData},seedData=Transpose[{Join@@seedGroups,(canonicalizeSpinors[n][Join[{superFunction[ab[1,2]ab[2,3]ab[3,4]ab[4,5]/(sb[2,3]sb[3,4]asb[1,p[2,3],4]asb[5,p[3,4],2]s[2,3,4]),{Join[{0},{sb[3,4],sb[4,2],sb[2,3]},0&/@Range[5,n]]}]},Function[{a},superFunction[ab[2,1]ab[2,3]ab[3,4]/(sb[2,3]ab[1,p[2,3],p@@Range[4,a-1],a]ab[4,p[2,3],p@@Range[2,a-1],a]asb[a,p@@Range[4,a-1],3]asb[a,p@@Range[3,a-1],2]),{If[a<=n-4,Join[{0,asb[a,p@@Range[4,a-1],3],-asb[a,p@@Range[4,a-1],2]},sb[2,3]ab[#,a]&/@Range[4,a-1],0&/@Range[a,n]],Join[{sb[2,3]ab[a,1],-asb[a,p@@Append[Range[a+1,n],1],3],asb[a,p@@Append[Range[a+1,n],1],2]},0&/@Range[4,a],sb[2,3]ab[a,#]&/@Range[a+1,n]]]}]]/@(seedGroups[[2,All,-1]]),Function[{a},superFunction[ab[2,1]ab[2,3]ab[a,a+1]/(ab[1,p@@Range[a],p@@Range[4,a],3]asb[a,p@@Range[3,a-1],2]asb[a+1,p@@Range[3,a],2]s@@Range[3,a]s@@Range[2,a]),{If[a<=n-4,Join[{0,s@@Range[3,a]},asb[#,p@@Range[3,a],2]&/@Range[3,a],0&/@Range[a+1,n]],Join[{asb[1,p@@Append[Range[a+1,n],1],2],s@@Range[2,a]},0&/@Range[3,a],-asb[#,p@@Range[3,a],2]&/@Range[a+1,n]]]}]]/@(seedGroups[[3,All,-2]]),Function[{a,b},superFunction[ab[2,1]ab[2,3]/((ab[1,3]ab[a,p@@Range[4,a-1],p@@Range[4,b-1],b]-ab[3,a]ab[1,p[2,3],p@@Range[4,b-1],b]+ab[3,b]ab[1,p@@Range[2,3],p@@Range[4,a-1],a])asb[a,p@@Range[3,a-1],2]ab[a,p@@Range[3,a-1],p@@Range[3,b-1],b]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b]asb[b,p@@Range[3,b-1],2]),{(Join[{0,ab[2,b]asb[a,p@@Range[3,a-1],2]-ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b]-ab[2,a]asb[b,p@@Range[3,b-1],2]},(ab[#,b]asb[a,p@@Range[3,a-1],2]-ab[#,a]asb[b,p@@Range[3,b-1],2])&/@Range[3,a-1],ab[#,b]asb[a,p@@Range[3,a-1],2]&/@Range[a,b-1],0&/@Range[b,n]]+If[a>=n-5,-(ab[#,b]asb[a,p@@Range[3,a-1],2]-ab[#,a]asb[b,p@@Range[3,b-1],2])&/@Range[n],If[n-b<=b-a-1,(-ab[#,b]asb[a,p@@Range[3,a-1],2]&/@Range[n]),0&/@Range[n]]]/.ab[x_,x_]:>0)}]]@@@(seedGroups[[4,All,{-2,-1}]]),Function[{a,b},superFunction[ab[1,2]ab[a,a+1]/(ab[1,p@@Range[2,a],p@@Range[a+1,b-1],b]ab[2,p@@Range[2,a],p@@Range[a+1,b-1],b]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b]ab[a+1,p@@Range[2,a],p@@Range[2,b-1],b]s@@Range[2,a]),{If[n-b<=b-a-2,Join[{ab[b,1]s@@Range[2,a]},-ab[#,p@@Range[2,a],p@@Append[Range[b+1,n],1],b]&/@Range[2,a],0&/@Range[a+1,b],ab[b,#]s@@Range[2,a]&/@Range[b+1,n]],Join[{0},(ab[#,p@@Range[2,a],p@@Range[a+1,b-1],b])&/@Range[2,a],ab[#,b]s@@Range[2,a]&/@Range[a+1,b-1],0&/@Range[b,n]]]}]]@@@seedGroups[[5,All,{3,5}]],Function[{a,b},superFunction[ab[1,2]ab[b,b+1]/(ab[1,p@@Range[2,b],p@@Range[a+1,b],a]ab[2,p@@Range[3,b],p@@Range[a+1,b],a]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b]ab[a,p@@Range[2,a-1],p@@Range[2,b],b+1]s@@Range[2,b]),{If[b-a>=a,Join[{ab[1,p@@Range[b+1,n],p@@Range[2,a-1],a]},s@@Range[2,b]ab[#,a]&/@Range[2,a],0&/@Range[a+1,b],ab[a,p@@Range[2,a-1],p@@Range[2,b],#]&/@Range[b+1,n]],Join[{0},ab[a,p@@Range[a+1,b],p@@Range[2,b],#]&/@Range[2,a],{-ab[a,p@@Range[2,a-1],p@@Range[2,b],a+1]},-ab[a,p@@Range[2,a-1],p@@Range[2,b],#]&/@Range[a+2,b],0&/@Range[b+1,n]]]}]]@@@seedGroups[[6,All,{3,4}]],Function[{a,b,c},superFunction[ab[2,1]/(ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b]ab[a,p@@Range[2,a-1],p@@Range[2,c-1],c]ab[b,p@@Range[2,b-1],p@@Range[2,c-1],c](ab[1,a]ab[b,p@@Range[a+1,b-1],p@@Range[a+1,c-1],c]-ab[a,b]ab[1,p@@Range[2,a],p@@Range[a,c-1],c]+ab[a,c]ab[1,p@@Range[2,a],p@@Range[a,b-1],b])(ab[2,a]ab[b,p@@Range[a+1,b-1],p@@Range[a+1,c-1],c]-ab[a,b]ab[2,p@@Range[3,a],p@@Range[a,c-1],c]+ab[a,c]ab[2,p@@Range[3,a],p@@Range[a,b-1],b])),{((Join[{0},(ab[#,a]ab[b,p@@Range[2,b-1],p@@Append[Range[c+1,n],1],c]+ab[b,#]ab[a,p@@Range[2,a-1],p@@Append[Range[c+1,n],1],c]+ab[c,#]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b])&/@Range[2,a-1],(ab[b,#]ab[a,p@@Range[2,a-1],p@@Append[Range[c+1,n],1],c]+ab[c,#]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b])&/@Range[a,b-1],ab[c,#]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b]&/@Range[b,c-1],0&/@Range[c,n]]+Which[n+1-c>=c-b&&n+1-c>=b-a&&n+1-c>=a-2,0&/@Range[n],c-b>=n+1-c&&c-b>=b-a&&c-b>=a-2,-ab[c,#]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b]&/@Range[n],a-2>=n+1-c&&a-2>=c-b&&a-2>=b-a,-(ab[#,a]ab[b,p@@Range[2,b-1],p@@Append[Range[c+1,n],1],c]+ab[b,#]ab[a,p@@Range[2,a-1],p@@Append[Range[c+1,n],1],c]+ab[c,#]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b])&/@Range[n],True,-(ab[b,#]ab[a,p@@Range[2,a-1],p@@Append[Range[c+1,n],1],c]+ab[c,#]ab[a,p@@Range[2,a-1],p@@Range[2,b-1],b])&/@Range[n]])/.ab[x_,x_]:>0)}]]@@@seedGroups[[7,All,{3,4,5}]],Function[{a,b,c,d},superFunction[1/Times@@(treeTools`spinorFourBracket[n]/@(Partition[{1,a,b,c,d},4,1,1])),{Factor/@canonicalizeSpinors[n][Normal[SparseArray[Thread[Rule[{1,a,b,c,d},RotateLeft[(treeTools`spinorFourBracket[n]/@Partition[{1,a,b,c,d},4,1,1]),1]]],{n}]] . Array[If[#1>#2>1,ab[#2,#1],0]&,{n,n}]]}]]@@@seedGroups[[8,All,{2,3,4,5}]]]]/.{sb[x_,x_]:>0,ab[x_,x_]:>0,-sb[x_,q___p,y_]:>sb[y,Sequence@@Reverse[{q}],x],-ab[x_,q___p,y_]:>ab[y,Sequence@@Reverse[{q}],x]})}];If[MemberQ[Range[6,10],n],seedData=Select[seedData,Not[MemberQ[List@@@treeTools`fiveBracketData[[n-5,2,All,1]],#[[1]]]]&]];Set[treeTools`spinorFiveBracket[n][Sort[#1]],#2]&@@@seedData;];

treeTools`bareEtaCoeffs[n_Integer][{argList__Integer}]/;(Length[{argList}]==5)&&Max[{argList}]<=n:=treeTools`bareEtaCoeffs[n][{argList}]=Block[{images=({argList}/.Thread[Rule[Range[n],#]]&/@(Partition[Range[n],n,1,1])),minimal,gauge},minimal=Ordering[Sort/@images][[1]];gauge=Times@@ab@@@Select[Partition[Sort[images[[minimal]]],2,1,1],MemberQ[Sort/@Partition[Range[n],2,1,1],Sort@#]&];Signature[Ordering[images[[1]]]](*Signature[Ordering[images[[minimal]]]]*)(#1[[2]]#2&@@(permuteLegs[Ordering[Partition[Range[n],n,1,1][[minimal]]]][{treeTools`spinorFiveBracket[n][Sort[images[[minimal]]]],gauge}]))];

treeTools`spinorFiveBracket[n_Integer][{argList__Integer}]/;n>=Length[{argList}]==5:=If[Not[{argList}===Sort[{argList}]],(Signature[Ordering[{argList}]]treeTools`spinorFiveBracket[n][Sort[{argList}]]/.superFunctionProductRule),Block[{images=({argList}/.(Thread[Rule[Range[n],#]]&/@(Partition[Range[n],n,1,1]))),minimal},minimal=Ordering[Sort/@images][[1]];If[minimal!=1,Set[treeTools`spinorFiveBracket[n][{argList}],permuteLegs[Ordering[(Partition[Range[n],n,1,1])[[minimal]]]][treeTools`spinorFiveBracket[n][images[[minimal]]]]],treeTools`setupSpinorFiveBrackets[n];treeTools`spinorFiveBracket[n][{argList}]]]];
treeTools`spinorFiveBracket[n_Integer][{argList__}]/;n>=Length[{argList}]==5:=If[Not[{argList}===Sort[Replace[{argList},{cap[z_,w_]:>cap@@(Sort/@{z,w})},{0,\[Infinity]}]]],Set[treeTools`spinorFiveBracket[n][{argList}],((Signature[Ordering[Replace[{argList},{cap[z_,w_]:>cap@@(Sort/@{z,w})},{0,\[Infinity]}]]]treeTools`spinorFiveBracket[n][Sort@Replace[{argList},{cap[z_,w_]:>cap@@(Sort/@{z,w})},{0,\[Infinity]}]])//.superFunctionProductRule)],Block[{dihedralImages=(Replace[#,{cap[z_,w_]:>cap@@(Sort/@{z,w})},{0,\[Infinity]}]&/@(({argList}/.(Thread[Rule[Range[n],#]]&/@Join[Partition[Range[n],n,1,1],Partition[Reverse[Range[n]],n,1,1]]))))},If[Not[{argList}===(Sort[Sort/@dihedralImages][[1]])],Set[treeTools`spinorFiveBracket[n][{argList}],(*Signature[(Join[Partition[Range[n],n,1,1],Partition[Reverse[Range[n]],n,1,1]])[[Ordering[dihedralImages][[1]]]]]*)(Signature[Ordering[dihedralImages[[Ordering[Sort/@dihedralImages][[1]]]]]]((canonicalizeSpinors[n][(permuteLegs[Ordering[Join[Partition[Range[n],n,1,1],Partition[Reverse[Range[n]],n,1,1]][[Ordering[Sort/@dihedralImages][[1]]]]]][treeTools`spinorFiveBracket[n][(Sort[Sort/@dihedralImages][[1]])]])])/.-sb[x_,y_]:>sb[y,x]))],If[DeleteDuplicates[Head/@{argList}]==={Integer},treeTools`setupSpinorFiveBrackets[n];treeTools`spinorFiveBracket[n][{argList}],Set[treeTools`spinorFiveBracket[n][{argList}],Module[{bosonic=simplifyTwistorBrackets[Times@@(ab@@@Partition[{argList},4,1,1])],signCount,factors,delta,gf},delta=r[argList]//.{r[x___,cap[y_,z_,q___],w___]:>Block[{fullRange=Join[y,z]},Total[(r[x,fullRange[[#1]],w] simplifyTwistorBrackets[ab@@RotateLeft[Partition[fullRange,4,1,1]][[#1]]]&)/@Range[Length[y]]]],r[x___,shift[{y1_,y2_},z_],w___]:>r[x,y1,w]+z r[x,y2,w],r[x___,y_,z___,y_,w___]:>0};Unprotect[ab,abZs];ClearAll[ab,abZs];ab[x__]/;(Length[{x}]==4):=abZs[x];{bosonic,delta}={bosonic,delta};ClearAll[ab];Protect[ab];abZs[x__]/;Length[{x}]==4:=abZs[x]=Signature[Ordering[{x}]]treeTools`spinorFourBracket[n][Sort[{x}]];{bosonic,delta}={bosonic,delta};ClearAll[abZs];Protect[abZs];factors=FactorList[bosonic/.s[x_,y_]:>ab[x,y]sb[x,y]];gf=Times@@Power@@@(Function[{x,y},{x,Sign[y]Floor[(Abs[y]+1)/4]}]@@@Select[factors,Abs[#[[2]]]>1&]);delta=Factor[1/gf delta/.r[x___Integer]:>(treeTools`bareEtaCoeffs[n][{x}])];signCount={Count[delta[[1]],Times[-1,x__],{0,1}],n-Count[delta[[1]],0]-Count[delta[[1]],Times[-1,x__],{0,1}]};superFunction[Power[gf,4]/(Times@@Power@@@factors),If[OrderedQ[signCount],1,-1]delta]]]]]]];treeTools`spinorFiveBracket[n_Integer][argList__]/;n>=Length[{argList}]==5:=treeTools`spinorFiveBracket[n][{argList}];

treeTools`fiveBracketData=Uncompress["1:"];
Function[{n,data},Set[treeTools`spinorFiveBracket[n][List@@#1],#2]&@@@data]@@@treeTools`fiveBracketData;


(* ::Section:: *)
(*Aspects and Ingredients of On-Shell Recursion*)


treeTools`functionTypes["E"]="Aspects of On Shell Recursion";


(* ::Subsection:: *)
(*Amplitude Factorizations and Partitions*)


treeTools`functionTypes["E",1]="Factorizations of Amplitudes/Bridge Partitions";
treeTools`functionNames["E",1]={"bcfwPartitions[n_,k_,conjugatedQ_:False]","bcfwPartitions[helicities__]"};


bcfwPartitions[n_Integer,k_Integer]:=Select[Join@@Table[{{n+2-nR,k-kR-1},{nR,kR}},{nR,3,n-1},{kR,If[nR==3,-1,0],nR-4}],(If[#1==3,#2==0,0<=#2<=#1-4]&)@@#1[[1]]&];
bcfwPartitions[n_Integer,k_Integer,conjugatedTrueQ_:False]/;BooleanQ[conjugatedTrueQ]:=Which[Not[TrueQ[conjugatedTrueQ]],bcfwPartitions[n,k],Not[MemberQ[Range@@Sort[{0,n-4}],k]],{},True,ReplacePart[#,{1->Reverse[#[[-1]]],-1->Reverse[#[[1]]]}]&@bcfwPartitions[n,k]];

(*Helicity-level BCFW splittings in YM*)
bcfwPartitions[{helList__}]/;((Sort[DeleteDuplicates[{helList}]]==={m,p})&&Not[{helList}[[{1,-1}]]==={p,m}]):=Block[{out=Select[({Append[Take[{helList},#1],#2[[1]]],Prepend[Drop[{helList},#1],#2[[2]]]}&@@@Tuples[{Range[2,Length[{helList}]-2],{{m,p},{p,m}}}]),And@@(MemberQ[Range@@Sort[{2,Length[#]-2}],Count[#,m]]&/@#)&&If[Length[#[[1]]]==3,Count[#[[1]],m]==2,True]&&If[Length[#[[-1]]]==3,Count[#[[-1]],m]==1,True]&]},Join@@Reverse/@Gather[Reverse[out],Length[#1[[1]]]==Length[#2[[1]]]&]];
(*PBCFW---only called when helicities 1,-1 are p,m*)
bcfwPartitions[{helList__}]/;((Sort[DeleteDuplicates[{helList}]]==={m,p})&&({helList}[[{1,-1}]]==={p,m})):=Block[{out=Select[({Append[Take[{helList},#1],#2[[1]]],Prepend[Drop[{helList},#1],#2[[2]]]}&@@@Tuples[{Range[2,Length[{helList}]-2],{{m,p},{p,m}}}]),And@@(MemberQ[Range@@Sort[{2,Length[#]-2}],Count[#,m]]&/@#)&&If[Length[#[[1]]]==3,Count[#[[1]],m]==1,True]&&If[Length[#[[-1]]]==3,Count[#[[-1]],m]==2,True]&]},Join@@Reverse/@Gather[Reverse[out],Length[#1[[1]]]==Length[#2[[1]]]&]];


(* ::Subsection:: *)
(*Naming and Counting Terms in BCFW*)


treeTools`functionTypes["E",2]="Naming and Enumerating Terms in BCFW";
treeTools`functionNames["E",2]={"numberofBCFWterms[n_,k_]","bcfwTermNames[n_,k_]"};


numberOfBCFWterms[3,-1]=numberOfBCFWterms[3,0]=1;
numberOfBCFWterms[n_Integer,k_Integer]:=1/(n-3) Binomial[n-3,k+1]Binomial[n-3,k];

bcfwTermNames[n_Integer,k_Integer]/;MemberQ[Range@@Sort[{0,n-4}],k]:=Row/@Flatten/@(ReplaceRepeated[treeTools`bcfwTermNamesBare[n,k]/.List[amp[x__],amp[y__]]:>{amp[x],Style["\[CircleTimes]",FontFamily->"Times",FontSize->20],amp[y]},{List[x_List,y_List]:>{Sequence@@{Style["(",FontFamily->"Times",FontSize->20],Sequence@@x,Style[")",FontFamily->"Times",FontSize->20],Style["\[CircleTimes]",FontFamily->"Times",FontSize->20]},Sequence@@{"(",Sequence@@y,")"}}}]//.{List[q___,amp[x__],y_List,r___]:>{q,amp[x],Style["\[CircleTimes]",FontFamily->"Times",FontSize->20],Sequence@@{"(",Sequence@@y,")"},r},List[q___,y_List,amp[x__],r___]:>{q,Sequence@@{Style["(",FontFamily->"Times",FontSize->20],Sequence@@y,Style[")",FontFamily->"Times",FontSize->20],Style["\[CircleTimes]",FontFamily->"Times",FontSize->20]},amp[x],r}}/.{{amp[x__]}:>amp[x]})/.amp[x_,y_]:>Subsuperscript[Style[\[ScriptCapitalA],FontFamily->"Times",FontSize->18],Row[{Style[x,FontFamily->"Times",FontSize->14]}],Row[{Style[y,FontFamily->"Times",FontSize->14]}]];


treeTools`bcfwTermNamesBare[n_Integer,k_Integer]:=Which[k==0||n==k+4,{amp[n,k]},True,(Join@@(Tuples/@(((treeTools`bcfwTermNamesBare@@@#&/@bcfwPartitions[n,k])))))];
treeTools`bcfwTermNamesBareFull[n_Integer,k_Integer]:=Which[n==3,{amp[n,k]},True,(Join@@(Tuples/@(((treeTools`bcfwTermNamesBareFull@@@#&/@bcfwPartitions[n,k])))))];


(* ::Subsection:: *)
(*Ingredients for Gravitational Amplitude Recursion*)


(*Helicity-lelel BCFW splittings in GR (with leg distribution data implied)*)
bcfwPartitions[{helList__}]/;((Sort[DeleteDuplicates[{helList}]]==={mm,pp})&&Not[{helList}[[{1,-1}]]==={pp,mm}]):=Block[{middleRange,n=Length[{helList}]},middleRange=Reverse/@(Sort[Transpose[{{helList}[[2;;-2]],Range[2,n-1]}]]);Select[Function[{left,middle},{Prepend[Append[left,{intL,middle[[1]]}],{1,{helList}[[1]]}],Append[Prepend[complement[middleRange,left],{intR,middle[[2]]}],{Length[{helList}],{helList}[[-1]]}]}]@@@Tuples[{Join@@Reverse[Subsets[middleRange,{#}]&/@Range[1,Length[middleRange]-1]],{{mm,pp},{pp,mm}}}],MemberQ[Range@@Sort[{2,Length[#[[1]]]-2}],Count[#[[1,All,2]],mm]]&&MemberQ[Range@@Sort[{2,Length[#[[2]]]-2}],Count[#[[2,All,2]],mm]]&&If[Length[#[[2]]]==3,Count[#[[2,All,2]],pp]==2,True]&&If[Length[#[[1]]]==3,Count[#[[1,All,2]],pp]==1,True]&]];
(*PBCFW---only called when helicities 1,-1 are pp,mm*)
bcfwPartitions[{helList__}]/;((Sort[DeleteDuplicates[{helList}]]==={mm,pp})&&({helList}[[{1,-1}]]==={pp,mm})):=Block[{middleRange,n=Length[{helList}]},middleRange=Reverse/@Sort[Transpose[{{helList}[[2;;-2]],Range[2,n-1]}]];Select[Function[{left,middle},{Prepend[Append[left,{intL,middle[[1]]}],{1,{helList}[[1]]}],Append[Prepend[complement[middleRange,left],{intR,middle[[2]]}],{Length[{helList}],{helList}[[-1]]}]}]@@@Tuples[{Join@@Reverse[Subsets[middleRange,{#}]&/@Range[1,Length[middleRange]-1]],{{mm,pp},{pp,mm}}}],MemberQ[Range@@Sort[{2,Length[#[[1]]]-2}],Count[#[[1,All,2]],mm]]&&MemberQ[Range@@Sort[{2,Length[#[[2]]]-2}],Count[#[[2,All,2]],mm]]&&If[Length[#[[2]]]==3,Count[#[[2,All,2]],pp]==1,True]&&If[Length[#[[1]]]==3,Count[#[[1,All,2]],pp]==2,True]&]];

treeTools`bcfwLegPermutationGroupLengths[4,0]={{2}};
treeTools`bcfwLegPermutationGroupLengths[n_Integer,k_Integer]/;(n>=3&&MemberQ[Range@@Sort[{0,n-4}],k]):=treeTools`bcfwLegPermutationGroupLengths[n,k]=Block[{groups,lens},groups=ReplaceRepeated[ReplaceRepeated[treeTools`bcfwTermNamesBareFull[n,k][[1;;-1]],{List[x___,List[y___,amp[3,-1]],amp[q_,-1]]:>List[x,List[y,amp[q+1,-1]]],List[amp[q_,0],List[amp[3,0],y___],x___]:>List[List[amp[q+1,0],y],x]}],List[amp[x_,0],amp[y_,-1]]:>amp[x+y-2,0]];lens=(Flatten/@groups)/.amp[x_,y_]:>x-2];
treeTools`bcfwLegPermutationGroupSeeds[splitting_List]:=treeTools`bcfwLegPermutationGroupSeeds[splitting]=Block[{n=Total[splitting]+2},Fold[Function[{grp,next},Join@@(Function[{list},Append[list,#]&/@Subsets[Complement[Range[2,n-1],Flatten@list],{next}]]/@grp)],{{}},splitting]];
treeTools`bcfwLegPermutationGroupSeeds[n_Integer,k_Integer]:=treeTools`bcfwLegPermutationGroupSeeds[n,k]=treeTools`bcfwLegPermutationGroupSeeds/@(treeTools`bcfwLegPermutationGroupLengths[n,k]);
treeTools`bcfwLegPermutationGroups[n_Integer,k_Integer]:=treeTools`bcfwLegPermutationGroups[n,k]=Join@@@#&/@#&/@(Tuples[Permutations/@#]&/@#&/@treeTools`bcfwLegPermutationGroupSeeds[n,k]);


(* ::Subsection:: *)
(*On-Shell Cut-Data for Shifted Momenta*)


treeTools`functionTypes["E",3]="On Shell Cut Data for Shifted Momenta";
treeTools`functionNames["E",3]={"bcfwCutData[{nL_,nR_},conjugatedQ_:False]","bcfwCutSpinors[{nL_,nR_},conjugatedQ_:False]"};


bcfwCutData[{nL_Integer,nR_Integer}]:=bcfwCutData[{nL,nR}]=Block[{n=nL+nR-2},Join[(Which[nR==3,{zStar->ab[n,n-1]/ab[n-1,1],intL->{{n-1,n},Transpose@{{1,1},{0,ab[n,1]/ab[n-1,1]}}},intR->{{n-1,n},Transpose@{{1,-1},{0,-ab[n,1]/ab[n-1,1]}}},oneHat->{{1,n},Transpose@{{1,1},{0,ab[n-1,n]/ab[n-1,1]}}},nHat->{{n,1},Transpose@{{1,1},{ab[n,n-1]/ab[n-1,1],0}}}},nL==3,{zStar->sb[2,1]/sb[2,n],intL->{{2,1},Transpose@{{1,-1},{sb[1,n]/sb[2,n],0}}},intR->{{2,1},Transpose@{{1,1},{sb[1,n]/sb[2,n],0}}},oneHat->{{1,n},Transpose@{{1,1},{0,sb[1,2]/sb[2,n]}}},nHat->{{n,1},Transpose@{{1,1},{sb[2,1]/sb[2,n],0}}}},(nL-1)>n/2,{zStar->s@@Range[nL,n]/asb[1,p@@Range[nL,n-1],n],intL->{{nL,n},Transpose@{{-asb[n,p@@Range[nL,n-1],n]/s[nL,n],1},{If[nR==4,ab[nL,n-1]sb[n-1,n]/s[nL,n],asb[nL,p@@Range[nL+1,n-1],n]/s[nL,n]],-asb[1,p@@Range[nL+1,n],nL]/asb[1,p@@Range[nL,n-1],n]}}},intR->{{nL,n},Transpose@{{-asb[n,p@@Range[nL,n-1],n]/s[nL,n],-1},{If[nR==4,ab[nL,n-1]sb[n-1,n]/s[nL,n],asb[nL,p@@Range[nL+1,n-1],n]/s[nL,n]],asb[1,p@@Range[nL+1,n],nL]/asb[1,p@@Range[nL,n-1],n]}}},oneHat->{{1,n},Transpose@{{1,1},{0,-s@@Range[nL,n]/asb[1,p@@Range[nL,n-1],n]}}},nHat->{{n,1},Transpose@{{1,1},{s@@Range[nL,n]/asb[1,p@@Range[nL,n-1],n],0}}}},True,{zStar->-s@@Range[nL-1]/asb[1,p@@Range[2,nL-1],n],intL->{{nL-1,1},Transpose@{{1,asb[1,p@@Range[2,nL-1],1]/s[1,nL-1]},{-asb[nL-1,p@@Range[nL-2],n]/asb[1,p@@Range[2,nL-1],n],If[nL==4,-ab[1,2]sb[2,3]/s[1,nL-1],-asb[1,p@@Range[2,nL-2],nL-1]/s[1,nL-1]]}}},intR->{{nL-1,1},Transpose@{{1,-asb[1,p@@Range[2,nL-1],1]/s[1,nL-1]},{-asb[nL-1,p@@Range[nL-2],n]/asb[1,p@@Range[2,nL-1],n],If[nL==4,ab[1,2]sb[2,3]/s[1,nL-1],asb[1,p@@Range[2,nL-2],nL-1]/s[1,nL-1]]}}},oneHat->{{1,n},Transpose@{{1,1},{0,s@@Range[nL-1]/asb[1,p@@Range[2,nL-1],n]}}},nHat->{{n,1},Transpose@{{1,1},{-s@@Range[nL-1]/asb[1,p@@Range[2,nL-1],n],0}}}}]),{}]];
bcfwCutData[{nL_Integer,nR_Integer},{legLabels__Integer}]/;(Length[{legLabels}]==(nL+nR-2)):=Block[{rule=Thread[Rule[Range[nL+nR-2],{legLabels}]],cutData0=bcfwCutData[{nL,nR}]},ReplacePart[#,Thread[Rule[{#,2,1}&/@Range[2,Length[cutData0]],(#[[2;;-1,2,1]]/.rule)]]]&@(cutData0/.{ab[x___]:>ab@@({x}/.rule),sb[x___]:>sb@@({x}/.rule),asb[x___]:>asb@@({x}/.rule),s[x___]:>s@@({x}/.rule)})];
bcfwCutData[{nL_Integer,nR_Integer},True]:=bcfwCutData[{nL,nR},True]=Block[{conjgateData=(bcfwCutData[{nL,nR}]/.{ab[x__]:>sb[x],sb[x__]:>ab[x],asb[x_,p[y__],z_]:>asb[z,p[y],x]})},{zStar->-(zStar/.conjgateData),intL->{#1,Reverse@#2}&@@((intL/.conjgateData)),intR->{#1,Reverse@#2}&@@((intR/.conjgateData)),oneHat->{#1,Reverse[{1,1}*#&/@#2]}&@@((oneHat/.conjgateData)),nHat->{#1,Reverse[{1,1}*#&/@#2]}&@@((nHat/.conjgateData))}];
bcfwCutData[{nL_Integer,nR_Integer},True,{legLabels__Integer}]/;(Length[{legLabels}]==(nL+nR-2)):=Block[{rule=Thread[Rule[Range[nL+nR-2],{legLabels}]],cutData0=bcfwCutData[{nL,nR},True]},ReplacePart[#,Thread[Rule[{#,2,1}&/@Range[2,Length[cutData0]],(#[[2;;-1,2,1]]/.rule)]]]&@(cutData0/.{ab[x___]:>ab@@({x}/.rule),sb[x___]:>sb@@({x}/.rule),asb[x___]:>asb@@({x}/.rule),s[x___]:>s@@({x}/.rule)})];
bcfwCutData[x__,False,y___]:=bcfwCutData[x,y];
bcfwCutData[nL_Integer,nR_Integer,labels___Integer]:=If[{labels}==={},bcfwCutData[{nL,nR}],bcfwCutData[{nL,nR},{labels}]];
bcfwCutData[nL_Integer,nR_Integer,True,labels___Integer]:=If[{labels}==={},bcfwCutData[{nL,nR},True],bcfwCutData[{nL,nR},True,{labels}]];
bcfwCutData[{{nL_Integer,kL_Integer},{nR_Integer,kR_Integer}},{labels__Integer}]:=bcfwCutData[{nL,nR},{labels}];bcfwCutData[{{nL_Integer,kL_Integer},{nR_Integer,kR_Integer}},True,{labels__Integer}]:=bcfwCutData[{nL,nR},True,{labels}];

bcfwCutSpinors[{nL_Integer,nR_Integer},x___]:=Block[{cutRules=bcfwCutData[{nL,nR},x]},{RotateLeft[#1],RotateLeft[#2]}&@@Join@@@Transpose[{(Function[{anchors,coeffs},Total[Transpose[coeffs]*({\[Lambda][#],\[Lambda]b[#]}&/@anchors)]]@@@#&/@(({{intL,oneHat},{nHat,intR}}/.cutRules))),{\[Lambda][#],\[Lambda]b[#]}&/@#&/@{Range[2,nL-1],Range[nL,nL+nR-3]}}]];


(* ::Subsection:: *)
(*Internal: Various Implementations of Bridging and Related*)


(* ::Subsubsection:: *)
(*Twistor BCFW Bridge (R-Invariant expressions)*)


treeTools`twistorBCFWbridge[{nL_Integer,kL_Integer},{nR_Integer,kR_Integer},randomQ_:False,conjugatedTrueQ_:False][twistorLabels_List]:=If[Not[TrueQ[conjugatedTrueQ]],Block[{jHat,nHat,leftLabelRules,rightLabelRules,leftAmp,rightAmp},jHat=cap[twistorLabels[[{nL-1,nL}]],twistorLabels[[{-1,-2,1}]]];nHat=cap[twistorLabels[[{-1,-2}]],twistorLabels[[{nL,nL-1,1}]]];leftLabelRules=Thread[Rule[Range[nL],ReplacePart[twistorLabels[[1;;nL]],If[nR==3,{},{-1->jHat}]]]];rightLabelRules=Thread[Rule[Range[nR],ReplacePart[twistorLabels[[nL-1;;-1]],{1->jHat,-1->nHat}]]];leftAmp=(If[TrueQ[randomQ],ymTwistorAmpRandom[nL,kL],ymTwistorAmp[nL,kL]]/.{R[x__]:>R@@({x}/.leftLabelRules)});rightAmp=(If[TrueQ[randomQ],ymTwistorAmpRandom[nR,kR],ymTwistorAmp[nR,kR]]/.{R[x__]:>R@@({x}/.rightLabelRules)});Times@@@Tuples[{leftAmp,If[nR>3,{(R@@twistorLabels[[{1,nL-1,nL,-2,-1}]])},{1}],rightAmp}]],Block[{jHat,oneHat,leftLabelRules,rightLabelRules,leftAmp,rightAmp},jHat=cap[twistorLabels[[{nL-1,nL}]],twistorLabels[[{1,2,-1}]]];oneHat=cap[twistorLabels[[{1,2}]],twistorLabels[[{nL,nL-1,-1}]]];leftLabelRules=Thread[Rule[Range[nL],ReplacePart[twistorLabels[[1;;nL]],If[nL==3,{},{1->oneHat,-1->jHat}]]]];rightLabelRules=Thread[Rule[Range[nR],ReplacePart[twistorLabels[[nL-1;;-1]],If[nL==3,{},{1->jHat}]]]];leftAmp=(If[TrueQ[randomQ],ymTwistorAmpRandom[nL,kL],ymTwistorAmp[nL,kL]]/.{R[x__]:>R@@({x}/.leftLabelRules)});rightAmp=(If[TrueQ[randomQ],ymTwistorAmpRandom[nR,kR],ymTwistorAmp[nR,kR]]/.{R[x__]:>R@@({x}/.rightLabelRules)});Times@@@Tuples[{leftAmp,If[nL>3,{(R@@twistorLabels[[{1,2,nL-1,nL,-1}]])},{1}],rightAmp}]]];


(* ::Subsubsection:: *)
(*Spinor-Space Bridging (Generic)*)


treeTools`bridgeFactors[nL_,nR_,conjugatedTrueQ_:False][leftFcn_,rightFcn_]:=Module[{nPrime,one,int},Block[{n=nL+nR-2,left,right},left=(leftFcn//.{-asb[a_,p[x__],a_]+s[x__]:>s[a,x]})/.{sb[x___]:>sb@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}]),ab[x___]:>ab@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}]),s[x___]:>s@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}]),asb[x___]:>asb@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}])}//.{head_[one,p[a___,nL,a2___],r___]:>-head[one,p@@Complement[Range[nL],{a,nL,a2,1}],r],head_[int,p[a___,1,a2___],r___]:>-head[int,p@@Complement[Range[nL],{a,nL,a2,1}],r],head_[r___,p[a1___,nL,a2___],one]:>-head[r,p@@Complement[Range[nL],{a1,nL,a2,1}],one],head_[r___,p[a1___,1,a2___],int]:>-head[r,p@@Complement[Range[nL],{a1,nL,a2,1}],int],head_[q___,p[r___,1,s___],t___]:>-head[q,p@@Complement[Range[nL],{r,s,1}],t]}//.If[Not[TrueQ[conjugatedTrueQ]],If[nL<=nR,{s[q___]:>Which[Length[Intersection[{q},{one,int}]]==0,s[q],Length[Intersection[{q},{one,int}]]==2,s@@Complement[Range[2,nL-1],{q}],MemberQ[{q},one],asb[1,p@@DeleteCases[{q},one],p@@Complement[Range[2,nL-1],{q}],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n],True,asb[1,p@@Complement[Range[2,nL-1],{q}],p@@DeleteCases[{q},int],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]],ab[int,1]->-ab[1,nL-1],ab[1,int]->ab[1,nL-1],ab[x___,one,y___]:>ab[x,1,y],asb[one,y__]:>asb[1,y],sb[x___,one]:>-(sb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),asb[x___,one]:>-(asb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),sb[one,x___]:>sb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n],ab[int,q___]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],ab[q__,int]:>1/asb[1,p@@Range[2,nL-1],n] asb[q,p@@(Range[nL-1]),n]ab[1,nL-1],asb[int,q___]:>1/asb[1,p@@Range[2,nL-1],n] sb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],sb[x___,int]:>-(asb[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[nL-1,1]),sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[nL-1,1],asb[x___,int]:>ab[1,p@@Range[nL-1],Sequence@@Reverse[{x}]]/ab[nL-1,1]},{s[q___]:>Which[Length[Intersection[{q},{one,int}]]==0,s[q],Length[Intersection[{q},{one,int}]]==2,s@@Complement[Range[2,nL-1],{q}],MemberQ[{q},one],asb[1,p@@DeleteCases[{q},one],p@@Complement[Range[2,nL-1],{q}],p@@Range[nL,n-1],n]/asb[1,p@@Range[nL,n-1],n],True,asb[1,p@@Complement[Range[2,nL-1],{q}],p@@DeleteCases[{q},int],p@@Range[nL,n-1],n]/asb[1,p@@Range[nL,n-1],n]],ab[x___,one,y___]:>ab[x,1,y],asb[one,y__]:>asb[1,y],sb[x___,one]:>-(sb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),asb[x___,one]:>-(asb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),sb[one,x___]:>sb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n],ab[int,q___]:>-(1/sb[nL,n])asb[Sequence@@Reverse[{q}],p@@Range[nL,n-1],n],ab[q___,int]:>1/sb[nL,n] asb[q,p@@Range[nL,n-1],n],asb[int,q___]:>1/sb[nL,n] sb[Sequence@@Reverse[{q}],p@@Range[nL,n-1],n],sb[int,x___]:>(asb[1,p@@Range[nL,n],x]sb[nL,n])/asb[1,p@@Range[nL,n-1],n],sb[x___,int]:>-((asb[1,p@@Range[nL,n],Sequence@@Reverse[{x}]]sb[nL,n])/asb[1,p@@Range[nL,n-1],n]),asb[x___,int]:>(ab[1,p@@Range[nL,n],Sequence@@Reverse[{x}]]sb[nL,n])/asb[1,p@@Range[nL,n-1],n]}],If[nL<=nR,{s[q___]:>Which[Length[Intersection[{q},{one,int}]]==0,s[q],Length[Intersection[{q},{one,int}]]==2,s@@Complement[Range[2,nL-1],{q}],MemberQ[{q},one],asb[n,p@@Range[nL-1],p@@Complement[Range[2,nL-1],{q}],p@@DeleteCases[{q},one],1]/asb[n,p@@Range[2,nL-1],1],True,asb[n,p@@Range[nL-1],p@@DeleteCases[{q},int],p@@Complement[Range[2,nL-1],{q}],1]/asb[n,p@@Range[2,nL-1],1]],sb[x___,one,y___]:>sb[x,1,y],asb[y___,one]:>asb[y,1],ab[x__,one]:>ab[x,p@@Append[Range[nL,n],1],p@@Range[nL-1],n]/asb[n,p@@Range[2,nL-1],1],ab[one,x__]:>ab[Sequence@@Reverse[{x}],p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[n,p@@Range[2,nL-1],1],asb[one,x__]:>-(asb[n,p@@Range[nL-1],p@@Range[2,nL-1],x]/asb[n,p@@Range[2,nL-1],1]),ab[x___,int]:>1/sb[1,nL-1] asb[x,p@@Range[2,nL-1],1],ab[int,x___]:>-(1/sb[1,nL-1])asb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],1],asb[int,x___]:>1/sb[1,nL-1] sb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],1],sb[x___,int]:>1/asb[n,p@@Range[2,nL-1],1] asb[n,p@@Range[nL-1],Sequence@@Reverse[{x}]]sb[1,nL-1],sb[int,x___]:>-(1/asb[n,p@@Range[2,nL-1],1])asb[n,p@@Range[nL-1],x]sb[1,nL-1],asb[x___,int]:>-(1/asb[n,p@@Range[2,nL-1],1])ab[n,p@@Range[nL-1],Sequence@@Reverse[{x}]]sb[1,nL-1]},{s[q___]:>Which[Length[Intersection[{q},{one,int}]]==0,s[q],Length[Intersection[{q},{one,int}]]==2,s@@Complement[Range[2,nL-1],{q}],MemberQ[{q},one],asb[n,p@@Range[nL,n-1],p@@Complement[Range[2,nL-1],{q}],p@@DeleteCases[{q},one],1]/asb[n,p@@Range[nL,n-1],1],True,asb[n,p@@Range[nL,n-1],p@@DeleteCases[{q},int],p@@Complement[Range[2,nL-1],{q}],1]/asb[n,p@@Range[nL,n-1],1]],sb[x___,one,y___]:>sb[x,1,y],asb[y__,one]:>asb[y,1],ab[x___,one]:>ab[x,p@@Append[Range[nL,n],1],p@@Range[nL,n-1],n]/asb[n,p@@Range[nL,n-1],1],ab[one,x___]:>-(ab[Sequence@@Reverse[{x}],p@@Append[Range[nL,n],1],p@@Range[nL,n-1],n]/asb[n,p@@Range[nL,n-1],1]),asb[one,x___]:>asb[n,p@@Range[nL,n-1],p@@Append[Range[nL,n],1],x]/asb[n,p@@Range[nL,n-1],1],ab[int,q___]:>1/asb[n,p@@Range[nL,n-1],1] asb[Sequence@@Reverse[{q}],p@@Range[nL,n],1]ab[nL,n],ab[q___,int]:>-(1/asb[n,p@@Range[nL,n-1],1])asb[q,p@@Range[nL,n],1]ab[nL,n],asb[int,q___]:>-(1/asb[n,p@@Range[nL,n-1],1])sb[Sequence@@Reverse[{q}],p@@Range[nL,n],1]ab[nL,n],sb[x___,int]:>1/ab[nL,n] asb[n,p@@Range[nL,n-1],Sequence@@Reverse[{x}]],sb[int,x___]:>-(1/ab[nL,n])asb[n,p@@Range[nL,n-1],x],asb[x___,int]:>1/ab[nL,n] ab[x,p@@Range[nL,n-1],n]}]];right=(rightFcn//.{-asb[a_,p[x__],a_]+s[x__]:>s[a,x]})/.{sb[x___]:>sb@@({x}/.Join[{p[q__]:>p@@({q}/.Thread[Rule[Range[nR],Range[nR]+nL-2]])},Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]]]),ab[x___]:>ab@@({x}/.Join[{p[q__]:>p@@({q}/.Thread[Rule[Range[nR],Range[nR]+nL-2]])},Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]]]),asb[x___]:>asb@@({x}/.Join[{p[q__]:>p@@({q}/.Thread[Rule[Range[nR],Range[nR]+nL-2]])},Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]]]),s[x__]:>s@@({x}/.Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]])}//.{head_[nPrime,p[a___,nL-1,a2___],r___]:>-head[nPrime,p@@Complement[Range[nR-1]+nL-1,{a,nL-1,a2,n}],r],head_[r___,p[a___,nL-1,a2___],nPrime]:>-head[r,p@@Complement[Range[nR-1]+nL-1,{a,nL-1,a2,n}],nPrime],head_[int,p[a___,n,a2___],r___]:>-head[int,p@@Complement[Range[nR-1]+nL-1,{a,nL-1,a2,n}],r],head_[r___,p[a1___,n,a2___],int]:>-head[r,p@@Complement[Range[nR-1]+nL-1,{a1,nL-1,a2,n}],int],head_[q___,p[r___,n,s___],t___]:>-head[q,p@@Complement[Range[nR-1]+nL-1,{r,s,n,nL-1}],t]}//.If[Not[TrueQ[conjugatedTrueQ]],If[nL<=nR,{s[q___]:>Which[Length[Intersection[{q},{nPrime,int}]]==0,s[q],Length[Intersection[{q},{nPrime,int}]]==2,s@@Complement[Range[nL,n-1],{q}],MemberQ[{q},nPrime],-(asb[1,p@@Range[2,nL-1],p@@Join[Range[nL-1],DeleteCases[{q},nPrime],{n}],p@@DeleteCases[{q},nPrime],n]/asb[1,p@@Range[2,nL-1],n]),True,-(asb[1,p@@Range[2,nL-1],p@@DeleteCases[{q},int],p@@Join[Range[nL-1],DeleteCases[{q},int]],n]/asb[1,p@@Range[2,nL-1],n])],sb[y___,nPrime,x___]:>sb[y,n,x],asb[x___,nPrime]:>asb[x,n](*,ab[x___,nPrime]:>ab[x,p@@Prepend[nL-1,n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n]*),ab[x___,nPrime]:>ab[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n],ab[nPrime,x___]:>-(ab[Sequence@@Reverse[{x}],p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n]),asb[nPrime,x___]:>asb[1,p@@Range[2,nL-1],p@@Prepend[Range[nL-1],n],x]/asb[1,p@@Range[2,nL-1],n],asb[int,q___]:>1/asb[1,p@@Range[2,nL-1],n] sb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],asb[x___,int]:>-(ab[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[nL-1,1]),ab[int,q___]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],ab[q__,int]:>(1/asb[1,p@@Range[2,nL-1],n])asb[q,p@@Range[nL-1],n]ab[1,nL-1],sb[x___,int]:>-(asb[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[1,nL-1]),sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[1,nL-1],sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[nL-1,1]},{s[q___]:>Which[Length[Intersection[{q},{nPrime,int}]]==0,s[q],Length[Intersection[{q},{nPrime,int}]]==2,s@@Complement[Range[nL,n-1],{q}],MemberQ[{q},nPrime],-(asb[1,p@@Range[nL,n],p@@Join[Range[nL-1],DeleteCases[{q},nPrime],{n}],p@@DeleteCases[{q},nPrime],n]/asb[1,p@@Range[nL,n-1],n]),True,-(asb[1,p@@Range[nL,n],p@@DeleteCases[{q},int],p@@Join[Range[nL-1],DeleteCases[{q},int]],n]/asb[1,p@@Range[nL,n-1],n])],sb[y___,nPrime,x___]:>sb[y,n,x],asb[x___,nPrime]:>asb[x,n],ab[x___,nPrime]:>ab[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n],ab[nPrime,x___]:>-(ab[Sequence@@Reverse[{x}],p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n]),asb[nPrime,x___]:>asb[1,p@@Range[2,nL-1],p@@Prepend[Range[nL-1],n],x]/asb[1,p@@Range[2,nL-1],n],ab[int,q___]:>1/sb[nL,n] asb[Sequence@@Reverse[{q}],p@@Range[nL-1],n],ab[q___,int]:>-(1/sb[nL,n])asb[q,p@@Range[nL-1],n],asb[int,q___]:>1/sb[nL,n] sb[Sequence@@Reverse[{q}],p@@Range[nL,n-1],n],sb[int,x___]:>(asb[1,p@@Range[2,nL-1],x]sb[nL,n])/asb[1,p@@Range[nL,n-1],n],sb[x___,int]:>-((asb[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]sb[nL,n])/asb[1,p@@Range[nL,n-1],n]),asb[x___,int]:>(ab[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]sb[nL,n])/asb[1,p@@Range[nL,n-1],n]}],If[nL<=nR,{s[q___]:>Which[Length[Intersection[{q},{nPrime,int}]]==0,s[q],Length[Intersection[{q},{nPrime,int}]]==2,s@@Complement[Range[nL,n-1],{q}],MemberQ[{q},nPrime],-(asb[n,p@@DeleteCases[{q},nPrime],p@@Join[Range[nL-1],DeleteCases[{q},nPrime],{n}],p@@Range[2,nL-1],1]/asb[n,p@@Range[2,nL-1],1]),True,-(asb[n,p@@Join[Range[nL-1],DeleteCases[{q},int]],p@@DeleteCases[{q},int],p@@Range[2,nL-1],1]/asb[n,p@@Range[2,nL-1],1])],ab[y___,nPrime,x___]:>ab[y,n,x],asb[nPrime,x___]:>asb[n,x],sb[x___,nPrime]:>sb[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[n,p@@Range[2,nL-1],1],sb[nPrime,x___]:>-(sb[Sequence@@Reverse[{x}],p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[n,p@@Range[2,nL-1],1]),asb[x__,nPrime]:>asb[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[n,p@@Range[2,nL-1],1],ab[int,x___]:>1/sb[1,nL-1] asb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],1],ab[x___,int]:>-(1/sb[1,nL-1])asb[x,p@@Range[2,nL-1],1],asb[int,x___]:>-(1/sb[1,nL-1])sb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],1],sb[int,x___]:>1/asb[n,p@@Range[2,nL-1],1] asb[n,p@@Range[nL-1],x]sb[nL-1,1],sb[x___,int]:>1/asb[n,p@@Range[2,nL-1],1] asb[n,p@@Range[nL-1],Sequence@@Reverse[{x}]]sb[1,nL-1],asb[x___,int]:>1/asb[n,p@@Range[2,nL-1],1] ab[x,p@@Range[nL-1],n]sb[1,nL-1]},{s[q___]:>Which[Length[Intersection[{q},{nPrime,int}]]==0,s[q],Length[Intersection[{q},{nPrime,int}]]==2,s@@Complement[Range[nL,n-1],{q}],MemberQ[{q},nPrime],-(asb[n,p@@DeleteCases[{q},nPrime],p@@Join[Range[nL-1],DeleteCases[{q},nPrime],{n}],p@@Range[nL,n],1]/asb[n,p@@Range[nL,n-1],1]),True,-(asb[n,p@@Join[Range[nL-1],DeleteCases[{q},int]],p@@DeleteCases[{q},int],p@@Range[nL,n],1]/asb[n,p@@Range[nL,n-1],1])],ab[y___,nPrime,x___]:>ab[y,n,x],asb[nPrime,x___]:>asb[n,x],sb[x___,nPrime]:>-(sb[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[n,p@@Range[nL,n-1],1]),sb[nPrime,x___]:>sb[Sequence@@Reverse[{x}],p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[n,p@@Range[nL,n-1],1],asb[x___,nPrime]:>-(asb[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[n,p@@Range[nL,n-1],1]),ab[int,q___]:>-(1/asb[n,p@@Range[nL,n-1],1])asb[Sequence@@Reverse[{q}],p@@Range[nL,n],1]ab[nL,n],ab[q___,int]:>1/asb[n,p@@Range[nL,n-1],1] asb[q,p@@Range[nL,n],1]ab[nL,n],asb[int,q___]:>1/asb[n,p@@Range[nL,n-1],1] sb[Sequence@@Reverse[{q}],p@@Range[nL,n],1]ab[nL,n],sb[int,q___]:>-(1/ab[nL,n])asb[n,p@@Range[nL,n-1],q],sb[q___,int]:>1/ab[nL,n] asb[n,p@@Range[nL,n-1],Sequence@@Reverse[{q}]],asb[x___,int]:>-(1/ab[nL,n])ab[n,p@@Range[nL,n-1],Sequence@@Reverse[{x}]]}]];canonicalizeSpinors[n][Times@@@Tuples[{Flatten[{left}],Flatten[{right}],{1/If[OrderedQ[{nL,nR}],s@@Range[nL-1],s@@Range[nL,n]]}}]]]];


(* ::Subsubsection:: *)
(*Helicity Amplitude Bridging*)


treeTools`ymHelicityAmpBridge[{leftHelicities_List,rightHelicities_List},conjugatedTrueQ_:False]:=treeTools`bridgeFactors[Length[leftHelicities],Length[rightHelicities],conjugatedTrueQ][ymHelicityAmp@@leftHelicities,ymHelicityAmp@@rightHelicities];

treeTools`ymHelicityAmpBridgeN[ls_List,lbs_List][{leftHelicities_,rightHelicities_},conjugatedTrueQ_:False]:=Block[{bridgeS,cutSpinors},{bridgeS,cutSpinors}=evaluateWithSpinors[{ls,lbs}][{1/s@@Range[Length[leftHelicities]-1],If[TrueQ[conjugatedTrueQ],bcfwCutSpinors[{#1,#2},True],bcfwCutSpinors[{#1,#2}]]&@@(Length/@{leftHelicities,rightHelicities})}];Times@@@Tuples[{(ymHelicityAmpN[Sequence@@Transpose[cutSpinors[[1]]]]@@leftHelicities),(ymHelicityAmpN[Sequence@@Transpose[cutSpinors[[2]]]]@@rightHelicities),{bridgeS}}]];

treeTools`optimallyRotateHelicities[helicityList_List]:=(Sort[({#,RotateLeft[helicityList,#]}&/@Select[Range[Length[helicityList]],Not[SameQ@@RotateLeft[helicityList,#][[{1,-1}]]]&]/.{m->m[1],p->p[1]})//.{{x___,p[a_],p[b_],y___}:>{x,p[a+b],y},{x___,m[a_],m[b_],y___}:>{x,m[a+b],y}},Total[#1[[2,{1,-1},1]]]>=Total[#2[[2,{1,-1},1]]]&][[1]]/.{{a_,{m[q_],r___}}:>-a,{b_,{p[q_],r___}}:>b});


(* ::Subsubsection:: *)
(*Gravity Amplitude "Denominator" Factors Bridging*)


treeTools`grAmpDenominatorsBridge[{{nL_,kL_},{nR_,kR_}}]:=Module[{nPrime,one,int},Block[{n=nL+nR-2,left,right},left=(grAmpDenominators[nL,kL])/.{sb[x___]:>sb@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}]),ab[x___]:>ab@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}]),s[x___]:>s@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}]),asb[x___]:>asb@@({x}/.Join[{p[q__]:>p[q]},{1->one,nL->int}])}//.{head_[one,p[a___,nL,a2___],r___]:>-head[one,p@@Complement[Range[nL],{a,nL,a2,1}],r],head_[int,p[a___,1,a2___],r___]:>-head[int,p@@Complement[Range[nL],{a,nL,a2,1}],r],head_[r___,p[a1___,nL,a2___],one]:>-head[r,p@@Complement[Range[nL],{a1,nL,a2,1}],one],head_[r___,p[a1___,1,a2___],int]:>-head[r,p@@Complement[Range[nL],{a1,nL,a2,1}],int],head_[q___,p[r___,1,s___],t___]:>-head[q,p@@Complement[Range[nL],{r,s,1}],t]}//.If[nL<=nR,{s[q___]:>Which[Length[Intersection[{q},{one,int}]]==0,s[q],Length[Intersection[{q},{one,int}]]==2,s@@Complement[Range[2,nL-1],{q}],MemberQ[{q},one],asb[1,p@@DeleteCases[{q},one],p@@Complement[Range[2,nL-1],{q}],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n],True,asb[1,p@@Complement[Range[2,nL-1],{q}],p@@DeleteCases[{q},int],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]],ab[int,1]->-ab[1,nL-1],ab[1,int]->ab[1,nL-1],ab[x___,one,y___]:>ab[x,1,y],asb[one,y__]:>asb[1,y],sb[x___,one]:>-(sb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),asb[x___,one]:>-(asb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),sb[one,x___]:>sb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n],ab[int,q___]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],ab[q__,int]:>1/asb[1,p@@Range[2,nL-1],n] asb[q,p@@(Range[nL-1]),n]ab[1,nL-1],asb[int,q___]:>1/asb[1,p@@Range[2,nL-1],n] sb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],sb[x___,int]:>-(asb[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[nL-1,1]),sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[nL-1,1],asb[x___,int]:>ab[1,p@@Range[nL-1],Sequence@@Reverse[{x}]]/ab[nL-1,1]},{s[q___]:>Which[Length[Intersection[{q},{one,int}]]==0,s[q],Length[Intersection[{q},{one,int}]]==2,s@@Complement[Range[2,nL-1],{q}],MemberQ[{q},one],asb[1,p@@DeleteCases[{q},one],p@@Complement[Range[2,nL-1],{q}],p@@Range[nL,n-1],n]/asb[1,p@@Range[nL,n-1],n],True,asb[1,p@@Complement[Range[2,nL-1],{q}],p@@DeleteCases[{q},int],p@@Range[nL,n-1],n]/asb[1,p@@Range[nL,n-1],n]],ab[x___,one,y___]:>ab[x,1,y],asb[one,y__]:>asb[1,y],sb[x___,one]:>-(sb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),asb[x___,one]:>-(asb[x,p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n]),sb[one,x___]:>sb[Sequence@@Reverse[{x}],p@@Range[2,nL-1],p@@Range[nL-1],n]/asb[1,p@@Range[2,nL-1],n],ab[int,q___]:>-(1/sb[nL,n])asb[Sequence@@Reverse[{q}],p@@Range[nL,n-1],n],ab[q___,int]:>1/sb[nL,n] asb[q,p@@Range[nL,n-1],n],asb[int,q___]:>-(1/sb[nL,n])ab[Sequence@@Reverse[{q}],p@@Range[nL,n-1],n],sb[int,x___]:>(asb[1,p@@Range[nL,n],x]sb[nL,n])/asb[1,p@@Range[nL,n-1],n],sb[x___,int]:>-((asb[1,p@@Range[nL,n],Sequence@@Reverse[{x}]]sb[nL,n])/asb[1,p@@Range[nL,n-1],n]),asb[x___,int]:>(ab[1,p@@Range[nL,n],Sequence@@Reverse[{x}]]sb[nL,n])/asb[1,p@@Range[nL,n-1],n]}];right=(grAmpDenominators[nR,kR])/.{sb[x___]:>sb@@({x}/.Join[{p[q__]:>p@@({q}/.Thread[Rule[Range[nR],Range[nR]+nL-2]])},Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]]]),ab[x___]:>ab@@({x}/.Join[{p[q__]:>p@@({q}/.Thread[Rule[Range[nR],Range[nR]+nL-2]])},Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]]]),asb[x___]:>asb@@({x}/.Join[{p[q__]:>p@@({q}/.Thread[Rule[Range[nR],Range[nR]+nL-2]])},Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]]]),s[x__]:>s@@({x}/.Thread[Rule[Range[nR],ReplacePart[Range[nR]+nL-2,{1->int,nR->nPrime}]]])}//.{head_[nPrime,p[a___,nL-1,a2___],r___]:>-head[nPrime,p@@Complement[Range[nR-1]+nL-1,{a,nL-1,a2,n}],r],head_[r___,p[a___,nL-1,a2___],nPrime]:>-head[r,p@@Complement[Range[nR-1]+nL-1,{a,nL-1,a2,n}],nPrime],head_[int,p[a___,n,a2___],r___]:>-head[int,p@@Complement[Range[nR-1]+nL-1,{a,nL-1,a2,n}],r],head_[r___,p[a1___,n,a2___],int]:>-head[r,p@@Complement[Range[nR-1]+nL-1,{a1,nL-1,a2,n}],int],head_[q___,p[r___,n,s___],t___]:>-head[q,p@@Complement[Range[nR-1]+nL-1,{r,s,n,nL-1}],t]}//.If[nL<=nR,{s[q___]:>Which[Length[Intersection[{q},{nPrime,int}]]==0,s[q],Length[Intersection[{q},{nPrime,int}]]==2,s@@Complement[Range[nL,n-1],{q}],MemberQ[{q},nPrime],-(asb[1,p@@Range[2,nL-1],p@@Join[Range[nL-1],DeleteCases[{q},nPrime],{n}],p@@DeleteCases[{q},nPrime],n]/asb[1,p@@Range[2,nL-1],n]),True,-(asb[1,p@@Range[2,nL-1],p@@DeleteCases[{q},int],p@@Join[Range[nL-1],DeleteCases[{q},int]],n]/asb[1,p@@Range[2,nL-1],n])],sb[y___,nPrime,x___]:>sb[y,n,x],asb[x___,nPrime]:>asb[x,n](*,ab[x___,nPrime]:>ab[x,p@@Prepend[nL-1,n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n]*),ab[x___,nPrime]:>ab[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n],ab[nPrime,x___]:>-(ab[Sequence@@Reverse[{x}],p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n]),asb[int,q___]:>1/asb[1,p@@Range[2,nL-1],n] sb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],asb[x___,int]:>ab[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[nL-1,1],ab[int,q___]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],ab[q__,int]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[q,p@@Range[nL-1],n]ab[1,nL-1],(*ab[q__,int]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[q,p@@Range[nL-1],n]ab[1,nL-1],*)sb[x___,int]:>-(asb[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[1,nL-1]),sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[1,nL-1],sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[nL-1,1]},{s[q___]:>Which[Length[Intersection[{q},{nPrime,int}]]==0,s[q],Length[Intersection[{q},{nPrime,int}]]==2,s@@Complement[Range[nL,n-1],{q}],MemberQ[{q},nPrime],-(asb[1,p@@Range[nL,n],p@@Join[Range[nL-1],DeleteCases[{q},nPrime],{n}],p@@DeleteCases[{q},nPrime],n]/asb[1,p@@Range[nL,n-1],n]),True,-(asb[1,p@@Range[nL,n],p@@DeleteCases[{q},int],p@@Join[Range[nL-1],DeleteCases[{q},int]],n]/asb[1,p@@Range[nL,n-1],n])],sb[y___,nPrime,x___]:>sb[y,n,x],asb[x___,nPrime]:>asb[x,n](*,ab[x___,nPrime]:>ab[x,p@@Prepend[nL-1,n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n]*),ab[x___,nPrime]:>ab[x,p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n],ab[nPrime,x___]:>-(ab[Sequence@@Reverse[{x}],p@@Prepend[Range[nL-1],n],p@@Range[2,nL-1],1]/asb[1,p@@Range[2,nL-1],n]),ab[int,q___]:>1/sb[nL,n] asb[Sequence@@Reverse[{q}],p@@Range[nL-1],n],ab[q___,int]:>-(1/sb[nL,n])asb[q,p@@Range[nL-1],n],asb[int,q___]:>1/sb[nL,n] sb[Sequence@@Reverse[{q}],p@@Range[nL,n-1],n],sb[int,x___]:>(asb[1,p@@Range[2,nL-1],x]sb[nL,n])/asb[1,p@@Range[nL,n-1],n],sb[x___,int]:>-((asb[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]sb[nL,n])/asb[1,p@@Range[nL,n-1],n]),asb[x___,int]:>ab[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[nL-1,1],ab[int,q___]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[Sequence@@Reverse[{q}],p@@Range[nL-1],n]ab[1,nL-1],ab[q__,int]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[q,p@@Range[nL-1],n]ab[1,nL-1],(*ab[q__,int]:>-(1/asb[1,p@@Range[2,nL-1],n])asb[q,p@@Range[nL-1],n]ab[1,nL-1],*)sb[x___,int]:>-(asb[1,p@@Range[2,nL-1],Sequence@@Reverse[{x}]]/ab[1,nL-1]),sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[1,nL-1],sb[int,x___]:>asb[1,p@@Range[2,nL-1],x]/ab[nL-1,1]}];canonicalizeSpinors[n][Times@@@Tuples[{left,right,{If[OrderedQ[{nL,nR}],s@@Range[nL-1],s@@Range[nL,n]]}}]]]];


(* ::Subsubsection:: *)
(*Positroid: Bridging Labels, and Orientations*)


positroids`BCFWbridge[\[Sigma][leftPositroidLabel__Integer],\[Sigma][rightPositroidLabel__Integer],parityConjugatedBridgeQ_:False]:=Block[{factorized,nL=Length[{leftPositroidLabel}],nR=Length[{rightPositroidLabel}],left,right},left=Mod[{leftPositroidLabel},nL,1];right=Mod[{rightPositroidLabel},nR,1]+nL-2;factorized=Join[(left[[1;;-2]]/.{nL->right[[1]]}),(right[[2;;-1]]/.{nL-1->left[[-1]]})];decoratePermutation[\[Sigma]@@(factorized/.If[Not[TrueQ[parityConjugatedBridgeQ]],Thread[Rule[{nL+nR-2,1},{1,nL+nR-2}]],Thread[Rule[factorized[[{1,-1}]],factorized[[{-1,1}]]]]])]];

positroids`orientedBridge[\[Sigma][leftPerm__Integer],\[Sigma][rightPerm__Integer],{a_,b_},conjugatedTrueQ_:False]:=Block[{n=Length[{leftPerm}]+Length[{rightPerm}]-2,leftChain=positroids`bridgeChain[\[Sigma][leftPerm]][[1]],rightChain=positroids`bridgeChain[\[Sigma][rightPerm]][[1]],mergedChain,leftAnchor,mergedFaces},leftAnchor=leftChain[[-1,1]];mergedChain=(Join[leftChain[[1;;-2]],(rightChain/.{\[Tau][x__]:>\[Tau]@@({x}/.{1->leftAnchor,q_Integer:>q+Length[{leftPerm}]-2})})]);mergedFaces=positroids`bridgeChainToFaceLabels[mergedChain];mergedFaces=Sort/@((If[Not[TrueQ[conjugatedTrueQ]],Prepend[(mergedFaces/.Thread[Rule[{1,n},{n,1}]]),(mergedFaces[[-1]])],Prepend[mergedFaces,(mergedFaces[[-1]]/.{{leftPerm}[[1]]->Mod[{rightPerm}[[-1]],Length[{rightPerm}],1]+Length[{leftPerm}]-2,Mod[{rightPerm}[[-1]],Length[{rightPerm}],1]+Length[{leftPerm}]-2->{leftPerm}[[1]]})]]/.Thread[Rule[Range[n],RotateLeft[Range[n],a]]]))];


(* ::Section:: *)
(*Ordered (Planar) Partial Amplitudes of (pure) sYM*)


treeTools`functionTypes["F"]="Ordered/Planar Partial Amplitudes of pure sYM";


(* ::Subsection:: *)
(*Bases of Partial Amplitudes and Amplitude Identities*)


treeTools`functionTypes["F",1]="Ordered Partial Amplitudes: Bases, Identities, and Reduction";
treeTools`functionNames["F",1]={"amp[legOrdering__]","",
"cyclicAmps[n_]","cyclicAmpReductionRule","",
"dihedralAmps[n_]","dihedralAmpReductionRule","",
"kkBasisAmps[n_]","u1DecouplingIdentity[n_]",
"egKKIdentity[n_]","kkIdentities[n_]","kkAmpReductionRule","",
"bcjBasisAmps[n_]","bcjIdentitySeed[n_]","egBCJIdentity[n_]","bcjIdentities[n_]","bcjAmpReductionRule","","kltBasisAmpsAlpha[n_]","kltBasisAmpsBeta[n_]","kltKernelInverse[n_]",
"kltKernelInverse[{\[Alpha]___amp},{\[Beta]___amp}]","kltKernel[n_]","kltKernel[{\[Alpha]___amp},{\[Beta]___amp}]"};


(* ::Subsubsection:: *)
(*Cyclic and Dihedral Bases and Relations*)


cyclicAmps[n_]:=permuteLegs[#][amp@@Range[n]]&/@Permutations[Range[2,n]];

cyclicAmpReductionRule={amp[x___,1,y___]:>amp[1,y,x]};

dihedralAmps[n_]:=permuteLegs[#][amp@@Range[n]]&/@Select[Permutations[Range[2,n]],OrderedQ[#[[{1,-1}]]]&];

dihedralAmpReductionRule={amp[x___,1,y___]:>If[OrderedQ[{y,x}[[{1,-1}]]],amp[1,y,x],Power[-1,Length[{x,y}]+1]amp[1,##]&@@Reverse[{y,x}]]};


(* ::Subsubsection:: *)
(*U(1) Decoupling and KK Relations and Bases*)


kkBasisAmps[n_]:=permuteLegs[#][amp@@Range[n]]&/@Permutations[Range[2,n-1]];

u1DecouplingIdentity[n_Integer]/;n>=4:=amp@@@(Prepend[#,1]&/@Partition[Range[2,n],n-1,1,1]);

egKKIdentity[n_Integer]/;n>=4:=(Prepend[If[Head[#2]===Plus,List@@(-#2),{-#2}],#1]&@@(RandomChoice[dihedralAmps[n]]/.{{},kkAmpReductionRule}));

kkIdentities[n_Integer]/;n>=4:=complement[dihedralAmps[n],kkBasisAmps[n]]/.{amp[1,\[Alpha]___,n,\[Beta]___]:>Prepend[(Power[-1,Length[{\[Beta]}]+1](amp[1,##,n]&@@@shuffle[{\[Alpha]},Reverse@{\[Beta]}])),amp[1,\[Alpha],n,\[Beta]]]};

kkAmpReductionRule={amp[x___,1,y___]:>Block[{legs,sign,n=Max[{y,x}],slot,\[Alpha],\[Beta]},{legs,sign}=If[OrderedQ[{y,x}[[{1,-1}]]],{{y,x},1},{Reverse[{y,x}],Power[-1,Length[{x,y}]-1]}];slot=Flatten[Position[legs,n]][[1]];\[Alpha]=legs[[1;;slot-1]];\[Beta]=legs[[slot+1;;-1]];Power[-1,Length[\[Beta]]]sign*Total[amp[1,##,n]&@@@shuffle[\[Alpha],Reverse[\[Beta]]]]]};


(* ::Subsubsection:: *)
(*KLT Relations and BCJ*)


bcjBasisAmps[n_]:=permuteLegs[#][amp@@Range[n]]&/@Permutations[Range[2,n-2]];

bcjIdentitySeed[n_]:=Times@@@({Total[s[#,n-1]&/@Range[#]],amp[1,Sequence@@Insert[Range[2,n-2],n-1,#],n]}&/@Range[n-2]);

bcjIdentities[n_Integer]/;n>=4:=permuteLegs[#][bcjIdentitySeed[n]]&/@(Join@@(Function[{a},Insert[a,n-1,#]&/@Range[n-3]]/@Permutations[Range[2,n-2]]));

egBCJIdentity[n_Integer]/;n>=4:=RandomChoice[bcjIdentities[n]];

bcjAmpReductionRule={amp[x__]:>If[{x}[[{1,-2,-1}]]==={1,Length[{x}]-1,Length[{x}]},amp[x],((kltKernelInverse[{x},List@@#]&/@kltBasisAmpsBeta[Length[{x}]]) . Transpose[kltKernel[Length[{x}]]] . kltBasisAmpsAlpha[Length[{x}]])]};

kltBasisAmpsAlpha[n_Integer]/;n>=4:=(amp[1,Sequence@@#1,Sequence@@#2,n-1,n]&@@@Join@@(Tuples[{Permutations[#+1],Permutations[Complement[Range[n-3],#]+1]}]&/@Subsets[Range[n-3],{Ceiling[(n-3)/2]}]));

kltBasisAmpsBeta[n_Integer]/;n>=4:=amp[1,Sequence@@#1,n,Sequence@@#2,n-1]&@@@Join@@(Tuples[{Permutations[#+1],Permutations[Complement[Range[n-3],#]+1]}]&/@Subsets[Range[n-3],{Ceiling[(n-3)/2]}]);


kltKernelInverse[n_Integer]:=kltKernelInverse[n]=Module[{slotRule=Thread[Rule[#,Range[Length[#]]]]&@(kltBasisAmpsBeta[n]),mat},mat=Normal[SparseArray[Rule@@@#,{Length[#]}]&/@((Transpose[{slotRule[[All,1]],treeTools`kltKernelInverseSeed[n]}]/.{amp[x__]:>amp@@({x}/.Thread[Rule[Range[n],#]]),s[x__]:>s@@Sort[{x}/.Thread[Rule[Range[n],#]]]}&/@(List@@@kltBasisAmpsAlpha[n]))/.slotRule)];Set[kltKernelInverse[#1[[1]],#1[[2]]],#2]&@@@Transpose[{Tuples[{List@@@kltBasisAmpsAlpha[n],List@@@kltBasisAmpsBeta[n]}],Flatten[mat]}];mat];
kltKernelInverse[{\[Alpha]__Integer},{\[Beta]__Integer}]/;(Length[{\[Alpha]}]==Length[{\[Beta]}]):=If[Not[OrderedQ[{{\[Alpha]},{\[Beta]}}]],kltKernelInverse@@Sort[{{\[Alpha]},{\[Beta]}}],If[{\[Alpha]}===Range[Length[{\[Alpha]}]],Set[kltKernelInverse[{\[Alpha]},{\[Beta]}],Block[{n=Length[{\[Alpha]}],denList=Join[Partition[{\[Alpha]},2,1,1],Partition[{\[Beta]},2,1,1]],subsets},subsets=Sort/@Select[{\[Alpha]}[[#]]&/@treeTools`pSets[n],Function[{q},(Count[(MemberQ[q,#]&/@#&/@denList),{True,True}])==2Length[q]-2]];Power[-1,Length[Select[Partition[Ordering[{\[Beta]}][[{\[Alpha]}]],2,1,1],Not[OrderedQ[#]]&]]+1]Total[1/Times@@@(s@@@#&/@Select[Subsets[subsets,{n-3}],treeTools`separatedQ[n][#]&])]]],(kltKernelInverse[Range[Length[{\[Alpha]}]],Ordering[{\[Alpha]}][[{\[Beta]}]]]/.{s[x__]:>s@@Sort[{x}/.Thread[Rule[Range[Length[{\[Alpha]}]],{\[Alpha]}]]]})]];
kltKernelInverse[amp[\[Alpha]__Integer],amp[\[Beta]__Integer]]:=kltKernelInverse[{\[Alpha]},{\[Beta]}];
kltKernelInverse[{\[Alpha]__amp},{\[Beta]__amp}]:=Normal[SparseArray[{a_,b_}:>kltKernelInverse[{\[Alpha]}[[a]],{\[Beta]}[[b]]],Length/@{{\[Alpha]},{\[Beta]}}]];

kltKernel[n_Integer]:=kltKernel[n]=Block[{seed=treeTools`kltKernelSeedTerms[n],imageBasis=kltBasisAmpsBeta[n]},Normal[SparseArray[#,{Length[imageBasis]}]]&/@(Rule@@@#&/@((seed/.({s[x__]:>s@@({x}/.Thread[Rule[Range[n],{##}]]),amp[x__]:>amp@@({x}/.Thread[Rule[Range[n],{##}]])}&@@@(List@@@kltBasisAmpsAlpha[n])))/.Thread[Rule[imageBasis,Range[Length[imageBasis]]]]))];
kltKernel[{\[Alpha]__amp},{\[Beta]__amp}]:=kltKernel[{\[Alpha]},{\[Beta]}]=Inverse[kltKernelInverse[{\[Alpha]},{\[Beta]}]];


treeTools`kltKernelInverseSeed[n_Integer]:=treeTools`kltKernelInverseSeed[n]=Block[{betaBasis=List@@@kltBasisAmpsBeta[n]},kltKernelInverse[Range[n],#]&/@betaBasis];
treeTools`kltKernelSeedTerms[n_Integer]:=treeTools`kltKernelSeedTerms[n]=(Function[{permA,permB},{amp@@Join[{1},permA,{n},permB,{n-1}],-((s[1,First[permA]]Times@@(Function[{slot},s[1,permA[[slot]]]+Total[s[#,permA[[slot]]]&/@Select[permA[[1;;slot-1]],#<permA[[slot]]&]]]/@Range[2,Length[permA]]))If[Length[permB]==0,1,(s[Last[permB],n-1]Times@@(Function[{slot},s[permB[[slot]],n-1]+Total[s[permB[[slot]],#]&/@Select[permB[[slot+1;;-1]],#>permB[[slot]]&]]]/@Range[Length[permB]-1]))])}]@@@Tuples[Permutations/@{Range[2,Floor[n/2]],Range[Floor[n/2]+1,n-2]}]);


(* ::Subsubsection:: *)
(*Internal: for KLT (and also CHY)*)


treeTools`separatedQ[n_Integer][sList_]:=Which[Length[sList]==1,True,Length[sList]>2,And@@(treeTools`separatedQ[n]/@Subsets[sList,{2}]),True,(Min[Length/@(Intersection@@@Tuples[{{#1,Complement[Range[n],#1]},{#2,Complement[Range[n],#2]}}])]==0)&@@sList];
treeTools`pSets[n_Integer]:=Block[{initial=Prepend[#,1]&/@Subsets[Range[2,n],{1,n-3}]},Sort[{#,Complement[Range[n],#]}][[1]]&/@initial];


(* ::Subsection:: *)
(*Analytic Expressions for superAmplitudes*)


treeTools`functionTypes["F",2]="Analytic Expressions for Ordered superAmplitudes in sYM";
treeTools`functionNames["F",2]={"ymAmp[n_,k_,legOrdering_:]","ymAmpRandom[n_,k_,legOrdering_:]",
"","parkeTaylorAmp[n_]","parkeTaylorAmpBar[n_]","",
"ymTwistorAmp[n_,k_]","ymTwistorAmpRandom[n_,k_]","",
"ymSuperTwistorAmp[n_,k_]","ymSuperTwistorAmpRandom[n_,k_]"};


(* ::Subsubsection:: *)
(*Parke-Taylor superAmplitudes*)


parkeTaylorAmp[n_Integer]:=Power[Times@@ab@@@Partition[Range[n],2,1,1],-1];

parkeTaylorAmpBar[4]=parkeTaylorAmp[4];
parkeTaylorAmpBar[n_]/;n>=5:=superFunction[1/Times@@sb@@@Partition[Range[n],2,1,1],Join[{Normal[SparseArray[((#1->sb[#2,#3]/ab[1,2]&@@@Partition[{3,4,5},3,1,1])),{n}]]},(Normal[SparseArray[{#1->sb[#2,#3]/sb[#1,#2],#2->sb[#3,#1]/sb[#1,#2],#3->1}&@@#,{n}]]&/@(Partition[Range[n],3,1,1][[4;;n-2]]))]];


(* ::Subsubsection:: *)
(*Yang-Mills superAmplitudes in Spinor Space*)


treeTools`resetStoredYMamplitudes:=
(ClearAll[ymAmp];
ymAmp[n_Integer,k_Integer]/;MemberQ[Range@@Sort[{0,n-4}],k]:=ymAmp[n,k]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymAmp["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Which[k===0,{parkeTaylorAmp[n]},n===k+4&&n>4,{parkeTaylorAmpBar[n]},True,(Block[{ephR,exprn=ymTwistorAmp[n,k]},If[n<=10,(ephR[x___]:=ephR[x]=Signature[Ordering[{x}]]treeTools`spinorFiveBracket[n][Sort[{x}]];exprn=canonicalizeSpinors[n][((exprn/.R[x__]:>ephR[x])//.superFunctionProductRule)/.{superFunction[fcn_,cMatrix_]:>superFunction[fcn/Times@@ab@@@Partition[Range[n],2,1,1],cMatrix]}]/.{-sb[x_,y_]:>sb[y,x]}),(toSuperSpinorFunctions[n,True][exprn])]])]);
ymAmp[n_Integer,k_Integer,{legOrdering__Integer}]/;MemberQ[Range[0,n-4],k]:=ymAmp[n,k,{legOrdering}]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymAmp["<>StringJoin@@Riffle[ToString/@{n,k},","]<>",{"<>StringJoin@@Riffle[ToString/@{legOrdering},","]<>"}]",Row[{Style["ymAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k,{legOrdering}]}]}]];Module[{fullPerm=(Range[n]/.Thread[Rule[Sort[{legOrdering}],{legOrdering}]])},((permuteLegs[fullPerm][ymAmp[n,k]]))]);
);treeTools`resetStoredYMamplitudes

ymAmpRandom[n_Integer,k_Integer]:=Which[k===0,{parkeTaylorAmp[n]},n===k+4&&n>4,{parkeTaylorAmpBar[n]},True,(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymAmpRandom["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymAmpRandom[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Module[{ephR,exprn=ymTwistorAmpRandom[n,k]},If[n<=8,(Unprotect[R];ClearAll[R];R[x__]:=R[x]=Signature[Ordering[{x}]]ephR@@Sort[{x}];exprn=exprn;ClearAll[R];Protect[R];ephR[x___]:=treeTools`spinorFiveBracket[n][{x}];exprn=exprn//.superFunctionProductRule/.{superFunction[fcn_,cMatrix_]:>superFunction[fcn/Times@@ab@@@Partition[Range[n],2,1,1],cMatrix]}),(toSuperSpinorFunctions[n,If[n<=10,False,True]][exprn])]])];


(* ::Subsubsection:: *)
(*Yang-Mills superAmplitudes in Twistor Space*)


ymTwistorAmp[n_Integer,k_Integer]:=ymTwistorAmp[n,k]=Which[(k==0||n==3),{1},k<0||k>n-4,{0},True,(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymTwistorAmp["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymTwistorAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Join[(Join@@(treeTools`twistorBCFWbridge[##][Range[n]]&@@@(bcfwPartitions[n,k])))])];
ymTwistorAmpRandom[n_Integer,k_Integer]:=Which[(k==0||n==3),{1},k<0||k>n-4,{0},True,(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymTwistorAmpRandom["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymTwistorAmpRandom[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Block[{twistorLabels=RotateLeft[Range[n],RandomInteger[n-1]],parity={False,True}[[RandomInteger[{1,2}]]]},Join[(Join@@(treeTools`twistorBCFWbridge[##,True,parity][twistorLabels]&@@@(bcfwPartitions[n,k,parity])))]])];

ymSuperTwistorAmp[n_,k_]:=ymSuperTwistorAmp[n,k]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymSuperTwistorAmp["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymSuperTwistorAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];toSuperTwistorFunctions[n,True,False][ymTwistorAmp[n,k]]);
ymSuperTwistorAmpRandom[n_,k_]:=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymSuperTwistorAmpRandom["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymSuperTwistorAmpRandom[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];toSuperTwistorFunctions[n,False,False][ymTwistorAmpRandom[n,k]]);


(*This just flips the denominators of expressions so that any spurious poles give zero as opposed to infinity*)
treeTools`ymSuperTwistorAmpFlipped[n_,k_]:=treeTools`ymSuperTwistorAmpFlipped[n,k]=toSuperTwistorFunctions[n,False,True][ymTwistorAmp[n,k]];
treeTools`ymSuperTwistorAmpFlippedRandom[n_,k_]:=toSuperTwistorFunctions[n,False,True][ymTwistorAmpRandom[n,k]];


(* ::Subsection:: *)
(*Numeric Expressions for superAmplitudes*)


treeTools`functionTypes["F",3]="Numeric Expressions for Ordered superAmplitudes in sYM";
treeTools`functionNames["F",3]={
"ymAmpN[n_,k_,legOrdering_:]","ymAmpRandomN[n_,k_,legOrdering_:]"};


ymAmpN[n_Integer,k_Integer]/;((n==Length[Ls])&&MemberQ[Range@@Sort[{0,n-4}],k]):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymAmpN["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]]&&Not[Head[treeTools`ymAmpReferenceN[n,k]]===treeTools`ymAmpReferenceN],treeTools`ymAmpReferenceN[n,k],If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],Set[treeTools`ymAmpReferenceN[n,k],#],#]&@Which[k==0,If[n==3,If[Det[Ls[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Ls,2,1,1],-1]}],{Power[Times@@Det/@Partition[Ls,2,1,1],-1]}],k==n-4,If[n==3,If[Det[Lbs[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Lbs,2,1,1],-1]}],{evaluate[parkeTaylorAmpBar[n]]}],True,Block[{nAmp0=evaluate[treeTools`ymSuperTwistorAmpFlipped[n,k]],nMat,prefactor},If[Count[nAmp0,superFunction[0,x_],{0,\[Infinity]}]>0,Print["The specified kinematics encounter a spurious (or physical) pole"],nMat=(Array[If[#1>#2>1,Det[Ls[[{#2,#1}]]],0]&,{n,n}]);prefactor=1/Times@@Det/@Partition[Ls,2,1,1];(( nAmp0/.{superFunction[f_,cMatrix_]:>superFunction[prefactor/f,cMatrix . nMat]}))]]]]);
ymAmpN[n_Integer,k_Integer,{legOrdering__Integer}]/;((n==Length[Ls])&&MemberQ[Range@@Sort[{0,n-4}],k]):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymAmpN["<>StringJoin@@Riffle[ToString/@{n,k},","]<>",{"<>StringJoin@@Riffle[ToString/@{legOrdering},","]<>"}]",Row[{Style["ymAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k,{legOrdering}]}]}]];Module[{fullPerm=(Range[n]/.Thread[Rule[Sort[{legOrdering}],{legOrdering}]])},If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]]&&Not[Head[treeTools`ymAmpReferenceN[n,k,fullPerm]]===treeTools`ymAmpReferenceN],treeTools`ymAmpReferenceN[n,k,fullPerm],If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],Set[treeTools`ymAmpReferenceN[n,k,fullPerm],#],#]&@Which[k==0,If[n==3,If[Det[Ls[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Ls[[fullPerm]],2,1,1],-1]}],{Power[Times@@Det/@Partition[Ls[[fullPerm]],2,1,1],-1]}],k==n-4,If[n==3,If[Det[Lbs[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Lbs[[fullPerm]],2,1,1],-1]}],Quiet[{evaluatePermuted[fullPerm][parkeTaylorAmpBar[n]]}]],True,Block[{nAmp0=Quiet[evaluatePermuted[fullPerm][treeTools`ymSuperTwistorAmpFlipped[n,k]]],nMat,prefactor},If[Count[nAmp0,superFunction[0,x_],{0,\[Infinity]}]>0,Print["The specified kinematics encounter a spurious (or physical) pole"],nMat=(Array[If[#1>#2>1,Det[Ls[[fullPerm[[{#2,#1}]]]]],0]&,{n,n}]);prefactor=1/Times@@Det/@Partition[Ls[[fullPerm]],2,1,1];(( nAmp0/.{superFunction[f_,cMatrix_]:>superFunction[prefactor/f,(cMatrix[[All,fullPerm]] . nMat)[[All,Ordering[fullPerm]]]]}))]]]]]);

ymAmpRandomN[n_Integer,k_Integer]/;((n==Length[Ls])&&MemberQ[Range@@Sort[{0,n-4}],k]):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymAmpRandomN["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["ymAmpRandomN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Which[k==0,If[n==3,If[Det[Ls[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Ls,2,1,1],-1]}],{Power[Times@@Det/@Partition[Ls,2,1,1],-1]}],k==n-4,If[n==3,If[Det[Lbs[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Lbs,2,1,1],-1]}],{evaluate[parkeTaylorAmpBar[n]]}],True,Block[{nAmp0=evaluate[treeTools`ymSuperTwistorAmpFlippedRandom[n,k]],nMat,prefactor},If[Count[nAmp0,superFunction[0,x_],{0,\[Infinity]}]>0,Print["The specified kinematics encounter a spurious (or physical) pole"],nMat=(Array[If[#1>#2>1,Det[Ls[[{#2,#1}]]],0]&,{n,n}]);prefactor=1/Times@@Det/@Partition[Ls,2,1,1];(( nAmp0/.{superFunction[f_,cMatrix_]:>superFunction[prefactor/f,cMatrix . nMat]}))]]]);
ymAmpRandomN[n_Integer,k_Integer,{legOrdering__Integer}]/;((n==Length[Ls])&&MemberQ[Range@@Sort[{0,n-4}],k]):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymAmpN["<>StringJoin@@Riffle[ToString/@{n,k},","]<>",{"<>StringJoin@@Riffle[ToString/@{legOrdering},","]<>"}]",Row[{Style["ymAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k,{legOrdering}]}]}]];Module[{fullPerm=(Range[n]/.Thread[Rule[Sort[{legOrdering}],{legOrdering}]])},Which[k==0,If[n==3,If[Det[Ls[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Ls[[fullPerm]],2,1,1],-1]}],{Power[Times@@Det/@Partition[Ls[[fullPerm]],2,1,1],-1]}],k==n-4,If[n==3,If[Det[Lbs[[1;;2]]]==0,{0},{Power[Times@@Det/@Partition[Lbs,2,1,1],-1]}],Quiet[{evaluatePermuted[fullPerm][parkeTaylorAmpBar[n]]}]],True,Block[{nAmp0=Quiet[evaluatePermuted[fullPerm][treeTools`ymSuperTwistorAmpFlippedRandom[n,k]]],nMat,prefactor},If[Count[nAmp0,superFunction[0,x_],{0,\[Infinity]}]>0,Print["The specified kinematics encounter a spurious (or physical) pole"],nMat=(Array[If[#1>#2>1,Det[Ls[[fullPerm[[{#2,#1}]]]]],0]&,{n,n}]);prefactor=1/Times@@Det/@Partition[Ls[[fullPerm]],2,1,1];(( nAmp0/.{superFunction[f_,cMatrix_]:>superFunction[prefactor/f,(cMatrix[[All,fullPerm]] . nMat)[[All,Ordering[fullPerm]]]]}))]]]]);


(* ::Subsection:: *)
(*Analytic Expressions for Component Amplitudes*)


treeTools`functionTypes["F",4]="Analytic Component Amplitudes of sYM";
treeTools`functionNames["F",4]={
"ymHelicityAmp[gluonHelicities__]","helicityAmp[gluonHelicities__]","",
"componentAmpTerms[stateList__,legOrdering_:{}]","componentAmp[stateList__,legOrdering_:{}]"};


(* ::Subsubsection:: *)
(*Helicity Amplitudes Component Recursion*)


ymHelicityAmp[{helList__}]:=ymHelicityAmp[helList];
ymHelicityAmp[helList__]/;(Complement[{helList},{m,p}]==={}):=ymHelicityAmp[helList]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymHelicityAmp["<>StringJoin@@Riffle[ToString/@{helList},","]<>"]",Row[{Style["ymHelicityAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[helList]}]}]];Which[Count[{helList},m]==2,{Power[ab@@Flatten[Position[{helList},m]],4]/Times@@ab@@@Partition[Range[Length[{helList}]],2,1,1]},Count[{helList},p]==2,{Power[sb@@Flatten[Position[{helList},p]],4]/Times@@sb@@@Partition[Range[Length[{helList}]],2,1,1]},Not[{helList}[[{1,-1}]]==={p,m}],(Join@@(treeTools`ymHelicityAmpBridge/@bcfwPartitions[{helList}])),True,(Join@@(treeTools`ymHelicityAmpBridge[#,True]&/@bcfwPartitions[{helList}]))]);

(*Basically just a renaming of above, but gives either YM or GR amps as needed WITHOUT any optimized rotations(!!)*)
helicityAmp[{cmptList__}]:=helicityAmp[cmptList];
helicityAmp[cmptList__]/;(Complement[{cmptList},{m,p}]==={})||(Complement[{cmptList},{mm,pp}]==={}):=If[(DeleteDuplicates[Sort[{helList}]]=={m,p}),Total[ymHelicityAmp[cmptList]],Total[grHelicityAmp[cmptList]]];


(* ::Subsubsection:: *)
(*General Components (Picking the Right Formulation as Needed)*)


(*Gives same as component[cmptList][ymAmp[]] for generic components;
For HELICITY components of YM, it rotates the arguments only mildly cleverly to get a often shorter expression*)
componentAmpTerms[{cmptList__}]/;legalComponentStatesQ[{cmptList}]:=componentAmpTerms[cmptList];
(*componentAmpTerms[{cmptList__},{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]===Length[{cmptList}])):=Module[{sign=Times@@(Signature[{perm}[[#]]]&/@stateListToMinorList[{cmptList}[[{perm}]]])},sign(permuteLegs[{perm}][componentAmpTerms[{cmptList}[[{perm}]]]])];
componentAmpTerms[cmptList__,{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]===Length[{cmptList}])):=componentAmpTerms[{cmptList},{perm}];
componentAmpTerms[cmptList__]/;legalComponentStatesQ[{cmptList}]:=Block[{n=Length[{cmptList}],k=nmhvDegree[cmptList]},If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"componentAmpTerms["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmpTerms[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}]];If[treeTools`legalYMstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={m,p},Set[componentAmpTerms[cmptList],(*ymHelicityAmp[cmptList]*)Block[{rot=treeTools`optimallyRotateHelicities[{cmptList}]},(permuteLegs[RotateLeft[Range[Length[{cmptList}]],Abs@rot]][ymHelicityAmp[RotateLeft[({cmptList}/.If[rot<0,{p->m,m->p},{}]),Abs[rot]]]]/.If[rot<0,parityConjugationRule,{}])]],Set[componentAmpTerms[cmptList],component[cmptList][ymAmp[n,k]]]],If[treeTools`legalGRstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={mm,pp},Set[componentAmpTerms[cmptList],grHelicityAmp[cmptList]],Set[componentAmpTerms[cmptList],component[cmptList][grAmp[n,k]]]],Print["There is something wrong with this list of components."];{}]]];*)
componentAmpTerms[{cmptList__},{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]===Length[{cmptList}])):=Module[{sign=Times@@(Signature[{perm}[[#]]]&/@stateListToMinorList[{cmptList}[[{perm}]]])},sign(permuteLegs[{perm}][componentAmpTerms[{cmptList}[[{perm}]]]])];
componentAmpTerms[cmptList__,{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]===Length[{cmptList}])):=componentAmpTerms[{cmptList},{perm}];
componentAmpTerms[cmptList__]/;legalComponentStatesQ[{cmptList}]:=Block[{n=Length[{cmptList}],k=nmhvDegree[cmptList]},If[Not[MemberQ[Range@@Sort[{0,n-4}],k]],{0},(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"componentAmpTerms["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmpTerms[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}]];If[treeTools`legalYMstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={m,p},Set[componentAmpTerms[cmptList],(*ymHelicityAmp[cmptList]*)Block[{rot=treeTools`optimallyRotateHelicities[{cmptList}]},(permuteLegs[RotateLeft[Range[Length[{cmptList}]],Abs@rot]][ymHelicityAmp[RotateLeft[({cmptList}/.If[rot<0,{p->m,m->p},{}]),Abs[rot]]]]/.If[rot<0,parityConjugationRule,{}])]],Set[componentAmpTerms[cmptList],component[cmptList][ymAmp[n,k]]]],If[treeTools`legalGRstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={mm,pp},Set[componentAmpTerms[cmptList],grHelicityAmp[cmptList]],Set[componentAmpTerms[cmptList],component[cmptList][grAmp[n,k]]]],Print["There is something wrong with this list of components."];{}]])]];


componentAmp[cmptList__,{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]===Length[{cmptList}])):=(Set[treeTools`timingHead,{"componentAmp["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}];Total[componentAmpTerms[cmptList,{perm}]]);
componentAmp[{cmptList__}]:=componentAmp[cmptList];
componentAmp[{cmptList__},{perm__Integer}]:=componentAmp[cmptList,{perm}];
componentAmp[cmptList__]/;legalComponentStatesQ[{cmptList}]:=(Set[treeTools`timingHead,{"componentAmp["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}];Total[componentAmpTerms[cmptList]]);


(* ::Subsubsection:: *)
(*Covariant, Manifestly Color-Kinematic Representations of Gluon Amplitudes (via CHY)*)


treeTools`functionTypes["F",5]="Local, Covariant Forms of Helicity Partial Amplitudes (via CHY)";
treeTools`functionNames["F",5]={
"ymLocalCovariantAmp[n_]","ymLocalCovariantAmpData[n_]"};


ymLocalCovariantAmp[n_]:=Total[#1]/.Rule@@@#2&@@ymLocalCovariantAmpData[n];
ymLocalCovariantAmpData[n_Integer]/;n>=3:=ymLocalCovariantAmpData[n]=(Set[treeTools`timingHead,{"ymLocalCovariantAmp["<>ToString[n]<>"]",Row[{Style["ymLocalCovariantAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n]}]}];{((num/@(Range[(n-2)!])*(Power[-1,Floor[n/2]]kltKernelInverse[Range[n],{1,##,n}]&@@@Permutations[Range[2,n-1]]))/.{s[x__]:>s@@(Sort[{Sort[{x}],Complement[Range[n],{x}]}][[1]])}),Transpose[{num/@(Range[(n-2)!]),chyPsiPfaffianPrimeInCycles[n][[All,1]]}]});


(* ::Subsection:: *)
(*Numeric Expressions for Component Amplitudes*)


treeTools`functionTypes["F",6]="Numerically Determined Component Amplitudes of sYM";
treeTools`functionNames["F",6]={
"ymHelicityAmpN[gluonHelicities__]","helicityAmpN[gluonHelicities__]","",
"componentAmpTermsN[stateList__,legOrdering_:{}]","componentAmpN[stateList__,legOrdering_:{}]"};


(* ::Subsubsection:: *)
(*Purely Numerical Recursion for Gluon Helicity Amplitudes*)


ymHelicityAmpN[ls_List,lbs_List][helList__]/;(Complement[{helList},{m,p}]==={})&&Length[ls]==Length[{helList}]:=Which[Count[{helList},m]==2,{Power[Det[ls[[Flatten[Position[{helList},m]]]]],4]/Times@@Det/@Partition[ls,2,1,1]},Count[{helList},p]==2,{Power[Det[lbs[[Flatten[Position[{helList},p]]]]],4]/Times@@Det/@Partition[lbs,2,1,1]},Not[{helList}[[{1,-1}]]==={p,m}],Join@@(treeTools`ymHelicityAmpBridgeN[ls,lbs]/@bcfwPartitions[{helList}]),True,Join@@(treeTools`ymHelicityAmpBridgeN[ls,lbs][#,True]&/@bcfwPartitions[{helList}])];
ymHelicityAmpN[{helList__}]:=ymHelicityAmpN[helList];
ymHelicityAmpN[helList__,{perm__Integer}]/;(Complement[{helList},{m,p}]==={})&&Length[{helList}]==Length[Ls]==Length[{perm}]:=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymHelicityAmpN["<>StringJoin@@Riffle[ToString/@{helList},","]<>"]",Row[{Style["ymHelicityAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[helList]}]}]];ymHelicityAmpN[Ls[[{perm}]],Lbs[[{perm}]]][Sequence@@{helList}[[{perm}]]]);
ymHelicityAmpN[{helList__},{perm__Integer}]:=ymHelicityAmpN[helList,{perm}];
ymHelicityAmpN[helList__]/;(Complement[{helList},{m,p}]==={})&&Length[{helList}]==Length[Ls]:=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"ymHelicityAmpN["<>StringJoin@@Riffle[ToString/@{helList},","]<>"]",Row[{Style["ymHelicityAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[helList]}]}]];ymHelicityAmpN[Ls,Lbs][helList]);


helicityAmpN[{cmptList__}]:=helicityAmpN[cmptList];
helicityAmpN[cmptList__]/;(MemberQ[{{mm,pp},{m,p}},Sort[DeleteDuplicates[{cmptList}]]]&&Length[{cmptList}])==Length[Ls]:=If[(DeleteDuplicates[Sort[{cmptList}]]=={m,p}),Total[ymHelicityAmpN[cmptList]],Total[grHelicityAmpN[cmptList]]];


(* ::Subsubsection:: *)
(*General Components (Picking the Right Formulation as Needed)*)


componentAmpTermsN[{cmptList__},{perm__Integer}]:=componentAmpTermsN[cmptList,{perm}];
componentAmpTermsN[cmptList__,{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]==Length[{cmptList}]==Length[Ls])):=Block[{n=Length[{cmptList}],k=nmhvDegree[{cmptList}]},If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"componentAmpTermsN["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmpTermsN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}]];If[treeTools`legalYMstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={m,p},ymHelicityAmpN[cmptList,{perm}],component[cmptList][ymAmpN[n,k,{perm}]]],If[treeTools`legalGRstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={mm,pp},grHelicityAmpN[cmptList],component[cmptList][grAmpN[n,k]]],Print["There is something wrong with this list of components."];{}]]];
componentAmpTermsN[{cmptList__}]/;legalComponentStatesQ[{cmptList}]:=componentAmpTermsN[cmptList];
componentAmpTermsN[cmptList__]/;legalComponentStatesQ[{cmptList}]&&Length[{cmptList}]==Length[Ls]:=Block[{n=Length[{cmptList}],k=nmhvDegree[{cmptList}]},If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"componentAmpTermsN["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmpTermsN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}]];If[treeTools`legalYMstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={m,p},ymHelicityAmpN[cmptList],component[cmptList][ymAmpN[n,k]]],If[treeTools`legalGRstatesQ[{cmptList}],If[Sort[DeleteDuplicates[{cmptList}]]==={mm,pp},grHelicityAmpN[cmptList],component[cmptList][grAmpN[n,k]]],Print["There is something wrong with this list of components."];{}]]];


componentAmpN[{cmptList__},{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]==Length[{cmptList}]==Length[Ls])):=componentAmpN[cmptList,{perm}];
componentAmpN[cmptList__,{perm__Integer}]/;(legalComponentStatesQ[{cmptList}]&&(Length[{perm}]==Length[{cmptList}]==Length[Ls])):=(Set[treeTools`timingHead,{"componentAmpN["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}];If[Head[#]===List,Total[#],#]&@componentAmpTermsN[cmptList,{perm}]);
componentAmpN[{cmptList__}]:=componentAmpN[cmptList];
componentAmpN[cmptList__]/;legalComponentStatesQ[{cmptList}]:=(Set[treeTools`timingHead,{"componentAmpN["<>StringJoin@@Riffle[ToString/@{cmptList},","]<>"]",Row[{Style["componentAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[cmptList]}]}];If[Head[#]===List,Total[#],#]&@componentAmpTermsN[cmptList]);


(* ::Subsection:: *)
(*Relations Among Component Amplitudes*)


treeTools`functionTypes["F",7]="Relations Among sYM Component Amplitudes";
treeTools`functionNames["F",7]={
"inverseSoftFactorYM[lowerN_,softLeg_]","egWardIdentity[seedComponent__]",
"egWardIdentity[\[ScriptCapitalN]_:4][n_,k_]"};


(*Note: a negative softLeg means antiholomorphic*)
inverseSoftFactorYM[n_Integer,softLeg_Integer]/;(Abs[softLeg]<=n+1):=(If[softLeg<0,(sb[#1,#2]sb[#2,#3])/sb[#1,#3],(ab[#1,#2]ab[#2,#3])/ab[#1,#3]]&@@(RotateRight[Partition[Range[n+1],3,1,1]][[Abs[softLeg]]]));

egWardIdentity[{seedState1_,seedStates__}]/;legalComponentStatesQ[{seedState1,seedStates}]:=Block[{minors=stateListToMinorList[{seedState1,seedStates}],target,targetSlots,ord},ord=Ordering[minors];minors=Sort[minors,Count[minors,#1]>=Count[minors,#2]&];ord=Ordering[minors][[Ordering@ord]];If[Count[minors,minors[[-1]],1]==Length[minors]||Min[Length[Intersection[#,minors[[1]]]]&/@minors]>=(Length[minors[[1]]]-1),target=Prepend[Complement[Range[Length[{seedState1,seedStates}]],{minors[[1,1]]}][[randomSubset[Length[{seedState1,seedStates}]-1,Length[minors[[1]]]]]],minors[[1,1]]];targetSlots={1,2};,targetSlots={1,Ordering[Length[Intersection[#,minors[[1]]]]&/@minors][[1]]};target=minors[[targetSlots[[2]]]];target=Prepend[target,complement[minors[[1]],target][[1]]];];Prepend[#[[1,1]](Times@@@#[[2;;-1]]),#[[1,2]]]&@(Transpose[{#[[All,1]]/#[[1,1]],amp@@@#[[All,2]]}]&@DeleteCases[({Signature[Ordering[#]]Signature[#[[2;;-1]]]Signature[(minors[[targetSlots[[1]]]]/.{target[[1]]->#[[1]]})],minorListToStateList[Length[{seedState1,seedStates}]][ReplacePart[minors,{targetSlots[[2]]->Sort@#[[2;;-1]],targetSlots[[1]]->(Sort@(minors[[1]]/.{target[[1]]->#[[1]]}))}][[ord]]]}&/@Partition[target,Length[target],1,1]),{0,x__},{1}])];
egWardIdentity[seedState1_,seedStates__]/;legalComponentStatesQ[{seedState1,seedStates}]:=egWardIdentity[{seedState1,seedStates}];

egWardIdentity[susyN_Integer:4][n_Integer,k_Integer]:=egWardIdentity[randomComponentStates[susyN][n,k]];


(* ::Section:: *)
(*Color-Dressed Amplitudes in sYM*)


treeTools`functionTypes["G"]="Colored (NonPlanar) Amplitudes of sYM";


(* ::Subsection:: *)
(*Color Factors and Tensor Reductions*)


treeTools`functionTypes["G",1]="Color Factors: Bases, Reduction, Trace Expansions";
treeTools`functionNames["G",1]={
"cyclicColorTraces[n_]","basisColorFactors[n_]","colorFactorReductionRule","colorFactorToTracesRule"};


cyclicColorTraces[n_Integer]:=tr@@@cyclicAmps[n];

basisColorFactors[n_Integer]:=colorFactor[1,##,n]&@@@Permutations[Range[2,n-1]];


colorFactorReductionRule={colorFactor[x__]:>(colorFactor[x]//.treeTools`reduceColorFactor),tr[x___,1,y___]:>tr[1,y,x]};

colorFactorToTracesRule={colorFactor[x___]:>treeTools`colorFactorTraceExpansion[x]};


treeTools`reduceColorFactor={colorFactor[x___,1]:>Power[-1,Length[{x}]+1]colorFactor@@Reverse[{x,1}],colorFactor[a_Integer,1,x___Integer]:>-colorFactor[1,a,x],colorFactor[1,x___Integer]:>Block[{n=Ordering[{x}][[-1]],\[Alpha],\[Beta]},Which[n==Length[{x}],colorFactor[1,x],n==Length[{x}]-1,-colorFactor[1,Sequence@@{x}[[1;;-3]],Sequence@@{x}[[{-1,-2}]]],True,({\[Alpha],\[Beta]}={{x}[[1;;n-1]],{x}[[n+1;;-1]]};colorFactor[1,Sequence@@\[Alpha],\[Beta][[1]],{x}[[n]],Sequence@@\[Beta][[2;;-1]]]+(colorFactor[1,Sequence@@\[Alpha],\[Beta][[2;;-1]],\[Beta][[1]],{x}[[n]]]))]],colorFactor[x___Integer,a_Integer,1,y___Integer]:>If[Length[{y}]==0,-1,1](colorFactor[x,1,a,y]-Power[-1,Length[{x}]](colorFactor[1,a,Reverse@{x},y])),colorFactor[x___Integer,{},y___Integer]:>colorFactor[x,y],colorFactor[x___Integer,{z_},y___Integer]:>colorFactor[x,z,y],colorFactor[x___Integer,{z_,y_},w__Integer]:>colorFactor[x,z,y,w]-colorFactor[x,y,z,w],colorFactor[x___Integer,{z_,y__},w___Integer]:>(colorFactor[x,z,{y},w]-colorFactor[x,{y},z,w])};
treeTools`colorFactorTraceExpansion[x___]:=treeTools`colorFactorTraceExpansion[x]=Block[{n=Length[{x}],labels={x}},Total[(Power[-1,Total[#]+If[EvenQ[n],0,Length[#]]]tr@@Fold[Function[{list,flip},Join[list[[1;;flip-1]],Reverse[list[[flip;;-1]]]]],Range[n],#])&/@(Reverse/@Subsets[Range[n-2]+1])]/.{tr[q__]:>tr@@({q}/.Thread[Rule[Range[n],{x}]])}/.tr[q__]:>tr@@(Sort[Partition[{q},Length[{q}],1,1]][[1]])];


(* ::Subsection:: *)
(*Color-Dressed Tree Amplitudes in sYM*)


treeTools`functionTypes["G",2]="Graphical Representation of Color Factor Tensors";
treeTools`functionNames["G",2]={
"drawColorFactor[colorFactor[labels__]]","drawColorTrace[tr[labels__]]"};


drawColorFactor[labelList__Integer]:=Block[{labels={labelList}},Block[{legLen=0.2 ,gap=0.25,nodes,legs,fontSize=14-0.1Length[labels]},nodes={gap (#-1),0}&/@Range[Length[labels]-2];legs=Join[{{nodes[[1]]+legLen{Cos[7\[Pi]/6],Sin[7\[Pi]/6]},nodes[[1]]}},{#,#+legLen{0,1}}&/@nodes,{{nodes[[-1]]+legLen{Cos[-\[Pi]/6],Sin[-\[Pi]/6]},nodes[[-1]]}}];Graphics[{RGBColor[0.75,0.0,0.125],Text[Style[ToString[labels[[1]]],FontFamily->"Times",FontSize->fontSize],legs[[1,1]]+{-0.02,-0.01},{1,0.2}],Text[Style[ToString[labels[[-1]]],FontFamily->"Times",FontSize->fontSize],legs[[-1,1]]+{0.02,-0.01},{-1,0.2}],Line/@legs[[{1,-1}]],RGBColor[0,0,0.575],Sequence@@(Text[Style[ToString[labels[[#+1]]],FontFamily->"Times",FontSize->fontSize],legs[[#+1,2]]+{0,0.01},{0,-1}]&/@Range[Length[labels]-2]),Line[nodes[[{1,-1}]]],Line/@legs[[2;;-2]]},ImageSize->60+10*Length[labels]]]];
drawColorFactor[colorFactor[labelList__Integer]]:=drawColorFactor[labelList];

drawColorTrace[tr[labelsList__]]:=Module[{labels={labelsList}},Module[{rad=0.3,legLen=0.2 ,gap=0.25,nodes,legs,fontSize=14-0.1Length[labels],angList=(5\[Pi]/4-(#-1)2\[Pi]/Length[labels]&/@Range[Length[labels]])},nodes={Cos[#],Sin[#]}&/@angList;legs=Transpose[{rad nodes,(rad+legLen)nodes}];Graphics[Join[{AbsoluteThickness[2],CapForm["Round"]},{Black},Line/@legs,{RGBColor[0.75,0.0,0.125],Circle[{0,0},rad],Circle[{0,0},0.9rad]},Text[Style[ToString[#1],RGBColor[0,0,0.575],FontFamily->"Times",FontSize->fontSize],#2,1/4#2]&@@@Transpose[{labels,(rad+legLen)1.2{Cos[#],Sin[#]}&/@angList}]],ImageSize->60+10*Length[labels]]]];
drawColorTrace[labelsList__Integer]:=drawColorTrace[tr[labelsList]];


(* ::Subsection:: *)
(*Analytic, Color-Dressed superAmplitudes*)


treeTools`functionTypes["G",3]="Analytic, Color Dressed superAmplitudes";
treeTools`functionNames["G",3]={"colorDressedAmp[n_]","colorTraceDressedAmp[n_]","",
"colorDressedYMampSeeds[n_,k_]","colorDressedYMamp[n_,k_]"};


(* ::Subsubsection:: *)
(*Symbolic Expansions*)


colorDressedAmp[n_]:=kkBasisAmps[n] . basisColorFactors[n];

colorTraceDressedAmp[n_]:=cyclicAmps[n] . cyclicColorTraces[n];


(* ::Subsubsection:: *)
(*Complete Color-Dressed superAmplitudes of sYM*)


colorDressedYMamp[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=colorDressedYMamp[n,k]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"colorDressedYMamp["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["colorDressedYMamp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Join@@(Function[{x,y},permuteLegs[#][x]&/@y]@@@Transpose[{colorDressedYMampSeeds[n,k],(Flatten/@#&/@treeTools`bcfwLegPermutationGroupSeeds[n,k])}]));

colorDressedYMampSeeds[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=colorDressedYMampSeeds[n,k]=Function[{fcnList},If[Head[First[fcnList]]===superFunction,Block[{minor=minimalNonVanishingComponent[DeleteDuplicates[fcnList[[1,2]]]],firstFactor,factorList},factorList=(fcnList/.{superFunction[fcn_,cMatrix_]:>Power[dressedMinor[minor][DeleteDuplicates@cMatrix],4*If[DuplicateFreeQ[cMatrix],1,2]]});superFunction[canonicalizeSpinors[n][Total[Times@@@Transpose[{fcnList[[All,1]],factorList/factorList[[1]]}]]],fcnList[[1,2]]]],Total[fcnList]]]/@(Function[{x,y},(canonicalizeSpinors[n][permuteLegs[#][x]]/.{-sb[q_,r_]:>sb[r,q]})&/@y]@@@Transpose[{((colorFactor@@Range[n]ymAmp[n,k])//.superFunctionProductRule),treeTools`bcfwLegPermutationGroups[n,k][[All,1]]}]);


treeTools`functionTypes["G",4]="Numeric, Color Dressed superAmplitudes";
treeTools`functionNames["G",4]={
"colorDressedYMampN[n_,k_]"};


(* ::Subsection:: *)
(*Numeric Implementation*)


colorDressedYMampN[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"colorDressedYMampN["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["colorDressedYMampN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]]&&Not[Head[treeTools`fullYMampReferenceN[n,k]]===treeTools`fullYMampReferenceN],treeTools`fullYMampReferenceN[n,k],Block[{out=Join@@(Function[{x,y},Quiet[evaluatePermuted[#][x]]&/@y]@@@Transpose[{colorDressedYMampSeeds[n,k],(Flatten/@#&/@treeTools`bcfwLegPermutationGroupSeeds[n,k])}])},If[Count[out,ComplexInfinity|Indeterminate,{0,\[Infinity]}]>0,Print["The specified kinematics encounter a spurious (or physical) pole"],(If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],Set[treeTools`fullYMampReferenceN[n,k],#],#]&@(out))]]]);


(* ::Subsection:: *)
(*Local, Covariant Color-Dressed Helicity Amplitudes in pure YM (via CHY)*)


treeTools`functionTypes["G",5]="Local, Covariant, Color-Dressed Helicity Amplitudes";
treeTools`functionNames["G",5]={"helicityPolarizationRules[helicities__]","",
"ymLocalCovariantColorDressedAmp[n_]","ymLocalCovariantColorDressedAmpData[n_]"};


ymLocalCovariantColorDressedAmp[n_]:=(#1/.Rule@@@#2)&@@ymLocalCovariantColorDressedAmpData[n];
ymLocalCovariantColorDressedAmpData[n_Integer]/;n>=4:=ymLocalCovariantColorDressedAmpData[n]=(Set[treeTools`timingHead,{"ymLocalCovariantColorDressedAmp["<>ToString[n]<>"]",Row[{Style["ymLocalCovariantColorDressedAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n]}]}];{(#*(#/.num[i_]:>basisColorFactors[n][[i]])&@doubleCopyNumerators[n])/cubicGraphDenominators[n],ymLocalCovariantAmpData[n][[2]]});


(* ::Section:: *)
(*Tree Amplitudes in (pure) superGravity*)


treeTools`functionTypes["H"]="Tree Amplitudes in pure superGravity";


(* ::Subsection:: *)
(*Analytic superAmplitudes*)


treeTools`functionTypes["H",1]="Analytic, superAmplitudes of sGR";
treeTools`functionNames["H",1]={"grAmp[n_,k_]","",
"grAmpBGK[n_]","","hodgesPhiMat[n_,aList_:,bList_:]","grAmpHodges[n_]","",
"grAmpDenominators[n_,k_]","grAmpBCFWSeeds[n_,k_]","grAmpBCFWSeedGroups[n_,k_]","grAmpBCFW[n_,k_]","",
"kltRepresentationSeeds[n_]","grAmpKLT[n_]","","numberOfTermsInKLTforGR[n_,k_:0]"};


(* ::Subsubsection:: *)
(*Parke-Taylor (MHV) Amplitude Formulae*)


hodgesPhiMat[n_Integer,{aList__Integer},{bList__Integer}]/;n>3&&(Length[{aList}]==Length[{bList}]==3):=hodgesPhiMat[n][[Complement[Range[n],Mod[{aList},n,1]],Complement[Range[n],Mod[{bList},n,1]]]];
hodgesPhiMat[n_Integer]/;n>3:=(Array[If[#1!=#2,sb[#1,#2]/ab[#1,#2],-Sum[If[MemberQ[Mod[{#1-1,#1,#1+1},n,1],j],0,(sb[#1,j]ab[Mod[#1-1,n,1],j]ab[j,Mod[#1+1,n,1]]/(ab[#1,j]ab[Mod[#1-1,n,1],#1]ab[#1,Mod[#1+1,n,1]]))],{j,n}]]&,{n,n}]);

treeTools`grMHVampBGKSeed[n_Integer]/;n>=4:=sb[1,2]/ab[1,n-1] Product[1/(ab[i,n]ab[i,i+1]),{i,1,n-1}]Product[asb[n,p@@Range[k+1,n],k],{k,3,n-2}];
grAmpBGK[n_Integer]/;n>=4:=Total[permuteLegs[#][treeTools`grMHVampBGKSeed[n]]&/@Permutations[Range[2,n-2]]];

grAmpHodges[n_Integer]/;n>=4:=Block[{(*The sets A and B below are arbitrary; the choices here are made to avoid double poles as much as possible*)setA={1,2,3},setB={4,5,6},sign,prefactor,detFactor},sign=Power[-1,n+1+Total@Mod[Join[setA,setB],n,1]];prefactor=1/Times@@(ab@@@(Join@@(Partition[Sort[Mod[#,n,1]],2,1,1]&/@{setA,setB})));detFactor=Det[hodgesPhiMat[n][[Complement[Range[n],Mod[setA,n,1]],Complement[Range[n],Mod[setB,n,1]]]]];sign*prefactor*detFactor];


(* ::Subsubsection:: *)
(*Amplitudes Obtained via On-Shell Recursion*)


grAmpDenominators[3,-1]=grAmpDenominators[3,0]={1};
grAmpDenominators[n_Integer,0]/;n>3:={Product[ab[1,p@@Range[2,j-2],p[j-1],j]/ab[1,j],{j,4,n-1}]s[n-1,n]};
grAmpDenominators[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=grAmpDenominators[n,k]=If[n==k+4,{Product[sb[j,p[j+1],p@@Range[j+2,n-1],n]/sb[j,n],{j,2,n-3}]s[1,2]},Join@@(treeTools`grAmpDenominatorsBridge/@bcfwPartitions[n,k])];

treeTools`resetStoredGRamplitudes:=(ClearAll[grAmpBCFWSeeds,grAmpBCFWSeedGroups,grAmpBCFW,grAmp];
grAmpBCFWSeeds[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=grAmpBCFWSeeds[n,k]=If[k===0,{Power[parkeTaylorAmp[n],2]}*grAmpDenominators[n,0],(superFunction[Power[#1[[1]],2]#2,Join[#1[[2]],#1[[2]]]]&@@@Transpose[{List@@@ymAmp[n,k],grAmpDenominators[n,k]}])];

grAmpBCFWSeedGroups[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=grAmpBCFWSeedGroups[n,k]=Function[{fcnList},If[Head[First[fcnList]]===superFunction,Block[{minor=minimalNonVanishingComponent[DeleteDuplicates[fcnList[[1,2]]]],firstFactor,factorList},factorList=(fcnList/.{superFunction[fcn_,cMatrix_]:>Power[dressedMinor[minor][DeleteDuplicates@cMatrix],4*If[DuplicateFreeQ[cMatrix],1,2]]});superFunction[Total[Times@@@Transpose[{fcnList[[All,1]],factorList/factorList[[1]]}]],fcnList[[1,2]]]],Total[fcnList]]]/@(Function[{x,y},permuteLegs[#][x]&/@y]@@@Transpose[{grAmpBCFWSeeds[n,k],treeTools`bcfwLegPermutationGroups[n,k][[All,1]]}]);

grAmpBCFW[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=grAmpBCFW[n,k]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"grAmpBCFW["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["grAmpBCFW[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];(Join@@(Function[{x,y},permuteLegs[#][x]&/@y]@@@Transpose[{grAmpBCFWSeedGroups[n,k],(Flatten/@#&/@treeTools`bcfwLegPermutationGroupSeeds[n,k])}])));

grAmp[n_Integer,k_Integer]/;(n>3&&MemberQ[Range[0,n-4],k]):=grAmp[n,k]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"grAmp["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["grAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Which[k==0,Block[{set1={1,2,3},set2={4,5,6}},Block[{sign=Times@@Power[-1,Mod[Join[set1,set2],n,1]],pre=1/Times@@(ab@@@Join[Partition[Mod[set1,n,1],2,1,1],Partition[Mod[set2,n,1],2,1,1]]),phi},phi=hodgesPhiMat[n,set1,set2];{Power[-1,n+1]sign*pre*If[n>3,Det[phi],1]}]],k==n-4,Block[{set1={1,2,3},set2={4,5,6}},Block[{sign=Times@@Power[-1,Mod[Join[set1,set2],n,1]],pre=1/Times@@(sb@@@Join[Partition[Mod[set1,n,1],2,1,1],Partition[Mod[set2,n,1],2,1,1]])Power[Times@@sb@@@Partition[Range[n],2,1,1],2],phi},phi=(hodgesPhiMat[n,set1,set2]/.{ab->sb,sb->ab});{((Power[parkeTaylorAmpBar[n],2]/.superFunctionProductRule)/.{superFunction[f_,c_]:>superFunction[(Power[-1,n+1]sign*pre*If[n>3,Det[phi],1]f),c]})}]],True,grAmpBCFW[n,k]]);
);treeTools`resetStoredGRamplitudes;


(* ::Subsubsection:: *)
(*Representations via KLT*)


kltRepresentationSeeds[n_Integer]/;n>=4:=Prepend[#,amp@@Range[n]]&/@(Reverse/@treeTools`kltKernelSeedTerms[n]);

grAmpKLT[n_Integer,k_Integer]:=grAmpKLT[n,k]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"grAmpKLT["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["grAmpKLT[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];Join@@Transpose[(permuteLegs[#][treeTools`grAmpKLTSeeds[n,k]]&/@Permutations[Range[2,n-2]])]);

numberOfTermsInKLTforGR[n_Integer,k_Integer:0]/;MemberQ[Range[0,n-4],k]:=Power[(1/(n-3) Binomial[n-3,k+1]Binomial[n-3,k]),2](Floor[(n-3)/2]!)(Ceiling[(n-3)/2]!)(n-3)!;


treeTools`grAmpKLTSeeds[n_Integer,k_Integer]:=treeTools`grAmpKLTSeeds[n,k]=Times@@@Tuples[{(ymAmp[n,k]/.{superFunction->superFunctionL}),Join@@(((Times@@@(treeTools`kltKernelSeedTerms[n]/.{amp[x__]:>(ymAmp[n,k,{x}])})//.superFunctionProductRule)/.{superFunction->superFunctionR}))}]//.superFunctionProductRule;


(* ::Subsection:: *)
(*Numeric superAmplitudes*)


treeTools`functionTypes["H",2]="Numeric superAmplitudes of sGR";
treeTools`functionNames["H",2]={"grAmpN[n_,k_]","",
"grAmpBCFWN[n_,k_]",""};


grAmpBCFWN[n_Integer,k_Integer]/;((n>3&&MemberQ[Range[0,n-4],k])&&((n==Length[Ls]))):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"grAmpBCFWN["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["grAmpBCFWN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]]&&Not[Head[treeTools`grAmpReferenceN[n,k]]===treeTools`grAmpReferenceN],treeTools`grAmpReferenceN[n,k],Block[{out=Join@@(Function[{x,y},Quiet[evaluatePermuted[#][x]]&/@y]@@@Transpose[{grAmpBCFWSeedGroups[n,k],(Flatten/@#&/@treeTools`bcfwLegPermutationGroupSeeds[n,k])}])},If[Count[out,ComplexInfinity|Indeterminate,{0,\[Infinity]}]>0,Print["The specified kinematics encounter a spurious (or physical) pole"],(If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],Set[treeTools`grAmpReferenceN[n,k],#],#]&@(out))]]]);

grAmpN[n_Integer,k_Integer]/;((n>3&&MemberQ[Range[0,n-4],k])&&((n==Length[Ls]))):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"grAmpN["<>StringJoin@@Riffle[ToString/@{n,k},","]<>"]",Row[{Style["grAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n,k]}]}]];If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]]&&Not[Head[treeTools`grAmpReferenceN[n,k]]===treeTools`grAmpReferenceN],treeTools`grAmpReferenceN[n,k],If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],Set[treeTools`grAmpReferenceN[n,k],#],#]&@Which[k==0,Block[{set1={1,2,3},set2={4,5,6}},Block[{sign=Times@@Power[-1,Mod[Join[set1,set2],n,1]],pre=1/Times@@(ab@@@Join[Partition[Mod[set1,n,1],2,1,1],Partition[Mod[set2,n,1],2,1,1]]),phi},phi=evaluate[hodgesPhiMat[n,set1,set2]];{Power[-1,n+1]sign*evaluate[pre]*If[n>3,Det[phi],1]}]],k==n-4,Block[{set1={1,2,3},set2={4,5,6}},Block[{sign=Times@@Power[-1,Mod[Join[set1,set2],n,1]],pre=1/Times@@(sb@@@Join[Partition[Mod[set1,n,1],2,1,1],Partition[Mod[set2,n,1],2,1,1]])*Power[Times@@sb@@@Partition[Range[n],2,1,1],2],phi},phi=evaluate[(hodgesPhiMat[n,set1,set2]/.{ab->sb,sb->ab})];((Power[-1,n+1]sign*evaluate[pre]*If[n>3,Det[phi],1]Power[evaluate[parkeTaylorAmpBar[n]],2])//.superFunctionProductRule)]],True,grAmpBCFWN[n,k]]]);


(* ::Subsection:: *)
(*Recursion for Graviton-Helicity Amplitudes*)


treeTools`functionTypes["H",3]="Analytic Component Amplitudes of sGR";
treeTools`functionNames["H",3]={
"grHelicityAmp[gravitonHelicities__]","",
"componentAmpTerms[stateList__]","componentAmp[stateList__]"};


(* ::Subsubsection:: *)
(*Analytic Helicity Amplitudes*)


grHelicityAmp[helList__]/;(DeleteDuplicates[Sort[{helList}]]=={mm,pp}):=grHelicityAmp[helList]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"grHelicityAmp["<>StringJoin@@Riffle[ToString/@{helList},","]<>"]",Row[{Style["grHelicityAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[helList]}]}]];Block[{n=Length[{helList}],k=Count[{helList},mm]-2,refHelicity,refAmp},refHelicity=RotateLeft[Join@@(If[k+2<=n-(k+2),#,Reverse[#]]&@List[mm&/@Range[k+2],pp&/@Range[n-k-2]])];refAmp=treeTools`grHelicityAmp@@refHelicity;permuteLegs[Ordering@Ordering[refHelicity][[Ordering@Ordering[{helList}]]]][refAmp]]);
grHelicityAmp[{helList__}]:=grHelicityAmp[helList];


treeTools`grHelicityAmp[helList__]/;(DeleteDuplicates[Sort[{helList}]]=={mm,pp}):=treeTools`grHelicityAmp[helList]=Which[Count[{helList},mm]==2,If[Length[{helList}]==3,{Power[ab@@Flatten[Position[{helList},mm]],8]/Power[Times@@ab@@@Partition[Range[3],2,1,1],2]},{Power[ab@@Flatten[Position[{helList},mm]],8]grAmp[Length[{helList}],0][[1]]}],Count[{helList},pp]==2,If[Length[{helList}]==3,{Power[sb@@Flatten[Position[{helList},pp]],8]/Power[Times@@sb@@@Partition[Range[3],2,1,1],2]},{Power[sb@@Flatten[Position[{helList},pp]],8](grAmp[Length[{helList}],0][[1]]/.{ab->sb,sb->ab})}],Not[{helList}[[{1,-1}]]==={pp,mm}],Block[{partitionData=bcfwPartitions[{helList}]},Join@@(permuteLegs[#1][#2]&@@@Transpose[{Join[#1[[1;;-2]],#2[[2;;-1]]]&@@@partitionData[[All,All,All,1]],treeTools`bridgeFactors[Length[#1],Length[#2],False][treeTools`grHelicityAmp[Sequence@@#1],treeTools`grHelicityAmp[Sequence@@#2]]&@@@(partitionData[[All,All,All,2]])}])],True,Block[{partitionData=bcfwPartitions[{helList}]},Join@@(permuteLegs[#1][#2]&@@@Transpose[{Join[#1[[1;;-2]],#2[[2;;-1]]]&@@@partitionData[[All,All,All,1]],treeTools`bridgeFactors[Length[#1],Length[#2],True][treeTools`grHelicityAmp[Sequence@@#1],treeTools`grHelicityAmp[Sequence@@#2]]&@@@(partitionData[[All,All,All,2]])}])]];
treeTools`grHelicityAmp[{helList__}]:=treeTools`grHelicityAmp[helList];


(* ::Subsection:: *)
(*Covariant, Manifestly Color-Kinematic Representations (via CHY)*)


treeTools`functionTypes["H",4]="Local, Covariant, Color Kinematic Dual Graviton Amplitudes";
treeTools`functionNames["H",4]={"helicityPolarizationRules[helicities__]","",
"doubleCopyNumerators[n_]","grLocalCovariantAmp[n_]","grLocalCovariantAmpData[n_]"};


doubleCopyNumerators[n_Integer]/;n>=9:=doubleCopyNumerators[n]=Module[{kk={1,##,n}&@@@Permutations[Range[2,n-1]],graphSets=treeTools`cubicGraphSets[n],dihedral},Total/@Function[{set},Function[{list},Power[-1,Length[Select[Partition[Ordering[kk[[#]]][[kk[[list[[1]]]]]],2,1,1],Not[OrderedQ[#]]&]]-1]num[#]&/@list]@Select[Range[Length[kk]],Function[{no},((Count[#,True]&/@(And@@@#&/@Function[{q},(MemberQ[q,#]&/@#&/@Partition[kk[[no]],2,1,1])]/@set))==Length/@(set)-1)]]]/@graphSets];

grLocalCovariantAmp[n_]:=(#1/.Rule@@@#2)&@@grLocalCovariantAmpData[n];
grLocalCovariantAmpData[n_]/;8>=n>3:=grLocalCovariantAmpData[n]=(Set[treeTools`timingHead,{"grLocalCovariantAmp["<>ToString[n]<>"]",Row[{Style["grLocalCovariantAmp[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[n]}]}];Block[{nums=doubleCopyNumerators[n],denList=cubicGraphDenominators[n]},{Power[nums,2]/denList,Transpose[{num/@(Range[(n-2)!]),chyPsiPfaffianPrimeInCycles[n][[All,1]]}]}]);




Function[{n,data},Set[doubleCopyNumerators[n],(data . (num/@Range[Dimensions[data][[2]]]))]]@@@Uncompress["1:"];


(* ::Subsection:: *)
(*Numeric Components Amplitudes of sGR*)


treeTools`functionTypes["H",5]="Numeric Component Amplitudes of sGR";
treeTools`functionNames["H",5]={
"grHelicityAmpN[gravitonHelicities__]","",
"componentAmpTermsN[stateList__]","componentAmpN[stateList__]"};


grHelicityAmpN[helList__]/;((DeleteDuplicates[Sort[{helList}]]=={mm,pp})&&Length[{helList}]==Length[Ls]):=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"grHelicityAmpN["<>StringJoin@@Riffle[ToString/@{helList},","]<>"]",Row[{Style["grHelicityAmpN[]",Bold,FontSize->14],Style[" for  ",FontFamily->"Times",FontSize->14],treeTools`stylizedAmp[helList]}]}]];Block[{newOrder=RotateLeft[Ordering[{helList}]]},treeTools`grHelicityAmpN[Ls[[newOrder]],Lbs[[newOrder]]][Sequence@@RotateLeft[Sort[{helList}]]]]);
grHelicityAmpN[{helList__}]:=grHelicityAmpN[helList];


treeTools`grHelicityAmpN[ls_List,lbs_List][helList__]/;((DeleteDuplicates[Sort[{helList}]]=={mm,pp})&&(Length[{helList}]==Length[ls])):=Block[{n=Length[ls]},Which[Count[{helList},mm]==2,If[n==3,{Power[Det[ls[[Flatten[Position[{helList},mm]]]]],8]/Power[Times@@Det/@Partition[ls,2,1,1],2]},Block[{set1={1,2,3},set2={4,5,6}},Block[{sign=Times@@Power[-1,Mod[Join[set1,set2],n,1]],pre=1/Times@@(Det/@Join[Partition[ls[[Mod[set1,n,1]]],2,1,1],Partition[ls[[Mod[set2,n,1]]],2,1,1]]),phi},phi=evaluateWithSpinors[ls,lbs][hodgesPhiMat[n,set1,set2]];{Power[Det[ls[[Flatten[Position[{helList},mm]]]]],8]Power[-1,n+1]sign*pre*If[n>3,Det[phi],1]}]]],Count[{helList},pp]==2,If[n==3,{Power[Det[lbs[[Flatten[Position[{helList},pp]]]]],8]/Power[Times@@Det/@Partition[lbs,2,1,1],2]},Block[{set1={1,2,3},set2={4,5,6}},Block[{sign=Times@@Power[-1,Mod[Join[set1,set2],n,1]],pre=1/Times@@(Det/@Join[Partition[lbs[[Mod[set1,n,1]]],2,1,1],Partition[lbs[[Mod[set2,n,1]]],2,1,1]]),phi},phi=evaluateWithSpinors[lbs,ls][hodgesPhiMat[n,set1,set2]];{Power[Det[lbs[[Flatten[Position[{helList},pp]]]]],8]Power[-1,n+1]sign*pre*If[n>3,Det[phi],1]}]]],Not[{helList}[[{1,-1}]]==={pp,mm}],Block[{partitionData=bcfwPartitions[{helList}]},Join@@(Function[{leftSplit,rightSplit},Block[{fullRange=Join[leftSplit[[1;;-2,1]],rightSplit[[2;;-1,1]]],hels={leftSplit[[All,2]],rightSplit[[All,2]]},cutSpinors,cutS},{cutS,cutSpinors}={#1,Transpose/@#2}&@@evaluateWithSpinors[{ls[[fullRange]],lbs[[fullRange]]}][{1/s@@Range[Length[hels[[1]]]-1],bcfwCutSpinors[Length/@hels]}];Times@@@Tuples[{{cutS},treeTools`grHelicityAmpN[Sequence@@cutSpinors[[1]]][Sequence@@hels[[1]]],treeTools`grHelicityAmpN[Sequence@@cutSpinors[[2]]][Sequence@@hels[[2]]]}]]]@@@partitionData)],True,Block[{partitionData=bcfwPartitions[{helList}]},Join@@(Function[{leftSplit,rightSplit},Block[{fullRange=Join[leftSplit[[1;;-2,1]],rightSplit[[2;;-1,1]]],hels={leftSplit[[All,2]],rightSplit[[All,2]]},cutSpinors,cutS},{cutS,cutSpinors}={#1,Transpose/@#2}&@@evaluateWithSpinors[{ls[[fullRange]],lbs[[fullRange]]}][{1/s@@Range[Length[hels[[1]]]-1],bcfwCutSpinors[Length/@hels,True]}];Times@@@Tuples[{{cutS},treeTools`grHelicityAmpN[Sequence@@cutSpinors[[1]]][Sequence@@hels[[1]]],treeTools`grHelicityAmpN[Sequence@@cutSpinors[[2]]][Sequence@@hels[[2]]]}]]]@@@partitionData)]]];


(* ::Subsection:: *)
(*Relations Among Component Amplitudes in sGR*)


treeTools`functionTypes["H",6]="Relations Among Component Amplitudes of sGR";
treeTools`functionNames["H",6]={
"inverseSoftFactorGR[lowerN_,softLeg_]","",
"egE77doubleSoftData[n_,k_]","","egWardIdentityGR[\[ScriptCapitalN]_:8][n_,k_]"};


inverseSoftFactorGR[n_Integer,softLeg_Integer]/;(Abs[softLeg]<=n+1):=Module[{a=Abs[softLeg]},1/Sum[If[MemberQ[Mod[{a-1,a,a+1},n+1,1],j],0,(sb[a,j]ab[Mod[a-1,n+1,1],j]ab[j,Mod[a+1,n+1,1]]/(ab[a,j]ab[Mod[a-1,n+1,1],a]ab[a,Mod[a+1,n+1,1]]))],{j,n+1}]/.If[softLeg<0,{ab->sb,sb->ab},{}]];

egE77doubleSoftData[n_Integer,k_Integer]/;MemberQ[Range[0,n-4],k]:=Block[{parentRs=Function[{y},Position[y,#][[All,1]]&/@Range[n+2]]@(ReplacePart[#,{{1,-2}->n+1,{1,-1}->n+2,{2,-1}->n+1,{3,-1}->n+1,{4,-1}->n+1,{5,-1}->n+2,{6,-1}->n+2,{7,-1}->n+2}]&@(RandomChoice[Subsets[Range[n],{k+3}]]&/@Range[8])),parentStates,droppedMinors,daughterMinors,daughterNos,daughterSigns,daughterStates},parentStates=Replace[parentRs,{{}->pp,Range[8]->mm,{x_}:>gravitino[x],{x_,y_}:>graviPhoton[x,y],{x_,y_,z_,w_}:>phi[x,y,z,w],{x_,y_,z_}:>psi[x,y,z],{x__}:>(Which[Length[{x}]==5,psiBar@@#,Length[{x}]==6,graviPhotonBar@@#,Length[{x}]==7,gravitinoBar@@#]&@(Complement[Range[8],{x}]))},1];droppedMinors=stateListToMinorList[parentStates[[1;;-3]]];daughterMinors=ReplacePart[droppedMinors,{1->Append[droppedMinors[[1]],#],8->DeleteCases[droppedMinors[[8]],#]}]&/@droppedMinors[[8]];{daughterMinors,daughterNos,daughterSigns}=Transpose[Select[Transpose[{daughterMinors,droppedMinors[[8]],Power[-1,k+1](Signature[Ordering[#]]&/@daughterMinors[[All,1]])*Power[-1,Range[Length[daughterMinors]]-1]}],DuplicateFreeQ[#[[1,1]]]&]];daughterStates=(minorListToStateList[n]/@daughterMinors);{amp@@parentStates,daughterSigns*(-(s[n+1,#]/(s[n+1,#]+s[n+2,#]))&/@(daughterNos)),amp@@@daughterStates}];

egWardIdentityGR[susyN_:8][n_Integer,k_Integer]:=egWardIdentity[randomComponentStatesGR[susyN][n,k]];


(* ::Section:: *)
(*Scattering Amplitudes of Other Theories*)


treeTools`functionTypes["I"]="Scattering Amplitudes in Other Theories";


(* ::Subsection:: *)
(*General Aspects of Amplitudes*)


treeTools`functionTypes["I",1]="Feynman Graphs: Enumeration and Locality";
treeTools`functionNames["I",1]={
"physicalPolesPlanar[n_]","","cubicGraphDenominatorsPlanar[n_]","",
"cubicGraphDenominators[n_]","","numberOfPlaneGraphs[n_,p_:3]","numberOfYMfeynmanDiagrams[n_]"};


physicalPolesPlanar[n_Integer]/;n>=4:=s@@@Join[Join@@(Partition[Range[n],#,1,1]&/@Range[2,Floor[n/2]-1]),If[EvenQ[n],Partition[Range[n],n/2,1,1][[1;;n/2]],Partition[Range[n],Floor[n/2],1,1]]];

cubicGraphDenominatorsPlanar[n_Integer]/;n>3:=treeTools`canonicalizeSs[n][1/(List@@phi3Amp[n])];

cubicGraphDenominators[n_Integer]/;n>3:=Times@@@(s@@@#&/@(treeTools`cubicGraphSets[n]));

numberOfPlaneGraphs[n_Integer,p_Integer:3]/;n>=p>=3:=If[Not[IntegerQ[(n-2)/(p-2)]],0,1/(n-1) Binomial[((n-2)/(p-2))(p-1),(n-2)]];

numberOfYMfeynmanDiagrams[1]=0;numberOfYMfeynmanDiagrams[2]=numberOfYMfeynmanDiagrams[3]=1;
numberOfYMfeynmanDiagrams[n_]:=numberOfYMfeynmanDiagrams[n]=(12(2n-5)numberOfYMfeynmanDiagrams[n-1]+(3n-10)(3n-8)numberOfYMfeynmanDiagrams[n-2])/11;



treeTools`basisGraphQ[graph_]:=Block[{endPoints=Select[graph,Count[#,e[__],{0,\[Infinity]}]==1&]},If[Length[endPoints]>2,False,Block[{n=Length[DeleteDuplicates[Cases[graph,e[__],{0,\[Infinity]}]]]+3},And@@MemberQ@@@Transpose[{(Cases[#,q_Integer,{1}]&/@endPoints),{1,n}}]||And@@MemberQ@@@Transpose[{(Cases[#,q_Integer,{1}]&/@endPoints),{n,1}}]]]];

treeTools`cubicGraphs[4]=List[{{1,2,e[1]},{e[1],3,4}},{{1,3,e[1]},{e[1],2,4}},{{4,1,e[1]},{e[1],2,3}}];
treeTools`cubicGraphs[n_Integer]/;n>4:=treeTools`cubicGraphs[n]=Join[Join[RotateLeft/@(Join[{{e[n-3],n,#[[-1]]},{1,e[1],#[[1]]}},(Append@@@Transpose[{Partition[e/@Range[n-3],2,1],#[[2;;-2]]}])]&/@Permutations[Range[2,n-1]])[[All,All,{1,3,2}]],Select[#,Not[treeTools`basisGraphQ[#]]&]]&@Select[#,Max[Count[#,e[__],{0,\[Infinity]}]&/@#]==2&],Select[#,Max[Count[#,e[__],{0,\[Infinity]}]&/@#]>2&]]&@Sort[Sort/@(Sort/@#&/@Join[Join@@(Function[{leg},Sort/@(treeTools`cubicGraphs[n-1]/.{{x___,leg,y___}:>Sequence@@{{x,e[n-3],y},{leg,n,e[n-3]}}})]/@Range[n-1]),Join@@(Function[{int},(Block[{edge=Select[#,Count[#,e[int],{0,\[Infinity]}]>0&][[-1]]},Append[(#/.edge->(edge/.{e[int]->e[n-3]})),{e[int],e[n-3],n}]]&/@treeTools`cubicGraphs[n-1])]/@Range[n-4])])];

treeTools`cubicGraphSets[n_Integer]/;n>3:=treeTools`cubicGraphSets[n]=Sort/@#&/@(Sort[{Sort[#],Complement[Range[n],#]}][[1]]&/@#&/@(e/@Range[n-3]/.((FixedPoint[Function[{rules,edges},Block[{newRules=(Cases[#,e[x_],{0,\[Infinity]}][[1]]->List@@Cases[#,q_Integer])&/@Select[edges/.rules,Count[#,e[__],{0,\[Infinity]}]==1&]},{Join[rules,newRules],Select[Flatten/@(edges/.newRules),Count[#,e[x__],{0,\[Infinity]}]>0&]}]]@@#&,{{},#}][[1]])&/@treeTools`cubicGraphs[n])));


(* ::Subsection:: *)
(*Scalar phi^p-Field Theory*)


treeTools`functionTypes["I",2]="Tree Amplitudes of Scalar Field Theory";
treeTools`functionNames["I",2]={
"scalarAmp[p_:3][n_]","","phi3Amp[n_]","phi3AmpCyclicSeeds[n_]","phi3Amp[legLabels__]","",
"nlsmAmpTerms[n_]","nlsmAmp[n_]","nlsmAmp[{legOrdering__}]","nlsmAmpCyclicSeeds[n_]"};


scalarAmp[p_:3][labels_]:=Total[treeTools`scalarAmpTerms[p][labels]];

phi3Amp[n_Integer]:=phi3Amp[n]=Total[treeTools`scalarAmpTerms[3][Range[n]]];
phi3Amp[perm_List]:=(phi3Amp[Length[perm]]/.{s[x__]:>s@@(Sort[{Sort@({x}/.Thread[Rule[Range[Length[perm]],perm]]),Complement[Range[Length[perm]],({x}/.Thread[Rule[Range[Length[perm]],perm]])]}][[1]])});

phi3AmpCyclicSeeds[n_Integer]:=phi3AmpCyclicSeeds[n]=(Length[DeleteDuplicates[#]]/n#[[1]]&/@Sort[DeleteDuplicates[Sort/@treeTools`canonicalizeSs[n][Transpose[permuteLegs[#][treeTools`scalarAmpTerms[3][n]]&/@Partition[Range[n],n,1,1]]]],Length[DeleteDuplicates[#1]]>=Length[DeleteDuplicates[#2]]&]);




treeTools`scalarAmpTerms[3][labels_List]:=If[Length[labels]==3,{1},Times@@@Join@@(Tuples/@(((If[Length[#]==2,{1},Power[s@@Sort[Drop[#,-1]],-1]treeTools`scalarAmpTerms[3][#]]&/@#&/@(labels[[Append[#,-1]]]&/@#&/@(Range[#1+1,#2]&@@@#&/@(Partition[Append[Prepend[{#},0],Length[labels]-1],2,1]&/@Range[Length[labels]-2])))))))];
treeTools`scalarAmpTerms[p_:3][labels_List]:=Which[Length[labels]==p,{1},Length[labels]<p||Not[Mod[Length[labels]-p,p-2]==0],{},True,Join@@(Times@@@#&/@Tuples/@(If[Length[#]==1,{1},treeTools`scalarAmpTerms[p]@Append[labels[[#]],labels[[-1]]]/s@@labels[[#]]]&/@#&/@(Range@@(#+{0,-1}+If[Not[OrderedQ[#]],{0,Length[labels]},0])&/@#&/@Select[((Partition[RotateLeft[Join[{Length[labels],1},#]],2,1,1]&/@Subsets[Range[Length[labels]-2]+1,{p-2}])),If[p==3,True,And@@((#==1||Mod[#-p+1,p-2]==0)&/@(((Mod[#2-#1,Length[labels],1]&@@@#))))]&])))];
treeTools`scalarAmpTerms[p_:3][n_Integer]:=treeTools`scalarAmpTerms[p][Range[n]];


(* ::Subsubsection:: *)
(*Non-Linear Sigma Model*)


nlsmAmpTerms[n_Integer]/;n>=4:=nlsmAmpTerms[n]=If[OddQ[n],{},Module[{scalarAmp=List@@treeTools`canonicalizeSs[n][phi3Amp[n]],seedNos,denList,grps,factors,grpSeeds},denList=Cases[Denominator@#,s[__],{0,\[Infinity]}]&/@scalarAmp;factors=Select[DeleteDuplicates@Cases[scalarAmp,s[__],{0,\[Infinity]}],OddQ[Length[List@@#]]&];grps=Intersection[factors,#]&/@denList;grps=Flatten[Position[grps,#]]&/@Sort[DeleteDuplicates[grps]];(Join@@(If[Head[#]===Plus,List@@Expand[#],If[Denominator[#]===1,List@@Expand[#],{#}]]&/@Factor[-SeriesCoefficient[#,{f,\[Infinity],n-2}]&/@(Total[scalarAmp[[#]]]&/@grps/.s[x___]:>If[OddQ[Length[{x}]],s[x],s[x]+Power[-1,{x}[[1]]+1]f])]))]];

nlsmAmp[n_Integer]:=Total[nlsmAmpTerms[n]];

nlsmAmp[{a_Integer,b__Integer}]:=permuteLegs[{a,b}][nlsmAmp[Length[{a,b}]]];
nlsmAmp[a_Integer,b__Integer]:=nlsmAmp[{a,b}];

nlsmAmpCyclicSeeds[n_Integer]:=nlsmAmpCyclicSeeds[n]=Module[{fullTerms=nlsmAmpTerms[n],grps},grps=Sort/@treeTools`canonicalizeSs[n][Transpose[permuteLegs[#][Expand/@fullTerms]&/@Partition[Range[n],n,1,1]]];grps=Flatten[Position[grps,#]]&/@DeleteDuplicates[grps];fullTerms[[#[[1]]]]*Length[#]/n&/@grps];



(* ::Subsection:: *)
(*Double Copies via KLT*)


treeTools`functionTypes["I",3]="Tree Amplitudes via Double Copies";
treeTools`functionNames["I",3]={
"specialGalileonAmp[n_]","diracBornInfeldAmp[n_]"};


specialGalileonAmp[n_]/;EvenQ[n]:=specialGalileonAmp[n]=(kltBasisAmpsAlpha[n]/.{amp[x__]:>permuteLegs[{x}][nlsmAmp[n]]}) . kltKernel[n] . ((kltBasisAmpsBeta[n]/.{amp[x__]:>permuteLegs[{x}][nlsmAmp[n]]}));

diracBornInfeldAmp[n_]/;EvenQ[n]:=diracBornInfeldAmp[n]=(kltBasisAmpsAlpha[n]/.{amp[x__]:>Total[ymAmp[n,n/2-2,{x}]]}) . kltKernel[n] . (kltBasisAmpsBeta[n]/.{amp[x__]:>permuteLegs[{x}][nlsmAmp[n]]});


(* ::Section:: *)
(*Twistor String Theory and the Scattering Equation Formalism*)


treeTools`functionTypes["J"]="Twistor String Theory and the Scattering Equations";


(* ::Subsection:: *)
(*General Aspect of the Scattering Equation Formalism*)


treeTools`functionTypes["J",1]="General Aspects of the Scattering Equation Formalism";
treeTools`functionNames["J",1]={
"scatteringEquations[n_]","scatteringEquationsJacobian[n_]","","solveScatteringEquations[n_:,k_:]","numberOfScatteringEquationSolutions[n_,k_]","","directCHYintegration[exprn_,summedQ_:True]"};


scatteringEquations[n_Integer]/;n>3:=Table[Total[(s@@Sort[{j,#}]/(\[Sigma][j,#])&/@Complement[Range[n],{j}])],{j,n}];

scatteringEquationsJacobian[n_]:=((DiagonalMatrix[Function[{j},Total[s[#,j]/\[Sigma][#,j]^2&/@Range[n]]]/@Range[4,n]]-Array[s[#1+3,#2+3]/\[Sigma][#1+3,#2+3]^2&,{n-3,n-3}])/.s[x__]:>s@@Sort[{x}]);

solveScatteringEquations[n_Integer,k_Integer]/;n>=4&&(n===Length[Ls])&&MemberQ[Range[0,n-4],k]:=If[Head[treeTools`scatteringEquationSolutionsN[n,k,Ls]]===List,treeTools`scatteringEquationSolutionsN[n,k,Ls],(Module[{solns,jac=evaluate[((scatteringEquationsJacobian[n]/.{\[Sigma][x_,y_]:>\[Sigma][x]-\[Sigma][y]}))]},solns=Which[k==0,evaluate[{Join[{\[Sigma][1]->\[Infinity],\[Sigma][2]->0,\[Sigma][3]->1},\[Sigma][#]->(ab[1,3]ab[2,#])/(ab[1,#]ab[2,3])&/@Range[4,n]]}],k==n-4,evaluate[{Join[{\[Sigma][1]->\[Infinity],\[Sigma][2]->0,\[Sigma][3]->1},\[Sigma][#]->(sb[1,3]sb[2,#])/(sb[1,#]sb[2,3])&/@Range[4,n]]}],True,Module[{translate=fromGrassmannianToScatteringEqnSolns[n,k],mat=gaugeFixedGrassmannianRepresentative[n,k],nMatList,refSoln=solveTwistorStringEquations[n,k][[All,1]]},nMatList=mat/.refSoln;translate/.m[x___]:>Det[#[[All,{x}]]]&/@nMatList]];Set[treeTools`scatteringEquationSolutionsN[n,k,Ls],Transpose[{solns,Det/@(jac/.solns)}]]])];
solveScatteringEquations[n_Integer]/;n>=4:=Join@@(solveScatteringEquations[n,#]&/@Range[0,n-4]);
solveScatteringEquations[]:=solveScatteringEquations[Length[Ls]];

numberOfScatteringEquationSolutions[n_Integer,k_Integer]:=eulerianNumber[n-3,k];

directCHYintegration[exprn_,summedQ_:True]/;(Max[Cases[Cases[exprn,\[Sigma][x__]:>x,{0,\[Infinity]}],q_Integer,{0,\[Infinity]}]]===Length[Ls]):=Block[{n=Max[Cases[Cases[exprn,\[Sigma][x__]:>x,{0,\[Infinity]}],q_Integer,{0,\[Infinity]}]],int=evaluate[(exprn/.{\[Sigma][x_,y_]:>\[Sigma][x]-\[Sigma][y]}/.{\[Sigma][1]->\[Sigma]1,\[Sigma][2]->0,\[Sigma][3]->1})],solnData,eqns,directJac,solns,t0=AbsoluteTime[]},solnData=solveScatteringEquations[n,#]&/@Range[0,n-4];If[DeleteDuplicates[Head/@DeleteCases[Variables[int],\[Sigma]1]]==={\[Sigma]}&&TrueQ[summedQ],(rationalize[Total[SeriesCoefficient[Power[\[Sigma]1,4]#,{\[Sigma]1,\[Infinity],0}]&/@((int/.#1)/#2&@@@(Join@@solnData))]]),If[DeleteDuplicates[Head/@DeleteCases[Variables[int],\[Sigma]1]]==={\[Sigma]},rationalize[#],#]&/@(Total[SeriesCoefficient[Power[\[Sigma]1,4]#,{\[Sigma]1,\[Infinity],0}]&/@((int/.#1)/#2&@@@(#))]&/@solnData)]];


(* ::Subsection:: *)
(*Tree Amplitudes in CHY*)


treeTools`functionTypes["J",2]="Ingredients Used in the Formalism of CHY";
treeTools`functionNames["J",2]={"\[Sigma][a_]","\[Sigma][a_,b_]","chyCycle[n_]","chyCycle[{indexList__}]","pfaffian[matrix_]","chyPfaffianPrime[matrix_,ij_:]","",
"chyAmatrix[n_]","chyPsiMatrix[n_,abstractQ_:True]","","chyAPfaffianPrime[n_,ij_:]","chyPsiPfaffianPrime[n_,ij_:]","","chyAPfaffianPrime2InCycles[n_]","chyPsiPfaffianPrimeInCycles[n_]"};


chyCycle[{indices__Integer}]:=Power[Times@@\[Sigma]@@@Partition[{indices},2,1,1],-1];
chyCycle[{indicesA__Integer},{indicesB__Integer}]:=chyCycle[{indicesA}]chyCycle[{indicesB}];
chyCycle[n_Integer]:=chyCycle[Range[n]];

chyPfaffianPrime[matrix_List,{i_Integer,j_Integer}]/;EvenQ[Length[matrix]]&&(Length[Intersection[Range[Length[matrix]],{i,j}]]==2):=Power[\[Sigma][i,j],-1]Power[-1,i+j+1]Module[{reducedMat=matrix[[#,#]]&@(Complement[Range[Length[matrix]],{i,j}]),pms=treeTools`perfectMatchings[Length[matrix]-2]},Total[Signature[Flatten[#]](Times@@(reducedMat[[##]]&@@@#))&/@pms]];

chyPsiMatrix[n_Integer,abstractQ_:True]:=Module[{cMatrix=Array[If[#1===#2,If[Not[TrueQ[abstractQ]],Module[{range=Drop[Range[n],{#1}],first},first=First[range];(Sum[ss[\[Epsilon][#1],p[c]]*(\[Sigma][c,first]/(\[Sigma][c,#1]\[Sigma][#1,first])),{c,Drop[range,1]}])],-\[Epsilon]k[##]],ss[\[Epsilon][#1],p[#2]]/(\[Sigma][#1,#2])]&,{n,n}]},Join[Join[Array[If[#1===#2,0,s@@Sort[{##}]/(\[Sigma][#1,#2])]&,{n,n}],-Transpose[cMatrix],2],Join[cMatrix,Array[If[#1===#2,0,ss@@(\[Epsilon]/@(Sort[{##}]))/(\[Sigma][#1,#2])]&,{n,n}],2]]/.{\[Sigma][x__]:>Signature[{x}]\[Sigma]@@Sort[{x}]}];

chyAmatrix[n_Integer]/;EvenQ[n]:=chyPsiMatrix[n][[1;;n,1;;n]];

chyAPfaffianPrime[n_Integer,{i_Integer,j_Integer}]/;(n>=4&&Length[Intersection[Range[n],{i,j}]]==2):=chyPfaffianPrime[chyAmatrix[n],{i,j}];

chyAPfaffianPrime[n_Integer]/;n>=4:=chyAPfaffianPrime[n]=chyPfaffianPrime[chyAmatrix[n],{1,n}];

chyPsiPfaffianPrime[n_Integer,{i_Integer,j_Integer}]/;(n>=4&&Length[Intersection[Range[n],{i,j}]]==2):=chyPfaffianPrime[chyPsiMatrix[n,False],{i,j}];

chyPsiPfaffianPrime[n_Integer]/;n>=4:=chyPsiPfaffianPrime[n]=chyPsiPfaffianPrime[n,{1,n}];

chyPsiPfaffianPrimeInCycles[n_Integer]/;(n>3):=chyPsiPfaffianPrimeInCycles[n]=({#1,#2[[1]]}&@@@(treeTools`reduceCHYintegrandCyclesComplete[treeTools`chyPsiPfaffianPrimeCycleData[n,{1,n}]]));

chyAPfaffianPrime2InCycles[n_Integer]/;(n>3):=chyAPfaffianPrime2InCycles[n]=({#1,#2[[1]]}&@@@(treeTools`reduceCHYintegrandCyclesComplete[treeTools`chyAPfaffianPrimeCycleData[n,{1,n}]]));



treeTools`chyIntegrandFromCycleData[{num_,cycles_,chains_}]:=Block[{n=Max[Cases[{cycles,chains},q_Integer,{0,\[Infinity]}]]},((num*(Times@@((\[Sigma]@@#[[{-1,1}]])&/@chains))Power[(Times@@((Times@@(\[Sigma]@@@Partition[#,2,1,1]))&/@Select[cycles,Length[#]>1&]))*((Times@@((Times@@(\[Sigma]@@@Partition[#,2,1]))&/@chains))),-1])//.{\[Epsilon]k[a_,a_]:>Block[{b=Complement[Range[n],{a}][[1]]},Sum[If[MemberQ[{a,b},\[Beta]],0,ss[\[Epsilon][a],p[\[Beta]]] \[Sigma][b,\[Beta]]/(\[Sigma][a,b]\[Sigma][\[Beta],a])],{\[Beta],n}]]})/.{\[Sigma][x__]:>Signature[{x}]\[Sigma]@@Sort[{x}]}];

treeTools`chyAPfaffianPrimeCycleData[n_Integer,indices_List:{}]/;(EvenQ[n]&&(indices==={}||(Length[Intersection[indices,Range[n]]]==2))):=Module[{proj=If[indices==={},{1,n},indices],pmList=treeTools`perfectMatchings[n-2],pmSigns,cycles,nums,out},pmList=pmList/.Thread[Rule[Range[n-2],Complement[Range[n],Join[proj]]]];pmSigns=Signature[Flatten[#]]&/@pmList;nums=pmSigns*(Times@@@(s@@@Mod[#,n,1]&/@pmList));cycles=(Map[treeTools`findCHYCycleChains[Prepend[#,proj]]&,(Join@@@Tuples[Mod[pmList,n,1],{2}])]);out=Transpose[{Times@@@Tuples[nums,{2}],cycles}];out=treeTools`gatherPfaffianCycleDataComplete[Transpose[{Power[-1,Total[proj]](Times@@@(Times@@(Signature/@Partition[#,2,1,1])&/@#&/@out[[All,2]]))out[[All,1]],out[[All,2]],{}&/@Range[Length[cycles]]}]];If[proj==={1,n},Set[treeTools`chyAPfaffianPrimeCycleData[n,indices],out],out]];

treeTools`chyPsiPfaffianPrimeCycleData[n_Integer,{i_Integer,j_Integer}]/;(n>=4&&Length[Intersection[Range[n],{i,j}]]==2):=Module[{proj={i,j}},Module[{pmList=(treeTools`perfectMatchings[2n-2]/.Thread[Rule[Range[2n-2],Complement[Range[2n],proj]]]),nums,pmSigns,bLists,cLists,out,ordering},pmSigns=Signature[Flatten[#]]&/@pmList;nums=pmSigns*(Times@@@(Function[{x,y},Which[x<=n&&y<=n,s@@Sort[{x,y}],x<=n,If[Mod[y,n,1]==x,\[Epsilon]k[x,x],ss@@({\[Epsilon][Mod[y,n,1]],p[x]})],y>=n,ss@@(\[Epsilon]/@Mod[{x,y},n,1])]]@@@#&/@pmList));pmList=Mod[pmList,n,1];nums=(Times@@@(Signature/@DeleteCases[#,{x_,x_}]&/@pmList))*nums;pmList=Sort/@#&/@pmList;pmList=Prepend[#,Sort[Mod[proj,n,1]]]&/@pmList;cLists=Sort[(DeleteDuplicates/@Cases[#,{x_,x_}])]&/@pmList;bLists=Map[treeTools`findCHYCycleChains[#]&,((DeleteCases[#,{x_,x_}]&/@pmList))];nums=Power[-1,Total[proj]-1]*nums*(Map[(Times@@((Times@@(Signature/@Partition[#,2,1,1]))&/@#))&,bLists]);bLists=Join@@@Transpose[{bLists,cLists}];out=Map[treeTools`chyPsiPfaffianStandardizeCycleData,(Transpose[{nums,bLists,{}&/@Range[Length[pmSigns]]}])];If[proj==={1,n},Set[treeTools`chyPsiPfaffianPrimeCycleData[n,proj],out]];out]];

treeTools`perfectMatchings[n_Integer]/;EvenQ[n]:=treeTools`perfectMatchings[n]=Nest[(Join@@(Function[{ppm},Block[{remain=complement[Range[n],Join@@ppm]},If[Length[remain]==0,{ppm},(DeleteCases[Append[ppm,{remain[[1]],#}],{}]&/@remain[[2;;-1]])]]]/@#))&,{{{}}},n/2];

treeTools`chyPsiPfaffianStandardizeCycleData[{num_,cycles_,chains_}]:=Block[{singlets=Sort[Select[cycles,Length[#]==1&]],sign0,sign1,new,rest},rest=Complement[cycles,singlets];sign0=Times@@(Signature/@(Join@@(Partition[#,2,1,1]&/@rest)));new=Join[Sort[(Function[{list},Sort[Join[Partition[list,Length[list],1,1],Partition[Reverse@list,Length[list],1,1]]][[1]]]/@rest)]];sign1=Times@@(Signature/@(Join@@(Partition[#,2,1,1]&/@new)));{(num*(sign1*sign0)),Join[new,singlets],chains}];

treeTools`findCHYCycleChains[linkList_]:=If[linkList==={},{},Block[{chain=linkList[[1]],remaining=Drop[linkList,1],next},next=Select[remaining,MemberQ[#,chain[[-1]]]&,1];While[Length[next]==1,(chain=DeleteDuplicates[Append[chain,Complement[next[[1]],chain[[{-1}]]][[1]]]];remaining=Drop[remaining,Flatten[Position[remaining,next[[1]]]][[{1}]]];next=Select[remaining,MemberQ[#,chain[[-1]]]&,1];)];If[Length[remaining]==0,{DeleteDuplicates[chain]},Join[{DeleteDuplicates[chain]},treeTools`findCHYCycleChains[remaining]]]]];

treeTools`gatherPfaffianCycleData[termList_]:=Block[{n=Max[Cases[Flatten[termList[[All,2]]],q_Integer]]},{Total[#[[All,1]]],#[[1,2]],#[[1,3]]}&/@Gather[Sort[termList,OrderedQ[{Length/@#1[[2]],Length/@#2[[2]]}]&],#1[[2;;-1]]===#2[[2;;-1]]&]];

treeTools`gatherPfaffianCycleDataComplete[termList_]:=Module[{fullCycles=Select[termList,Length[#[[2]]]==1&&Length[#[[-1]]]==0&],standardized,n=Max[Cases[Flatten[termList[[All,2]]],q_Integer]]},standardized=Sort[Join[Join[Select[fullCycles,#[[2,1,-1]]==n&],Join@@(Function[{cycleData},Block[{reductionSet=(amp@@(cycleData[[2,1]])//.kkAmpReductionRule),sign},sign=FactorList[reductionSet][[1,1]];reductionSet=Cases[reductionSet,amp[x__]:>{x},{0,\[Infinity]}];{sign cycleData[[1]],{#},{}}&/@reductionSet]]/@Select[fullCycles,Not[#[[2,1,-1]]==n]&])],Sort[Select[termList,Not[Length[#[[2]]]==1&&Length[#[[-1]]]==0]&],OrderedQ[{Length/@#1[[2]],Length/@#2[[2]]}]&]],OrderedQ[{#1[[2]],#2[[2]]}]&];{Total[#[[All,1]]],#[[1,2]],#[[1,3]]}&/@Gather[standardized,#1[[2;;-1]]===#2[[2;;-1]]&]];

treeTools`reducePfaffianCycles[{num0_,cycles_,chains_}]:=If[Length[cycles]===1,{{num0,cycles,chains}},Block[{num=num0,aCycle,aPrime,bCycle,bPrime,rest,aCycleKin,pairs,ranges,mergedParts={},onChain={},extChains={},aCycleKill={}},If[Length[chains]>0,((*with some chain terminating on two general cycles*)aCycle=Select[cycles,MemberQ[#,chains[[1,-1]]]&,1][[1]];bCycle=Select[cycles,MemberQ[#,chains[[1,1]]]&,1][[1]];num=(num*(Times@@(Signature/@DeleteCases[Join[Partition[aCycle,2,1,1],Partition[bCycle,2,1,1]],{x_,x_}])));rest=complement[cycles,{aCycle,bCycle}];aCycle=RotateLeft[aCycle,Flatten[Position[aCycle,chains[[1,-1]]]][[1]]-1];bCycle=RotateLeft[bCycle,Flatten[Position[bCycle,chains[[1,1]]]][[1]]];num=(num*(Times@@(Signature/@DeleteCases[Join[Partition[aCycle,2,1,1],Partition[bCycle,2,1,1]],{x_,x_}])));aCycleKin=If[Length[aCycle]==1,aCycleKill={\[Epsilon]k[aCycle[[1]],aCycle[[1]]]->1};(*\[Epsilon]k[aCycle[[1]],aCycle[[1]]]*)1,s@@Sort[{Sort[aCycle],Complement[Flatten[Join[cycles,chains]],aCycle]}][[1]]];pairs=Tuples[((Range[Length[#]-1]&/@{aCycle,bCycle})/.{{}->{0}})];ranges={Drop[aCycle,1],Drop[bCycle,-1]};mergedParts=(Join@@(Function[{\[Alpha],\[Beta]},If[\[Beta]===0,{},Block[{a1,a2,b1,b2,shuffles,prefactor},a1=If[\[Alpha]==0,{},ranges[[1,1;;\[Alpha]-1]]];a2=If[\[Alpha]==0,{},ranges[[1,\[Alpha]+1;;-1]]];b1=ranges[[2,1;;\[Beta]-1]];b2=ranges[[2,\[Beta]+1;;-1]];prefactor=If[\[Alpha]==0,(-Power[-1,(\[Beta]-1)](ss[\[Epsilon][aCycle[[\[Alpha]+1]]],p[bCycle[[\[Beta]]]]]/(aCycleKin))),(-Power[-1,Length[aCycle]-2-\[Alpha]+(\[Beta]-1)](s@@Sort[{aCycle[[\[Alpha]+1]],bCycle[[\[Beta]]]}]/(aCycleKin)))];shuffles=Join[#,chains[[1,2;;-2]]]&/@(Join@@@Tuples[{If[\[Alpha]===0,{{aCycle[[1]]}},(RotateLeft[Join[{aCycle[[\[Alpha]+1]],aCycle[[1]]},#]]&/@(If[\[Alpha]===Length[ranges[[1]]],{Range[Length[aCycle]-2]},shuffle[\[Alpha]-1,Length[ranges[[1]]]-\[Alpha]]]/.Thread[Rule[Range[Length[aCycle]-2],Join[a1,Reverse[a2]]]]))],RotateLeft[Join[{bCycle[[-1]],bCycle[[\[Beta]]]},#]]&/@(If[\[Beta]===1,{Range[Length[bCycle]-2]},shuffle[Length[ranges[[2]]]-\[Beta],\[Beta]-1]]/.Thread[Rule[Range[Length[bCycle]-2],Join[b2,Reverse[b1]]]])}]);treeTools`chyPsiPfaffianStandardizeCycleData/@({(num/.aCycleKill)*prefactor,Append[rest,#],{}}&/@shuffles)]]]@@@pairs));onChain=Join@@(Function[{\[Alpha],\[Beta]},Block[{a1,a2,shuffles,prefactor,newChain},a1=If[\[Alpha]===0,{},ranges[[1,1;;\[Alpha]-1]]];a2=If[\[Alpha]===0,{},ranges[[1,\[Alpha]+1;;-1]]];prefactor=If[\[Alpha]==0,(Power[-1,\[Beta]](ss[\[Epsilon][aCycle[[\[Alpha]+1]]],p[chains[[1,\[Beta]+1]]]]/(aCycleKin))),(Power[-1,Length[aCycle]-1-\[Alpha]+\[Beta]-1](s@@Sort[{aCycle[[\[Alpha]+1]],chains[[1,\[Beta]+1]]}]/(aCycleKin)))];newChain=chains[[1,1;;\[Beta]+1]];If[Length[newChain]==2,(newChain={};prefactor=prefactor;),(prefactor=prefactor*Power[-1,Length[newChain]-1];)];shuffles=If[\[Alpha]===0,{Append[chains[[1,\[Beta]+1;;-2]],aCycle[[\[Alpha]+1]]]},(Join[chains[[1,\[Beta]+1;;-2]],#]&/@(RotateLeft[Join[{aCycle[[\[Alpha]+1]],aCycle[[1]]},#],1]&/@(If[\[Alpha]===Length[ranges[[1]]],{Range[Length[aCycle]-2]},shuffle[\[Alpha]-1,Length[ranges[[1]]]-\[Alpha]]]/.Thread[Rule[Range[Length[aCycle]-2],Join[a1,Reverse[a2]]]])))];treeTools`chyPsiPfaffianStandardizeCycleData/@({(num/.aCycleKill)*prefactor,Join[rest,{bCycle,#}],If[newChain==={},{},{newChain}]}&/@shuffles)]]@@@Tuples[{(Range[Length[aCycle]-1]/.{{}->{0}}),Range[Length[chains[[1]]]-2]}]);extChains=Join@@(Function[{\[Alpha],\[Beta]},Block[{a1,a2,shuffles,prefactor},a1=If[\[Alpha]===0,{},ranges[[1,1;;\[Alpha]-1]]];a2=If[\[Alpha]===0,{},ranges[[1,\[Alpha]+1;;-1]]];prefactor=If[\[Alpha]===0,(Power[-1,0](ss[\[Epsilon][aCycle[[\[Alpha]+1]]],p[\[Beta]]]/(aCycleKin))),(-Power[-1,Length[aCycle]-1-\[Alpha]](s@@Sort[{aCycle[[\[Alpha]+1]],\[Beta]}]/(aCycleKin)))];shuffles=If[\[Alpha]==0,({Append[chains[[1]],\[Beta]]}),(RotateLeft[Join[Join[{aCycle[[\[Alpha]+1]],\[Beta]},chains[[1]]],#],2]&/@(If[\[Alpha]===Length[ranges[[1]]],{Range[Length[aCycle]-2]},shuffle[\[Alpha]-1,Length[ranges[[1]]]-\[Alpha]]]/.Thread[Rule[Range[Length[aCycle]-2],Join[a1,Reverse[a2]]]]))];treeTools`chyPsiPfaffianStandardizeCycleData/@({(num/.aCycleKill)*prefactor,Append[rest,bCycle],{#}}&/@shuffles)]]@@@Tuples[{(Range[Length[aCycle]-1]/.{{}->{0}}),Join@@rest}]);Join[mergedParts,onChain,extChains]),((*Two or more cycles with NO chains*)bCycle=Join[Select[cycles,Length[#]==1&],Select[Sort[cycles,Length[#1]>=Length[#2]&],Length[#]>1&]];(*Consider re-ordering the default choice for B --- possibly to force-select small cycles*)(bCycle=bCycle[[-1]];rest=complement[cycles,{bCycle}];);aCycle=rest;(*Consider re-ordering the default choice --- possibly to force-select 1-cycles*)aCycle=Join[Select[aCycle,Length[#]==1&],Select[Sort[aCycle,Length[#1]>=Length[#2]&],Length[#]>1&]];(aCycle=aCycle[[1]];rest=complement[rest,{aCycle}];);aCycleKin=If[Length[aCycle]==1,aCycleKill={\[Epsilon]k[aCycle[[1]],aCycle[[1]]]->1};1(*\[Epsilon]k[aCycle[[1]],aCycle[[1]]]*),s@@Sort[{Sort[aCycle],Complement[Flatten[Join[cycles,chains]],aCycle]}][[1]]];pairs=Tuples[((Range[Length[#]-1]&/@{aCycle,bCycle})/.{{}->{0}})];ranges={Drop[aCycle,1],Drop[bCycle,-1]};mergedParts=(Join@@(Function[{\[Alpha],\[Beta]},If[\[Beta]===0,{},Block[{a1,a2,b1,b2,shuffles,prefactor},a1=If[\[Alpha]===0,{},ranges[[1,1;;\[Alpha]-1]]];a2=If[\[Alpha]===0,{},ranges[[1,\[Alpha]+1;;-1]]];b1=ranges[[2,1;;\[Beta]-1]];b2=ranges[[2,\[Beta]+1;;-1]];prefactor=If[\[Alpha]===0,(Power[-1,(\[Beta]-1)](ss[\[Epsilon][aCycle[[\[Alpha]+1]]],p[bCycle[[\[Beta]]]]]/(aCycleKin))),(Power[-1,Length[aCycle]-2-\[Alpha]+(\[Beta]-1)](s@@Sort[{aCycle[[\[Alpha]+1]],bCycle[[\[Beta]]]}]/(aCycleKin)))];shuffles=Join@@@Tuples[{If[\[Alpha]===0,{{aCycle[[1]]}},RotateLeft[Join[{aCycle[[\[Alpha]+1]],aCycle[[1]]},#]]&/@(If[\[Alpha]===Length[ranges[[1]]],{Range[Length[aCycle]-2]},shuffle[\[Alpha]-1,Length[ranges[[1]]]-\[Alpha]]]/.Thread[Rule[Range[Length[aCycle]-2],Join[a1,Reverse[a2]]]])],RotateLeft[Join[{bCycle[[-1]],bCycle[[\[Beta]]]},#]]&/@(If[\[Beta]===1,{Range[Length[bCycle]-2]},shuffle[Length[ranges[[2]]]-\[Beta],\[Beta]-1]]/.Thread[Rule[Range[Length[bCycle]-2],Join[b2,Reverse[b1]]]])}];treeTools`chyPsiPfaffianStandardizeCycleData/@({(num0/.aCycleKill)*prefactor,Append[rest,#],chains}&/@shuffles)]]]@@@pairs));extChains=Join@@(Function[{\[Alpha],\[Beta]},Block[{a1,a2,shuffles,prefactor},a1=If[\[Alpha]===0,{},ranges[[1,1;;\[Alpha]-1]]];a2=If[\[Alpha]===0,{},ranges[[1,\[Alpha]+1;;-1]]];prefactor=If[\[Alpha]===0,(Power[-1,1](ss[\[Epsilon][aCycle[[\[Alpha]+1]]],p[\[Beta]]]/(aCycleKin))),(Power[-1,Length[aCycle]-1-\[Alpha]](s@@Sort[{aCycle[[\[Alpha]+1]],\[Beta]}]/(aCycleKin)))];shuffles=If[\[Alpha]==0,({{bCycle[[-1]],aCycle[[1]],\[Beta]}}),(RotateLeft[Join[Join[{aCycle[[\[Alpha]+1]],\[Beta]},{bCycle[[-1]],aCycle[[1]]}],#],2]&/@(If[\[Alpha]===Length[ranges[[1]]],{Range[Length[aCycle]-2]},shuffle[\[Alpha]-1,Length[ranges[[1]]]-\[Alpha]]]/.Thread[Rule[Range[Length[aCycle]-2],Join[a1,Reverse[a2]]]]))];treeTools`chyPsiPfaffianStandardizeCycleData/@({(num/.aCycleKill)*prefactor,Append[rest,bCycle],{#}}&/@shuffles)]]@@@Tuples[{(Range[Length[aCycle]-1]/.{{}->{0}}),Join@@rest}]);Join[mergedParts,extChains])]]];

treeTools`reduceCHYintegrandCyclesComplete[terms_]:=Block[{level1=FixedPoint[(Function[{termList},Block[{fullList=(Join@@(Function[{term},If[Count[Length/@term[[2]],1]>0,treeTools`reducePfaffianCycles[term],{term}]]/@termList))},treeTools`gatherPfaffianCycleData[fullList]]]),treeTools`gatherPfaffianCycleData[terms]]},treeTools`gatherPfaffianCycleDataComplete[FixedPoint[(Function[{termList},Block[{fullList=Join@@(treeTools`reducePfaffianCycles/@termList)},treeTools`gatherPfaffianCycleData[fullList]]]),level1]]];



(* ::Subsection:: *)
(*Analytic Representations of Amplitudes*)


treeTools`functionTypes["J",3]="Representations of Tree Amplitudes in the Formalism of CHY";
treeTools`functionNames["J",3]={
"biadjointScalarCHYintegrand[n_]","","nlsmCHYintegrand[n_]","","specialGalileonCHYintegrand[n_]","",
"ymCHYintegrand[n_]","",
"grCHYintegrand[n_]"};


biadjointScalarCHYintegrand[n_Integer]/;n>3:=Power[1/Times@@\[Sigma]@@@Partition[Range[n],2,1,1],2];

nlsmCHYintegrand[n_Integer]/;EvenQ[n]:=Power[Times@@\[Sigma]@@@Partition[Range[n],2,1,1],-1]Power[-1,1+n-Floor[n/2]]Power[\[Sigma][1,n],-2]Power[pfaffian[chyAmatrix[n][[2;;-2,2;;-2]]],2]

specialGalileonCHYintegrand[n_Integer]/;EvenQ[n]:=Power[\[Sigma][1,n],-4]Power[pfaffian[chyAmatrix[n][[2;;-2,2;;-2]]],4];

diracBornInfeldCHYintegrand[n_Integer]/;EvenQ[n]:=-(chyPsiPfaffianPrime[n])(chyAPfaffianPrime[n])^2;

ymCHYintegrand[n_Integer]/;n>3:=Power[-1,Floor[n/2]](chyPsiPfaffianPrime[n])Power[Times@@\[Sigma]@@@Partition[Range[n],2,1,1],-1];

grCHYintegrand[n_Integer]/;n>3:=Power[chyPsiPfaffianPrime[n],2];


(* ::Subsection:: *)
(*Twistor String Theory in the Grassmannian*)


treeTools`functionTypes["J",4]="Grassmannian Representation of the Twistor String";
treeTools`functionNames["J",4]={
"gaugeFixedGrassmannianRepresentative[n_,{gaugeFixedColumns__}]","gaugeFixedGrassmannianRepresentative[n_,k_]","",
"grassmannianKinematicEquations[matrix_]","",
"veroneseContourConditions[n_,k_,deformedQ_:False]","grassmannianTwistorStringMeasure[n_,k_,canonicalChartQ_:]","",
"solveTwistorStringEquations[n_,k_]","",
"fromGrassmannianToScatteringEqnSolns[n_,k_]"};


gaugeFixedGrassmannianRepresentative[n_Integer,{gauge__Integer}]/;Max[{gauge}]<=n:=Array[If[MemberQ[{gauge},#2],KroneckerDelta[{gauge}[[#1]],#2],m@@ReplacePart[{gauge},#1->#2]]&,{Length[{gauge}],n}];
gaugeFixedGrassmannianRepresentative[n_Integer,k_Integer]/;0<=k<=n-4:=gaugeFixedGrassmannianRepresentative[n,Range[k+2]];

grassmannianKinematicEquations[matrix_List]/;MatrixQ[matrix]&&Length[First[matrix]]==Length[Ls]:=Join[Flatten[matrix . Lbs],Flatten[NullSpace[matrix] . Ls]];
grassmannianKinematicEquations[positroid[matrix_List]]/;Length[First[matrix]]==Length[Ls]:=grassmannianKinematicEquations[matrix];

veroneseContourConditions[n_Integer,k_Integer,tQ_:False]/;MemberQ[Range[0,n-4],k]:=#1-If[TrueQ[tQ],t,1]#2&@@@(Times@@@#&/@(m@@@#&/@#&/@Flatten[Table[List[Join[Range[1,j-1],Range[l-k+j-2,l-3],#]&/@List[{l-2,l-1,l},{l,j,j+1},{j+1,j+2,l-2},{l-1,j,j+2}],Join[Range[1,j-1],Range[l-k+j-2,l-3],#]&/@List[{l-1,l,j},{j,j+1,j+2},{j+2,l-2,l-1},{l,j+1,l-2}]],{l,k+5,n},{j,1,k}],1]));

grassmannianTwistorStringMeasure[n_Integer,k_Integer,canonicalChartQ_:False]/;MemberQ[Range[0,n-4],k]:=(superFunction[(treeTools`veroneseContourMeasure[n,k]/.If[TrueQ[canonicalChartQ],{m[x__]:>Det[gaugeFixedGrassmannianRepresentative[n,k][[All,{x}]]]},{}]),gaugeFixedGrassmannianRepresentative[n,k][[3;;-1]]]/.superFunction[x_,{}]:>x);

solveTwistorStringEquations[n_Integer,k_Integer]/;n>=4&&(n===Length[Ls])&&MemberQ[Range[0,n-4],k]:=If[Head[treeTools`grassmannianTwistorStringSolnsN[n,k,Ls]]===List,treeTools`grassmannianTwistorStringSolnsN[n,k,Ls],Block[{mat=gaugeFixedGrassmannianRepresentative[n,k],veroneseList=(veroneseContourConditions[n,k]/.t->1),eqns,jacList,solnList},veroneseList=Join@@(veroneseList/.(Thread[Rule[Range[n],#]]&/@Join[Partition[Range[n],n,1,1],Partition[Reverse@Range[n],n,1,1],randomPerm[n]&/@Range[50]]));eqns=Join[(grassmannianKinematicEquations[mat]),(veroneseList/.{m[x__]:>Det[mat[[All,{x}]]]})];solnList=Block[{soln,t0=AbsoluteTime[]},soln=If[MemberQ[{0,n-4},k],Solve[eqns==0],Quiet[NSolve[eqns==0,WorkingPrecision->1000]]];If[(AbsoluteTime[]-t0)>5,Print["Solving the kinematic constratint equations for k=",k," required ",niceTime[AbsoluteTime[]-t0]]];soln];jacList=Power[Det[Ls[[{1,2}]]],2](*Times@@(Signature[Ordering[#]]&/@List@@@Variables[mat])*)(Det[D[eqns[[Range[Length[Variables[mat]]]+4]],{Flatten@(Reverse/@Transpose@Reverse[mat[[All,k+3;;-1]]])}]/.#]&/@solnList);Set[treeTools`grassmannianTwistorStringSolnsN[n,k,Ls],Transpose[{solnList,jacList}]]]];

fromGrassmannianToScatteringEqnSolns[n_Integer,k_Integer]/;n>=4&&MemberQ[Range[0,n-4],k]:=Join[{\[Sigma][1]->\[Infinity],\[Sigma][2]->0,\[Sigma][3]->1},Thread[Rule[\[Sigma]/@Range[4,n],(Join[(m@@ReplacePart[Range[k+2],{2->k+3,2+#->k+4}]m@@ReplacePart[Range[k+2],{3->k+3,1->k+4}])/(m@@ReplacePart[Range[k+2],{2+#->k+3,1->k+4}]m@@ReplacePart[Range[k+2],{2->k+3,3->k+4}])&/@Range[2,k],-((m@@ReplacePart[Range[k+2],1->k+2+#]m@@ReplacePart[Range[k+2],{3->k+3,1->k+4}]m@@ReplacePart[Range[k+2],{2->k+3}]m@@ReplacePart[Range[k+2],{2->k+4}])/(m@@ReplacePart[Range[k+2],2->k+2+#]m@@ReplacePart[Range[k+2],{2->k+3,2+1->k+4}]m@@ReplacePart[Range[k+2],{1->k+4}]m@@ReplacePart[Range[k+2],{1->k+3}]))&/@Range[n-k-2]])]]];

treeTools`veroneseContourMeasure[n_Integer,k_Integer]/;MemberQ[Range[0,n-4],k]:=Which[k==0,1/Times@@(m@@@Partition[Range[n],2,1,1]),k==n-4,1/Times@@(m@@@Partition[Range[n],n-2,1,1]),True,Times@@(Join@@(m@@@#&/@(Select[#,Not[MemberQ[Sort/@Partition[Range[n],k+2,1,1],Sort[#]]]&]&/@(Flatten[Table[List[Join[Range[1,j-1],Range[l-k+j-2,l-3],#]&/@List[{l-2,l-1,l},{l,j,j+1},{j+1,j+2,l-2},{l-1,j,j+2}],Join[Range[1,j-1],Range[l-k+j-2,l-3],#]&/@List[{l-1,l,j},{j,j+1,j+2},{j+2,l-2,l-1},{l,j+1,l-2}]],{l,k+5,n},{j,1,k}],1][[All,1]]))))/(Times@@(m@@@Partition[Range[n],k+2,1,1][[{1,3,-2}]]))];


(* ::Subsection:: *)
(*RSV Representation of the Twistor String*)


treeTools`functionTypes["J",5]="Connected Prescription for Twistor String Theory (RSV)";
treeTools`functionNames["J",5]={"\[Xi][a_]","\[Sigma][a_]","\[Sigma][a_,b_]","",
"rsvMatrix[n_,k_]","rsvMeasure[n_,k_]","",
"solveRSVequations[n_,k_]","","fromRSVtoScatteringEquationSolns[n_]"};


rsvMatrix[n_,k_]/;MemberQ[Range[0,n-4],k]:=Array[If[#2<=k+2,If[#2==#1,1,0],(1/\[Xi][#2]\[Xi][#1])/If[#1>1,(\[Sigma][#1,#2]),1]]&,{k+2,n}]/.{\[Xi][1]->1,\[Xi][2]->1,\[Sigma][2,y_]:>-\[Sigma][y]};

rsvMeasure[n_Integer,k_Integer]:=superFunction[Power[-1,k+Floor[n/2]-1]1/\[Sigma][3]/Times@@((\[Sigma][#1,#2]&@@@Partition[Range[3,n],2,1]))/Times@@\[Xi]/@Range[3,n],rsvMatrix[n,k][[3;;-1]]]/.superFunction[x_,{}]:>x;

solveRSVequations[n_Integer,k_Integer]/;n>=4&&(n===Length[Ls])&&MemberQ[Range[0,n-4],k]:=If[Head[treeTools`rsvEqnSolnsN[n,k,Ls]]===List,treeTools`rsvEqnSolnsN[n,k,Ls],Block[{mat=gaugeFixedGrassmannianRepresentative[n,Range[k+2]],grassmannianSolutions,rsvMat,eqns,jacList,solns0,solns},rsvMat=(rsvMatrix[n,k]/.\[Sigma][x_,y_]:>\[Sigma][x]-\[Sigma][y]);eqns=grassmannianKinematicEquations[rsvMat];solns0=solveTwistorStringEquations[n,k];solns=If[MemberQ[{0,n-4},k],Solve[rsvMat-(mat/.#)==0][[1]]&/@solns0[[All,1]],(Quiet[NSolve[Flatten[rsvMat[[All,k+3;;-1]]-(mat[[All,k+3;;-1]]/.#)]==0,WorkingPrecision->800][[1]]]&/@solns0[[All,1]])];jacList=Power[Det[Ls[[{1,2}]]],2](Det[D[eqns[[5;;-1]],{Variables[rsvMat]}]/.#]&/@solns);Set[treeTools`rsvEqnSolnsN[n,k,Ls],Transpose[{solns,jacList}]]]];

fromRSVtoScatteringEquationSolns[n_Integer]/;n>=4:=Join[{\[Sigma][1]->\[Infinity],\[Sigma][2]->0,\[Sigma][3]->1},Thread[Rule[\[Sigma]/@Range[4,n],(\[Sigma]/@Range[4,n]/\[Sigma][3])]]];


(* ::Section:: *)
(*Positroids, Combinatorics and On-Shell Functions*)


treeTools`functionTypes["K"]="Positroids: Grassmannian Geometry of On Shell Functions";


(* ::Subsection:: *)
(*Positroid Labeling of superFunctions and Positroid Representatives*)


treeTools`functionTypes["K",1]="Positroid Labeling of superFunctions";
treeTools`functionNames["K",1]={"\[Sigma][perm__]","positroid[matrix_]","","positroidLabel[superFunction[f_,C_]]","positroidLabel[cMatrix_]","",
"toTwistorPositroidLabels[\[Sigma][perm__]]","toSpinorPositroidLabels[\[Sigma][perm__]]"};


positroidLabel[matrix_List]/;MatrixQ[matrix]:=Block[{mat=matrix,n=Length[matrix[[1]]]},mat=If[treeTools`numericMatrixQ[matrix]&&Length[matrix[[1]]]===Length[Ls],If[DeleteDuplicates[Flatten[mat . Lbs]]==={0},Join[Transpose[Ls],mat],mat],If[Count[mat,ab[a_Integer,b___,y_Integer,c___,d_Integer]|ab[r___,cap[q__],s___]|\[Alpha][__],{0,\[Infinity]}]>0||treeTools`numericMatrixQ[matrix],explicify[n,mat],Join[Transpose[treeTools`referenceTwistorList[[1;;n,1;;2]]],explicify[n,mat]]]];\[Sigma]@@(Function[{rot},If[MatrixRank[rot[[{1}]]]==0,0,Select[Range[2,n+1],MatrixRank[rot[[2;;#1]]]==MatrixRank[rot[[1;;#1]]]&,1][[1]]-1]]/@Partition[Transpose[mat],n+1,1,1]+Range[n])];
positroidLabel[superFunction[fcn_,matrix_]]:=positroidLabel[matrix];
positroidLabel[positroid[matrix_]]:=positroidLabel[matrix];

positroidLabel[Times[a_R,b___R]]:=(positroidLabel[toSuperTwistorFunctions[][Times[a,b]]]);
positroidLabel[a_R]:=positroidLabel[toSuperSpinorFunctions[][a]];



(* ::Subsubsection:: *)
(*Conversions Between Spinor and Twistor Positroid Labels*)


toTwistorPositroidLabels[\[Sigma][perm__Integer]]:=If[Min[({perm}-Range[Length[{perm}]])]>=2,(rotatePositroidLabel[1][\[Sigma]@@({perm}-2)]),Nothing];

toSpinorPositroidLabels[\[Sigma][perm__Integer]]:=(rotatePositroidLabel[-1][\[Sigma]@@({perm}+2)]);



(* ::Subsection:: *)
(*Manipulations of Positroid Labels*)


treeTools`functionTypes["K",2]="General Manipulations of Positroid Labels";
treeTools`functionNames["K",2]={"\[Sigma][perm__]","","decoratePermutation[\[Sigma][perm__]]","parityConjugatePositroid[\[Sigma][perm__]]",
"rotatePositroidLabel[rotation_:1][\[Sigma][perm__]]","positroidCyclicRep[\[Sigma][perm__]]"};


decoratePermutation[\[Sigma][perm__Integer]]/;Length[DeleteDuplicates[{perm}]]==Length[{perm}]:=Block[{n=Length[{perm}]},\[Sigma]@@(If[OrderedQ[#],#[[2]],#[[2]]+n]&/@Transpose[{Range[n],{perm}}])];

parityConjugatePositroid[\[Sigma][permLabel__Integer]]:=Block[{n=Length[{permLabel}],vanishing=positroids`identityLabelDecorations[\[Sigma][permLabel]]},\[Sigma]@@((List@@decoratePermutation[\[Sigma]@@Ordering[Mod[{permLabel},n,1]]])+Normal[SparseArray[#->n&/@vanishing[[1]],n]])];

rotatePositroidLabel[rotation_:1][\[Sigma][permLabel__Integer]]:=\[Sigma]@@(RotateRight[{permLabel}-Range[Length[{permLabel}]],rotation]+Range[Length[{permLabel}]]);

positroidCyclicRep[\[Sigma][perm__Integer]]:=Sort[NestList[rotatePositroidLabel[1][#]&,decoratePermutation[\[Sigma][perm]],Length[{perm}]-1]][[1]];



(* ::Subsubsection:: *)
(*Internal Tools*)


positroids`identityLabelDecorations[\[Sigma][permutation__Integer]]:={Cases[Transpose[{Range[Length[{permutation}]],{permutation}}],{x_,x_}][[All,1]],Cases[Transpose[{Range[Length[{permutation}]],{permutation}-Length[{permutation}]}],{x_,x_}][[All,1]]};
positroids`removeFixedPoints[\[Sigma][perm__Integer],fullQ_:False]:=Block[{reduced=DeleteCases[Transpose[{Range[Length[{perm}]],If[TrueQ[fullQ],Mod[{perm},Length[{perm}],1],{perm}]}],{x_,x_}]},decoratePermutation[\[Sigma]@@(reduced[[All,2]]/.Thread[Rule[Join[#,#+Length[{perm}]]&@reduced[[All,1]],Range[2Length[reduced]]]])]];



(* ::Subsection:: *)
(*Combinatorial and Geometric Aspects of Positroids and Related Tools*)


treeTools`functionTypes["K",3]="Positroid Geometry and Combinatorial Data";
treeTools`functionNames["K",3]={"positroidRank[\[Sigma][perm__]]","positroidGeometry[\[Sigma][perm__]]","",
"positroidNecklace[\[Sigma][perm__]]","positroidNecklaceToPerm[{necklace__m}]","positroidTropicalFaceLabels[\[Sigma][perm__]]","",
"positroidBridgeChain[\[Sigma][perm__],randomQ_:False]",
"positroidBridgeChainToFaceLabels[{transpositions__\[Tau]}]","positroidBridgeChainToTropicalLabels[{transpositions__\[Tau]}]","","positroidRepresentative[\[Sigma][perm__]]","bridgeChainRepresentative[{transpositions__\[Tau]}]","positiveChartQ[positroid[mat_]]"};


(* ::Subsubsection:: *)
(*Positroid Geometry*)


positroidRank[\[Sigma][perm__]]:=Length[Select[List@@decoratePermutation[\[Sigma][perm]],#>Length[{perm}]&]]-2;

positroidGeometry[\[Sigma][perm__Integer]]:=Block[{n=Length[{perm}],geom=positroids`geometry[\[Sigma][perm]],vanishing=Flatten[positroids`identityLabelDecorations[\[Sigma][perm]]],highlightRule},geom=complement[#,vanishing]&/@#&/@geom;highlightRule=Thread[Rule[#,Style[#,Blue]&/@#&/@#]]&@DeleteCases[Mod[Range@@@Transpose[{Range[n]+1,{perm}-1}],n,1],{}];Column[Row/@(Row[{"(",Sequence@@Riffle[#,","],")"}]&/@#&/@(geom/.highlightRule)),Alignment->Center]];

positroids`rangeRank[\[Sigma][perm__Integer]][{a_,b_}]:=Block[{extended=Join[{perm}-Length[{perm}],{perm},{perm}+Length[{perm}]],n=Length[{perm}]},Length[Select[extended[[Range[n]+a-1]],MemberQ[Range[a,b],#]&]]];
positroids`geometry[\[Sigma][perm__Integer]]:=positroids`geometry[\[Sigma][perm]]=Block[{n=Length[{perm}],necklace=List@@@positroidNecklace[\[Sigma][perm],True],k=positroidRank[\[Sigma][perm]]+2,rangeSeeds},rangeSeeds=Table[(Function[{ephk},Select[Range[necklace[[j,1]],necklace[[j,-1]]],positroids`rangeRank[\[Sigma][perm]][{j,#}]==ephk&][[-1]]]/@Range[k-1]),{j,n}];Sort[#,OrderedQ[{#1[[1]],#2[[1]]}]&]&/@DeleteDuplicates/@(If[OrderedQ[#],Range@@#,Mod[Range[#[[1]],#[[2]]+n],n,1]]&/@#&/@Transpose[Table[Function[{seedRange,rank},Mod[{j-#+1,seedRange},n,1]&@(Select[Range[n],positroids`rangeRank[\[Sigma][perm]][{n+j-#,seedRange+n}]==rank+1&,1][[1]])]@@@Transpose[{rangeSeeds[[j]],Range[k-1]}],{j,n}]])];


(* ::Subsubsection:: *)
(*Grassmannian "Necklace"*)


positroidNecklace[\[Sigma][perm__],cycleQ_:False]:=If[Not[TrueQ[cycleQ]],(positroidNecklace[\[Sigma][perm],True]/.{m[x__]:>m@@Sort[Mod[{x},Length[{perm}],1]]}),Set[positroidNecklace[\[Sigma][perm],cycleQ],Block[{n=Length[{perm}]},m@@@Function[{a},If[TrueQ[cycleQ],Sort[#]+a-1-n,Sort[Mod[#+a-1,n,1]]]&@Select[List@@rotatePositroidLabel[1-a][\[Sigma][perm]],#>n&]]/@Range[n]]]];

positroidNecklaceToPerm[necklace__m]:=Block[{n=Length[{necklace}],data=List@@@{necklace}},decoratePermutation[\[Sigma]@@(If[SameQ@@#1,#2+If[MemberQ[#1[[1]],#2],n,0],Complement[#1[[2]],Intersection@@#1][[1]]]&@@@Transpose[{Partition[data,2,1,1],Range[n]}])]];
positroidNecklaceToPerm[{necklace__m}]:=positroidNecklaceToPerm[necklace];

positroidTropicalFaceLabels[\[Sigma][perm__Integer]]:=positroidTropicalFaceLabels[\[Sigma][perm]]=positroids`tropicalizeFaceLabels[positroids`canonicalBridgeFaceLabels[\[Sigma][perm]]];



(* ::Subsubsection:: *)
(*Parameterized, Matrix Representatives of Positroid Varieties*)


positroidBridgeChain[\[Sigma][perm__Integer],randomQ_:False]:=positroids`bridgeChain[\[Sigma][perm],randomQ];

bridgeChainToPositroidLabel[{}]={};
bridgeChainToPositroidLabel[{\[Tau][a_Integer,b_Integer]}]:=Module[{n=Max[{a,b}]},\[Sigma]@@ReplacePart[Range[n],{Min[{a,b}]->Max[{a,b}],Max[{a,b}]->Min[{a,b}]+Max[{a,b}]}]];
bridgeChainToPositroidLabel[{\[Tau][a_Integer,b_Integer],others__\[Tau]}]:=bridgeChainToPositroidLabel[{\[Tau][a,b],others}]=Module[{lower=List@@bridgeChainToPositroidLabel[{others}],conjQ,n,new},n=Max[{a,b,Length[lower]}];lower=PadRight[((lower/.{q_Integer:>If[q>Length[lower],q+n-Length[lower],q]})-Range[Length[lower]]),n]+Range[n];If[lower[[a]]===a,lower=ReplacePart[lower,{a->a+n}]];lower=Join[lower,lower+n];If[(lower[[a]]>=lower[[b+If[b<a,n,0]]])&&(Length[DeleteCases[Transpose[{Mod[Range[a+1,b+If[b<a,n,0]-1],n,1],Mod[lower[[a+1;;b+If[b<a,n,0]-1]],n,1]}],{x_,x_}]]==0),\[Sigma]@@(ReplacePart[lower,{a->lower[[b+If[b<a,n,0]]],b->lower[[a]]-If[b<a,n,0]}][[1;;n]]),decoratePermutation[\[Sigma]@@((Mod[lower[[1;;n]],n,1]/.{a->b,b->a}))]]];
bridgeChainToPositroidLabel[{{bridges__\[Tau]},\[Sigma][x__]}]:=bridgeChainToPositroidLabel[{bridges}];

positroidBridgeChainToFaceLabels[{bridges__\[Tau]}]:=m@@@(positroids`bridgeChainToFaceLabels[{bridges}]);
positroidBridgeChainToFaceLabels[{{bridges__\[Tau]},\[Sigma][x__]}]:=positroidBridgeChainToFaceLabels[{bridges}];

positroidBridgeChainToTropicalLabels[{bridges__\[Tau]}]:=positroids`tropicalizeFaceLabels[(positroids`bridgeChainToFaceLabels[{bridges}])];
positroidBridgeChainToTropicalLabels[{{bridges__\[Tau]},\[Sigma][x__]}]:=positroidBridgeChainToTropicalLabels[{bridges}];

bridgeChainToRepresentative[{\[Tau][a_Integer,b_Integer]}]:=positroid[{Normal[SparseArray[{a->1,b->\[Alpha][1]},Max[{a,b}]]]}];
bridgeChainToRepresentative[{\[Tau][a_Integer,b_Integer],others__\[Tau]}]:=bridgeChainToRepresentative[{\[Tau][a,b],others}]=Module[{lower=bridgeChainToRepresentative[{others}][[1]],gauge,lowerPerm=List@@(bridgeChainToPositroidLabel[{others}]),changeVars,newVar=\[Alpha][1+Length[{others}]],n},n=Max[{a,b,Length[lowerPerm]}];gauge=Function[{chain},chain[[Select[Reverse@Range[Length[chain]],Not[MemberQ[Flatten[List@@@chain[[#+1;;-1]]],chain[[#,1]]]]&],1]]][{\[Tau][a,b],others}];lowerPerm=PadRight[((lowerPerm/.{q_Integer:>If[q>Length[lowerPerm],q+n-Length[lowerPerm],q]})-Range[Length[lowerPerm]]),n]+Range[n];If[lowerPerm[[a]]===a,lowerPerm=ReplacePart[lowerPerm,{a->a+n}]];changeVars=If[Not@MemberQ[gauge,a]||lowerPerm[[a]]!=a+n,Thread[Rule[\[Alpha]/@Range[Length[{others}]],\[Alpha]/@Range[Length[{others}]]]],Thread[Rule[\[Alpha]/@Range[Length[{others}]],((If[MemberQ[Range@@(Sort@(List@@#)+{1,0}),a],-1,1]&/@Reverse@{others}))*(\[Alpha]/@Range[Length[{others}]])]]];lower=Transpose[Join[PadRight[lower,{Length[lower],n}],If[lowerPerm[[a]]===a+n,{Normal[SparseArray[{a->1},n]]},{}]][[If[lowerPerm[[a]]===a+n,Ordering[Append[Sort[gauge[[1;;-2]]],gauge[[-1]]]],Range[Length[gauge]]]]]];lowerPerm=Join[lowerPerm,lowerPerm+n];lower=lower/.changeVars;newVar=Power[-1,If[a<b,Length[Intersection[gauge,Range[a+1,b-1]]],Length[Intersection[gauge,Range[b+1,a-1]]]]]newVar;positroid@(Transpose[ReplacePart[lower,b->{newVar,1} . lower[[{a,b}]]]])];
bridgeChainToRepresentative[{{bridges__\[Tau]},\[Sigma][x__]}]:=bridgeChainToRepresentative[{bridges}];

positroidRepresentative[\[Sigma][permutation__Integer]]:=positroidRepresentative[\[Sigma][permutation]]=Module[{n=Length[{permutation}],bridge=positroids`bridgeBoundary[\[Sigma][permutation]],newVar,lower,gf,k},If[bridge==={},(If[{permutation}===Range[n],{{}},(gf=Cases[Transpose[{Range[n],{permutation}-n}],{x_,x_}][[All,1]];k=Length[gf];positroid[PadRight[IdentityMatrix[k],{k,n}][[All,Ordering[DeleteDuplicates[Join[gf,Range[n]]]]]]])]),(lower=Transpose[positroidRepresentative[bridge[[-1]]][[1]]];newVar=bridge[[2]]\[Alpha][Length[Variables[lower]]+1];positroid[Transpose[ReplacePart[lower,{bridge[[1,2]]->{newVar,1} . lower[[List@@bridge[[1]]]]}]]])]];
positroidRepresentative[\[Sigma][permutation__Integer],False]:=positroidRepresentative[\[Sigma][permutation]];
positroidRepresentative[\[Sigma][permutation__Integer],True]:=Module[{n=Length[{permutation}],bridge,newVar,lower,gf,k,rot,conjQ=RandomChoice[{True,False}]},If[Mod[{permutation},n,1]===Range[n],positroidRepresentative[\[Sigma][permutation]],(rot=RandomInteger[{0,n-1}];bridge=If[conjQ,({\[Tau]@@(Mod[Reverse[List@@#1]+rot,n,1]),#3,parityConjugatePositroid[rotatePositroidLabel[rot][#4]]}&@@positroids`bridgeBoundary[rotatePositroidLabel[-rot][parityConjugatePositroid[\[Sigma][permutation]]]]),({\[Tau]@@(Mod[(List@@#1)+rot,n,1]),#2,rotatePositroidLabel[rot][#4]}&@@positroids`bridgeBoundary[rotatePositroidLabel[-rot][\[Sigma][permutation]]])];(lower=Transpose[positroidRepresentative[bridge[[-1]],True][[1]]];newVar=bridge[[2]]\[Alpha][Length[Variables[lower]]+1];positroid[Transpose[ReplacePart[lower,{bridge[[1,2]]->{newVar,1} . lower[[List@@bridge[[1]]]]}]]]))]];

positiveChartQ[mat_List]/;MatrixQ[mat]:=Block[{nMat=explicify[mat],n=Length[mat[[1]]],k=Length[mat]},If[Length[Select[Subsets[Range[n],{k}],Det[nMat[[All,#]]]<0&,1]]==1,False,True]];
positiveChartQ[positroid[mat_List]]:=positiveChartQ[mat];


positroids`boundaryTranspositions[\[Sigma][permLabel__Integer]]:=positroids`boundaryTranspositions[\[Sigma][permLabel]]=Block[{n=Length[{permLabel}],diffList},diffList={permLabel}-Range[n];Join@@Tuples/@Transpose[{Partition[Range[n],1],(Function[{rot},If[MemberQ[{n,0},rot[[1]]],{},Select[Range[rot[[1]]]+1,(rot[[#]]+#<=n+1)(*&&(rot[[#]]<n)*)&&OrderedQ[rot[[{1,#}]]+{0,#-1}]&&(#<=n)&&(Function[{image},Length[Select[Range[2,image-1],rot[[1]]<=rot[[#]]+#-1<=rot[[image]]+image-1<=rot[[1]]+n&]]==0][#])&]]]/@Partition[diffList,n,1,1])+Range[n]-1}]];

positroids`bridgeBoundaries[\[Sigma][permLabel__Integer]]:=positroids`bridgeBoundaries[\[Sigma][permLabel]]=Block[{n=Length[{permLabel}],dual=List@@parityConjugatePositroid[\[Sigma][permLabel]],vanishing=positroids`identityLabelDecorations[\[Sigma][permLabel]]},{{#,\[Sigma]@@ReplacePart[{permLabel},Thread[Rule[#,Reverse@{permLabel}[[#]]+If[OrderedQ[#],0,{n,-n}]]]]}&/@Mod[(Select[Partition[DeleteCases[Transpose[{Range[n],{permLabel}}],{x_,x_}|Alternatives@@({#,x_}&/@vanishing[[2]])],2,1,1],OrderedQ[#[[All,2]]+If[OrderedQ[#[[All,1]]],0,{0,n}]]&][[All,All,1]]),n,1],{Mod[{permLabel}[[#]],n,1],\[Sigma]@@ReplacePart[{permLabel},Thread[Rule[#,Reverse@{permLabel}[[#]]+If[Not@OrderedQ[#],0,-{n,-n}]]]]}&/@Mod[(dual[[Reverse[#]]]&/@(Select[Partition[DeleteCases[Transpose[{Range[n],dual}],{x_,x_}|Alternatives@@({#,x_}&/@vanishing[[1]])],2,1,1],OrderedQ[#[[All,2]]+If[OrderedQ[#[[All,1]]],0,{0,n}]]&][[All,All,1]])),n,1]}]

positroids`bridgeBoundary[\[Sigma][permutation__Integer]]:=Module[{n=Length[{permutation}],trans},If[Mod[{permutation},n,1]===Range[n],{},trans=Select[Partition[DeleteCases[Transpose[{Range[n],Mod[{permutation},n,1]}],{x_,x_}][[All,1]],2,1],OrderedQ[{permutation}[[#]]]&,1][[1]];{\[Tau]@@trans,Power[-1,Count[Transpose[{Range@@trans,{permutation}[[Range@@trans]]-n}],{x_,x_}]],Power[-1,Count[Transpose[{Range@@trans,{permutation}[[Range@@trans]]}],{x_,x_}]],\[Sigma]@@({permutation}[[Range[n]/.Thread[Rule[trans,Reverse[trans]]]]])}]];

positroids`bridgeChain[\[Sigma][permutation__Integer],False,True]:=positroids`bridgeChain[\[Sigma][permutation],False,True]=Module[{n=Length[{permutation}],bridge=positroids`bridgeBoundary[\[Sigma][permutation]],lower},If[bridge==={},{{},\[Sigma][permutation]},lower=positroids`bridgeChain[bridge[[-1]],False,True];{Prepend[lower[[1]],Times@@bridge[[1;;2]]],lower[[-1]]}]];
positroids`bridgeChain[\[Sigma][permutation__Integer],True,True]:=Module[{n=Length[{permutation}],bridge,lower,rot,conjQ=RandomChoice[{True,False}]},If[Mod[{permutation},n,1]===Range[n],{{},\[Sigma][permutation]},(rot=RandomInteger[{0,n-1}];bridge=If[False,({\[Tau]@@(Mod[Reverse[List@@#1]+rot,n,1]),#3,parityConjugatePositroid[rotatePositroidLabel[rot][#4]]}&@@positroids`bridgeBoundary[rotatePositroidLabel[-rot][parityConjugatePositroid[\[Sigma][permutation]]]]),({\[Tau]@@(Mod[(List@@#1)+rot,n,1]),#2,rotatePositroidLabel[rot][#4]}&@@positroids`bridgeBoundary[rotatePositroidLabel[-rot][\[Sigma][permutation]]])];lower=positroids`bridgeChain[bridge[[-1]],True,True];{Prepend[lower[[1]],Times@@bridge[[1;;2]]],lower[[-1]]})]];
positroids`bridgeChain[\[Sigma][permutation__Integer],randomQ_,False]:=positroids`bridgeChain[\[Sigma][permutation],randomQ,True]/.{-\[Tau][x__]:>\[Tau][x]};
positroids`bridgeChain[\[Sigma][permutation__Integer],randomQ_:False]:=positroids`bridgeChain[\[Sigma][permutation],randomQ,False];

positroids`bridgeChainToInversions[{transList__\[Tau]}]:=positroids`bridgeChainToInversions[{transList}]=If[Length[{transList}]==1,Reverse/@(List@@@{transList}),Block[{lower=(positroids`bridgeChainToInversions[{transList}[[2;;-1]]])},Prepend[lower,Fold[#1/.#2&,Reverse[List@@{transList}[[1]]],Thread[Rule[#,Reverse[#]]]&/@Reverse[lower]]]]];



(* ::Subsection:: *)
(*Kinematic Support and Factorizability*)


treeTools`functionTypes["K",4]="Kinematic Support and Factorizability";
treeTools`functionNames["K",4]={"positroidKinematicSupport[\[Sigma][perm__]]","nonVanishingPositroidQ[\[Sigma][perm__]]","",
"positroidFactorizations[\[Sigma][perm__]]","treePositroidQ[\[Sigma][perm__]]"
};


positroidKinematicSupport[\[Sigma][perm__Integer]]/;positroidDimension[\[Sigma][perm]]==(2Length[{perm}]-4):=Which[Min[{perm}-Range[Length[{perm}]]]<2,0,MemberQ[{{2},{Length[{perm}]-2}},DeleteDuplicates[{perm}-Range[Length[{perm}]]]],1,True,positroidKinematicSupport[rotatePositroidLabel[1][\[Sigma]@@({perm}-2)],4]];

positroidKinematicSupport[\[Sigma][perm__Integer],d_Integer]/;d>=1:=If[Not[positroidCyclicRep[positroids`removeFixedPoints[\[Sigma][perm]]]===\[Sigma][perm]],positroidKinematicSupport[positroidCyclicRep[positroids`removeFixedPoints[\[Sigma][perm]]],d],Set[positroidKinematicSupport[\[Sigma][perm],d],If[d==1,If[Max[{perm}-Range[Length[{perm}]]]<Length[{perm}],1,0],(Block[{lowerCells},lowerCells=Block[{permutation={perm},n=Length[{perm}],gauge=Select[{perm}-Length[{perm}],#>0&]},Fold[Function[{permLists,lift},Join@@DeleteCases[(Function[{ephemeral,liftTerm},Block[{columnRule=Thread[Rule[ephemeral,Range[Length[ephemeral]]]]},Block[{wrappingBoundaries=Function[{y},y[[Select[Range[Length[y]],Min[y[[1;;#]]]==y[[#]]&]]]][Select[ephemeral[[1;;liftTerm]],liftTerm<=#<=Min[(Min[Select[ephemeral[[((liftTerm+n)/.columnRule)+1;;-1]],#>(liftTerm+n)&]]-n),((liftTerm+n)/.columnRule)]&]]},ReplacePart[ephemeral,{((liftTerm+n)/.columnRule)->(#+n),(#/.columnRule)->liftTerm}]&/@wrappingBoundaries]]]@@{#,lift})&/@permLists,{}]],{permutation},Reverse[Sort[gauge]]]];If[Length[lowerCells]==0,0,(((Total[positroidKinematicSupport[\[Sigma]@@#,d-1]&/@lowerCells])))]])]]];

nonVanishingPositroidQ[\[Sigma][perm__Integer]]:=If[(positroidDimension[\[Sigma][perm]]==(2Length[{perm}]-4)),positroidKinematicSupport[\[Sigma][perm]]>0,False];

positroidFactorizations[\[Sigma][perm__Integer]]:=positroids`factorizations[\[Sigma][perm]];

treePositroidQ[\[Sigma][perm__Integer]]:=treePositroidQ[\[Sigma][perm]]=If[Not[positroidDimension[\[Sigma][perm]]==2 Length[{perm}]-4],False,If[Length[{perm}]==3,True,Block[{factorizations=positroids`factorizations[\[Sigma][perm]]},If[Length[factorizations]==0,False,Or@@(And@@@(treePositroidQ/@#&/@factorizations[[All,1;;2]]))]]]];


treeTools`fullDimensionQ[\[Sigma][perm__]]:=positroidDimension[\[Sigma][perm]]===2Length[{perm}]-4;

(*positroids`factorizations[\[Sigma][permutation__Integer]]:=Block[{bridges={#1,List@@#2}&@@@#&/@(positroids`bridgeBoundaries[\[Sigma][permutation]])},Select[DeleteCases[Reverse@Join[Function[{bridge,perm},Block[{rotated=Mod[List@@(rotatePositroidLabel[-(bridge[[1]])][\[Sigma]@@perm]),Length[perm]],n=Length[perm]},Block[{partition=Select[Range[2,n-2],Length[Intersection[rotated[[1;;#]],Range[#]]]==#-1&]},If[Length[partition]===0,{},partition=partition[[-1]];Join[(Function[{left,right},decoratePermutation[\[Sigma]@@#]&/@{Append[(left/.Complement[left,Range[Length[left]]][[1]]->partition+1),Complement[Range[Length[left]],left][[1]]],Prepend[(right/.Complement[right,Range[Length[right]]+partition][[1]]->partition),Complement[Range[Length[right]]+partition,right][[1]]]-partition+1}]@@{Mod[rotated[[1;;partition]],n,1],Mod[rotated[[partition+1;;-1]],n,1]}),{bridge,True}]]]]]@@@bridges[[1]],Function[{bridge,perm},Block[{rotated=Mod[List@@(rotatePositroidLabel[-(bridge[[-1]])][\[Sigma]@@perm]),Length[perm]],n=Length[perm]},Block[{partition=Select[Range[2,n-2],Length[Intersection[rotated[[1;;#]],Range[#]]]==#-1&]},If[Length[partition]===0,{},partition=partition[[-1]];Join[(Function[{left,right},decoratePermutation[\[Sigma]@@#]&/@{Append[(left/.Complement[left,Range[Length[left]]][[1]]->partition+1),Complement[Range[Length[left]],left][[1]]],Prepend[(right/.Complement[right,Range[Length[right]]+partition][[1]]->partition),Complement[Range[Length[right]]+partition,right][[1]]]-partition+1}]@@{Mod[rotated[[1;;partition]],n,1],Mod[rotated[[partition+1;;-1]],n,1]}),{Reverse@bridge,False}]]]]]@@@bridges[[2]]],{}],And@@(treeTools`fullDimensionQ/@#[[1;;2]])&]];*)
positroids`factorizations[\[Sigma][permutation__Integer]]:=Block[{bridges={#1,List@@#2}&@@@#&/@(positroids`bridgeBoundaries[\[Sigma][permutation]])},Select[DeleteCases[Reverse@Join[Function[{bridge,perm},Block[{rotated=Mod[List@@(rotatePositroidLabel[-(bridge[[1]])][\[Sigma]@@perm]),Length[perm],1],n=Length[perm]},Block[{partition=Select[Range[2,n-2],Length[Intersection[rotated[[1;;#]],Range[#]]]==#-1&]},If[Length[partition]===0,{},partition=partition[[-1]];Join[(Function[{left,right},decoratePermutation[\[Sigma]@@#]&/@{Append[(left/.Complement[left,Range[Length[left]]][[1]]->partition+1),Complement[Range[Length[left]],left][[1]]],Prepend[(right/.Complement[right,Range[Length[right]]+partition][[1]]->partition),Complement[Range[Length[right]]+partition,right][[1]]]-partition+1}]@@{Mod[rotated[[1;;partition]],n,1],Mod[rotated[[partition+1;;-1]],n,1]}),{bridge,True}]]]]]@@@bridges[[1]],Function[{bridge,perm},Block[{rotated=Mod[List@@(rotatePositroidLabel[-(bridge[[-1]])][\[Sigma]@@perm]),Length[perm],1],n=Length[perm]},Block[{partition=Select[Range[2,n-2],Length[Intersection[rotated[[1;;#]],Range[#]]]==#-1&]},If[Length[partition]===0,{},partition=partition[[-1]];Join[(Function[{left,right},decoratePermutation[\[Sigma]@@#]&/@{Append[(left/.Complement[left,Range[Length[left]]][[1]]->partition+1),Complement[Range[Length[left]],left][[1]]],Prepend[(right/.Complement[right,Range[Length[right]]+partition][[1]]->partition),Complement[Range[Length[right]]+partition,right][[1]]]-partition+1}]@@{Mod[rotated[[1;;partition]],n,1],Mod[rotated[[partition+1;;-1]],n,1]}),{Reverse@bridge,False}]]]]]@@@bridges[[2]]],{}],And@@(treeTools`fullDimensionQ/@#[[1;;2]])&]];


(* ::Subsection:: *)
(*Plabic Graph Drawing*)


treeTools`functionTypes["K",5]="Drawing Representative Plabic Graphs";
treeTools`functionNames["K",5]={"drawPlabicGraph[\[Sigma][perm__],labelsQ_:False]","drawPlabicGraphRandom[\[Sigma][perm__]]","drawPlabicGraphAtlas[\[Sigma][perm__],labelsQ_:False]"};


drawPlabicGraph[\[Sigma][perm__Integer],randomQ_,rot_Integer,fullQ_:False]:=Module[{legNames=RotateLeft[Range[Length[{perm}]],rot],boundaryInversions=(positroidBoundaryInversions[rotatePositroidLabel[rot][\[Sigma][perm]]]/.{\[Pi][x__]:>\[Pi]@@(Mod[{x}+rot,Length[{perm}],1])}),boundaryList=positroidBoundaries[\[Sigma][perm]],bridgeList,stylizedFaces,faceList,inversionsList,labelData,tropicalList,legSpacing=1.75,bridgeSpacing=1.65,bridges,imageSize,fontSize=16,vertexSize=1.5*0.275,bridgeSigns,blackVertexColor=RGBColor[3/5,3/5,66/85],lineThickness=2,legRule,heights,depths,fix=0.5,lolliList=positroids`identityLabelDecorations[\[Sigma][perm]]},bridgeList=positroids`bridgeChain[rotatePositroidLabel[rot][\[Sigma][perm]],randomQ,True][[1]]/.\[Tau][x__]:>\[Tau]@@(Mod[{x}+rot,Length[legNames],1]);bridgeSigns=(bridgeList/.{\[Tau][x__]:>1});bridgeList=bridgeList/bridgeSigns;bridges=Transpose[{Range[Length[bridgeList]],List@@@bridgeList}];legRule=Thread[Rule[legNames,(Range[Length[legNames]]-1)*legSpacing]];heights[1]=If[Length[Flatten[lolliList]]>0,-bridgeSpacing,0];heights[x_]:=heights[x-1]-bridgeSpacing;If[Not[TrueQ[fullQ]],Function[{x},Block[{last=Select[Reverse[bridges[[1;;x-1]]],Length[Intersection[Range@@Sort@Mod[bridges[[x,2]]-rot,Length[legNames],1],Range@@Sort@Mod[#[[2]]-rot,Length[legNames],1]]]>0&]},Set[heights[x],(If[Length[last]==0,0,Min[heights/@last[[All,1]]]-bridgeSpacing])]]]/@Range[2,Length[bridges]]];depths=Function[{q},Min[Prepend[heights/@Select[Reverse@bridges,MemberQ[#[[2]],q]||MemberQ[#[[1]],q]&][[All,1]],0]]]/@Sort[legNames];If[TrueQ[fullQ],(faceList=positroids`bridgeChainToFaceLabels[bridgeList];inversionsList=positroids`bridgeChainToInversions[bridgeList];tropicalList=positroids`tropicalizeFaceLabels[positroids`bridgeChainToFaceLabels[bridgeList]];(*tropicalList=Transpose[{Style[tropicalList[[All,1]],Blue],Style[tropicalList[[All,2]],Darker@Red]}];*)legSpacing=legSpacing+0.35Length[faceList[[1]]];legSpacing=legSpacing+0.35Length[faceList[[1]]];legRule=Thread[Rule[legNames,(Range[Length[legNames]]-1)*legSpacing]];stylizedFaces=ReplacePart[#1,#2[[1]]->Style[#1[[#2[[1]]]],Bold,Darker@Red]]&@@@Transpose[{faceList,tropicalList}];stylizedFaces=Row[{Style["(",FontSize->14],Row[Riffle[Style[#,FontFamily->"Times",FontSize->15]&/@{##},Style[" ",FontSize->8]]],Style[")",FontSize->14]}]&@@@stylizedFaces;(*stylizedFaces=Prepend[stylizedFaces,{Text[stylizedFaces[[-1]],{legRule[[-1,2]]/2,heights[Length[{bridgeList}]]-2bridgeSpacing/4}]}];*)labelData=Prepend[Text[stylizedFaces[[#]],{Mean[bridges[[#,2]]/.legRule],heights[#]+bridgeSpacing (1/3)}]&/@Range[Length[bridges]],{Text[ stylizedFaces[[-1]],{legRule[[-1,2]]/2,heights[Length[bridgeList]]-2bridgeSpacing/4}]}];labelData=Join[labelData,Join[{Text[Style[\[Tau],FontFamily->"Times",FontSize->18],{-legSpacing 1.7,heights[1]+bridgeSpacing}]},(Text[Style[Row@({"(",Sequence@@Riffle[bridges[[#,2]],Style[" ",FontSize->8]],")"}),FontFamily->"Times",FontSize->18],{-legSpacing 1.7,heights[#]-0bridgeSpacing/8}]&/@Range[Length[bridges]]),{Text[Style[\[Pi],FontFamily->"Times",FontSize->18],{-legSpacing 1.1,heights[1]+bridgeSpacing}]},(Text[Style[Row@({"[",Sequence@@Riffle[inversionsList[[#]],Style[" ",FontSize->8]],"]"}),FontFamily->"Times",FontSize->18,If[MemberQ[boundaryInversions,\[Pi]@@inversionsList[[#]]],Blue,Black]],{-legSpacing 1.1,heights[#]-0bridgeSpacing/8}]&/@Range[Length[bridges]]),{Text[Style[Row[{"{",Style[\[Alpha],Nest[Darker,Green,3]],Style[" ",FontSize->8],Style[A,Darker@Red,Bold],"}"}],FontFamily->"Times",FontSize->18],{-legSpacing/2,heights[1]+bridgeSpacing 3/2}]},(Text[Style[Row@({"{",Style[tropicalList[[#,1]],Nest[Darker,Green,3]],Style[" ",FontSize->8],Style[tropicalList[[#,2]],Darker@Red,Bold],"}"}),FontFamily->"Times",FontSize->18],{-legSpacing/2 ,heights[#]+bridgeSpacing/2}]&/@Range[Length[bridges]]),{Text[Style[Row[{"{",Style[tropicalList[[-1,1]],Nest[Darker,Green,3]],Style[" ",FontSize->8],Style[tropicalList[[-1,2]],Darker@Red,Bold],"}"}],FontFamily->"Times",FontSize->18],{-legSpacing/2,heights[Length[bridgeList]]-bridgeSpacing/2}]},{Text[Style[\[Sigma][perm],FontFamily->"Times",FontSize->14],{legSpacing*(Length[legNames]-0.8),3bridgeSpacing/2},{-1,0}],Text[Style[((boundaryList[[Flatten[Position[boundaryInversions,\[Pi]@@inversionsList[[#]]]][[1]]]])/.Thread[Rule[Join[List@@inversionsList[[#]],List@@inversionsList[[#]]+Length[legNames]],{Style[List@@inversionsList[[#,1]],Blue],Style[List@@inversionsList[[#,2]],Blue],Style[List@@inversionsList[[#,1]]+Length[legNames],Blue],Style[List@@inversionsList[[#,2]]+Length[legNames],Blue]}]]),FontFamily->"Times",FontSize->14],{legSpacing*(Length[legNames]-0.8),heights[#]},{-1,0}]&/@(Select[Range[Length[bridgeList]],MemberQ[boundaryInversions,\[Pi]@@inversionsList[[#]]]&])}]];labelData=Join[labelData,Text[Style[bridgeSigns[[#]]Subscript[\[Alpha],Length[bridges]+1-#],Darker@Darker[Red],FontFamily->"Times",FontSize->18],{Mean[bridges[[#,2]]/.legRule],heights[#]-bridgeSpacing (1/3)}]&/@Range[Length[bridges]]];),labelData={}];imageSize=180*Length[legNames]*legSpacing/20;Graphics[Join[({AbsoluteThickness[lineThickness],Black,CapForm["Round"],Line[{{(#/.legRule),0.75bridgeSpacing+fix},{(#/.legRule),depths[[#]]}}]}&/@legNames),{AbsoluteThickness[3lineThickness],CapForm["Butt"],White,Line[#]}&/@(Function[{x,y},{#,heights[x]}&/@(Sort[(y/.legRule)]+1.5{vertexSize,-vertexSize})]@@@bridges),{AbsoluteThickness[lineThickness],Darker@Darker@Red,CapForm["Round"],Line[#]}&/@(Function[{x,y},{#,heights[x]}&/@(y/.legRule)]@@@bridges),(Function[{x,y},{{Directive[{blackVertexColor,EdgeForm[{Opacity[1],AbsoluteThickness[lineThickness],Black}]}],Disk[{(y[[2]]/.legRule),heights[x]},vertexSize]},{Directive[{White,EdgeForm[{Opacity[1],AbsoluteThickness[lineThickness],Black}]}],Disk[{(y[[1]]/.legRule),heights[x]},vertexSize]}}]@@@bridges),({Directive[{White,EdgeForm[{Opacity[1],AbsoluteThickness[lineThickness],Black}]}],Disk[{(#/.legRule),depths[[Position[Sort[legNames],#][[1,1]]]]},vertexSize]}&/@lolliList[[2]]),({Directive[{blackVertexColor,EdgeForm[{Opacity[1],AbsoluteThickness[lineThickness],Black}]}],Disk[{(#/.legRule),depths[[Position[Sort[legNames],#][[1,1]]]]},vertexSize]}&/@lolliList[[1]]),labelData,Text[Style[#,FontFamily->"Times",FontSize->fontSize],{(#/.legRule),1.75bridgeSpacing+0.25-fix}]&/@legNames],ImageSize->2 imageSize]];
drawPlabicGraph[\[Sigma][perm__Integer],True]:=drawPlabicGraph[\[Sigma][perm],False,0,True];
drawPlabicGraph[\[Sigma][perm__Integer]]:=drawPlabicGraph[\[Sigma][perm],False,0,False];
drawPlabicGraphRandom[\[Sigma][perm__Integer]]:=drawPlabicGraph[\[Sigma][perm],True,0,False];
drawPlabicGraphAtlas[\[Sigma][perm__Integer],fullQ_:False]:=drawPlabicGraph[\[Sigma][perm],False,#,fullQ]&/@Range[0,Length[{perm}]-1];


(* ::Subsection:: *)
(*Combinatorial On-Shell Recursion Relations for sYM Amplitudes*)


treeTools`functionTypes["K",6]="Combinatorial Recursion Relations for sYM";
treeTools`functionNames["K",6]={"ymPositroidAmp[n_,k_]","ymPositroidAmpRandom[n_,k_]","","allRecursedYMpositroidTrees[n_,k_]"};


ymPositroidAmp[n_Integer,k_Integer]/;(MemberQ[Range@@Sort[{0,n-4}],k]&&n>2):=ymPositroidAmp[n,k]=Which[k==n-4,{\[Sigma]@@(Range[n]+n-2)},k==0,{\[Sigma]@@(Range[n]+2)},True,Join@@(positroids`BCFWbridge@@@Tuples[ymPositroidAmp@@@#]&/@bcfwPartitions[n,k])];

ymPositroidAmpRandom[n_Integer,k_Integer]/;(MemberQ[Range@@Sort[{0,n-4}],k]&&n>2):=Which[k==n-4,{\[Sigma]@@(Range[n]+n-2)},k==0,{\[Sigma]@@(Range[n]+2)},True,Block[{type={False,True}[[RandomInteger[{1,2}]]],rot=RandomInteger[{1,n}]},rotatePositroidLabel[rot]/@(Join@@(positroids`BCFWbridge[##,type]&@@@Tuples[ymPositroidAmpRandom@@@#]&/@bcfwPartitions[n,k,type]))]];

allRecursedYMpositroidTrees[n_,k_]:=allRecursedYMpositroidTrees[n,k]=Which[k==0,{{\[Sigma]@@(Range[n]+2)}},k==n-4,{{\[Sigma]@@(Range[n]+n-2)}},True,Block[{seeds},seeds=Join[Join@@@Tuples@(positroids`BCFWbridge[##,False]&@@@#&/@(Tuples/@Tuples[allRecursedYMpositroidTrees@@@#])&/@bcfwPartitions[n,k,False]),Join@@@Tuples@(positroids`BCFWbridge[##,True]&@@@#&/@(Tuples/@Tuples[allRecursedYMpositroidTrees@@@#])&/@bcfwPartitions[n,k,True])];ReplacePart[DeleteDuplicates[Sort/@Join@@NestList[rotatePositroidLabel[1]/@#&/@#&,seeds,n-1]],{1->ymPositroidAmp[n,k]}]]];


(* ::Subsection:: *)
(*From Positroids to superFunctions*)


treeTools`functionTypes["K",7]="Analytic superFunctions for TreeLike Positroids";
treeTools`functionNames["K",7]={"spinorFormOfPositroid[\[Sigma][perm__]]","twistorFormOfPositroid[\[Sigma][perm__]]","fromPositroidsToSuperFunctions[exprn_]"};


spinorFormOfPositroid[\[Sigma][perm___Integer]]:=If[treePositroidQ[\[Sigma][perm]],(spinorFormOfPositroid[\[Sigma][perm]]=Which[positroidKinematicSupport[\[Sigma][perm]]==0,0,Length[Select[{perm},#>Length[{perm}]&]]==2,1/Times@@ab@@@Partition[Range[Length[{perm}]],2,1,1],\[Sigma][perm]===positroidCyclicRep[\[Sigma][perm]],toSuperSpinorFunctions[Length[{perm}]][twistorFormOfPositroid[\[Sigma][perm]]],True,Module[{images=NestList[rotatePositroidLabel[1],\[Sigma][perm],Length[{perm}]-1],n=Length[{perm}],rot},rot=Flatten[Position[images,positroidCyclicRep[\[Sigma][perm]]]][[1]];permuteLegs[Ordering[Partition[Range[n],n,1,1][[rot]]]][toSuperSpinorFunctions[n][twistorFormOfPositroid[positroidCyclicRep[\[Sigma][perm]]]]]]]),If[nonVanishingPositroidQ[\[Sigma][perm]],positroidRepresentative[\[Sigma][perm]],0]];



(* ::Subsubsection:: *)
(*R-invariants for Tree-Like Positroids*)


twistorFormOfPositroid[\[Sigma][permutation__Integer]]/;Length[{permutation}]>=3&&treePositroidQ[\[Sigma][permutation]]:=If[\[Sigma][permutation]===positroidCyclicRep[\[Sigma][permutation]],Set[twistorFormOfPositroid[\[Sigma][permutation]],If[MemberQ[{{1},{2}},DeleteDuplicates[{permutation}-Range[Length[{permutation}]]]],1,(Set[twistorFormOfPositroid[\[Sigma][permutation]],Module[{factorizations=positroids`factorizations[\[Sigma][permutation]],left,right,fact,nL,n=Length[{permutation}],aHat,nHat,oneHat},If[Length[factorizations]===0,0,(fact=(*First[factorizations];*)factorizations[[1]];nL=Length[List@@fact[[1]]];left=twistorFormOfPositroid[fact[[1]]];right=twistorFormOfPositroid[fact[[2]]];(If[Not[TrueQ[fact[[-1]]]],(If[fact[[2]]===\[Sigma][2,3,4],left,aHat=cap[{nL-1,nL},{n,n-1,1}];nHat=cap[{n,n-1},{nL,nL-1,1}];left=(left/.{R[x___]:>(R@@({x}/.Thread[Rule[{nL},{aHat}]]))});right=(right/.{R[x___]:>(R@@({x}/.Thread[Rule[Range[Length[List@@fact[[2]]]],ReplacePart[Range[Length[List@@fact[[2]]]]+nL-2,{1->aHat,-1->nHat}]]]))});(left*right*R[1,nL-1,nL,n-1,n])]),If[fact[[1]]===\[Sigma][2,3,4],(right/.{R[x__]:>R@@({x}/.Thread[Rule[Range[Length[List@@fact[[2]]]],Range[Length[List@@fact[[2]]]]+1]])}),(aHat=cap[{nL-1,nL},{1,2,n}];oneHat=cap[{1,2},{nL,nL-1,n}];left=(left/.{R[x___]:>(R@@({x}/.Thread[Rule[{1,nL},{oneHat,aHat}]]))});right=(right/.{R[x___]:>(R@@({x}/.Thread[Rule[Range[Length[List@@fact[[2]]]],ReplacePart[Range[Length[List@@fact[[2]]]]+nL-2,{1->aHat}]]]))});(left*right*R[1,2,nL-1,nL,n]))]]/.{R[x___]:>(R@@({x}/.Thread[Rule[Range[n],RotateRight[Range[n],-fact[[3,1]]]]]))}//.{R[x___,y_,z___,y_,w___]:>1,cap[{a1___,a_,a2___},{b1___,a_,b2___}]:>a}))]]])]],Module[{images=NestList[rotatePositroidLabel[-1],\[Sigma][permutation],Length[{permutation}]-1],rot,n=Length[{permutation}]},rot=Ordering[images][[1]];Set[twistorFormOfPositroid[\[Sigma][permutation]],(twistorFormOfPositroid[positroidCyclicRep[\[Sigma][permutation]]]/.{R[x__]:>R@@({x}/.{q_Integer:>Mod[q+rot-1,n,1]})})]]];



(* ::Subsubsection:: *)
(*Spinor superFunctions for Tree-Like Positroids*)


fromPositroidsToSuperFunctions[exprn_]:=(exprn/.{\[Sigma][perm__Integer]:>spinorFormOfPositroid[\[Sigma][perm]]});


(* ::Subsection:: *)
(*Numeric forms for non-Vanishing Positroids  *)


treeTools`functionTypes["K",8]="Numeric superFunctions for NonVanishing Positroids";
treeTools`functionNames["K",8]={"directPositroidEvaluation[\[Sigma][perm__]]","fromPositroidsToSuperFunctionsN[exprn_]"};


fromPositroidsToSuperFunctionsN[exprn_]:=(exprn/.{\[Sigma][perm__Integer]/;Length[{perm}]===Length[Ls]:>Which[positroidKinematicSupport[\[Sigma][perm]]==0,0,treePositroidQ[\[Sigma][perm]],If[{perm}===Range[Length[{perm}]]+2,1/Det/@Partition[Ls,2,1,1],Block[{mtSuper=evaluate[toSuperTwistorFunctions[Length[{perm}],False,False][twistorFormOfPositroid[\[Sigma][perm]]]],uplift=Array[If[#1>#2>1,Det[Ls[[{#2,#1}]]],0]&,{Length[{perm}],Length[{perm}]}]},mtSuper/.superFunction[fcn_,mat_]:>superFunction[fcn/Times@@Det/@Partition[Ls,2,1,1],mat . uplift]]],True,directPositroidEvaluation[\[Sigma][perm]]]});



(* ::Subsubsection:: *)
(*Direct numeric evaluation of the Positroid Volume Form (Orientation Ignored)*)


directPositroidEvaluation[\[Sigma][perm__Integer]]:=If[Not[nonVanishingPositroidQ[\[Sigma][perm]]],0,Block[{degree=positroidKinematicSupport[\[Sigma][perm]],mat=positroidRepresentative[\[Sigma][perm]][[1]],out,soln,eqns,jac},eqns=Join[mat . Lbs,NullSpace[mat] . Ls];soln=Solve[eqns==0];jac=Det[D[Flatten[eqns][[5;;-1]],{Sort@Variables[mat]}]/.#]&/@soln;out=Function[{fcn,matHat},Block[{n=Length[matHat[[1]]],k=Length[matHat]-2,gauge},gauge=Select[Join[{1,n},#]&/@Subsets[Range[2,n-1],{k}],Not[Quiet[Chop[Quiet[N[Det[Quiet[N[matHat[[All,#]],1000]]],500]],Power[10,-400]]]===0]&,1][[1]];superFunction[fcn Power[Det[matHat[[All,gauge]]],4]Power[Det[Ls[[{1,-1}]]],-4],(Inverse[matHat[[All,gauge]]] . matHat)[[3;;-1]]]]]@@@((Transpose[{Power[-1,Length[mat]+1]Power[Det[Ls[[{1,2}]]],2](1/Times@@Variables[mat]/.soln)/jac,(mat/.soln)}]));If[degree==1,Total[out],Total[Function[{fcn,ephMat},superFunction[fcn,RootApproximant[Quiet[Chop[Quiet@N[#,1000],Power[10,-800]]],degree]&/@#&/@ephMat]]@@@(List@@@out)]]]];

directPositroidEvaluation[positroid[matrix_List]]:=Module[{cell=positroidLabel[positroid[matrix]]},Block[{degree=positroidKinematicSupport[cell],mat=matrix,out,soln,eqns,jac,gf=(List@@positroidNecklace[cell][[1]])},mat=Inverse[mat[[All,gf]]] . mat;eqns=Join[mat . Lbs,NullSpace[mat] . Ls];soln=Solve[eqns==0];jac=Det[D[Flatten[eqns][[5;;-1]],{Sort@Variables[mat]}]/.#]&/@soln;out=Function[{fcn,matHat},Block[{n=Length[matHat[[1]]],k=Length[matHat]-2,gauge},gauge=Select[Join[{1,n},#]&/@Subsets[Range[2,n-1],{k}],Not[Quiet[Chop[Quiet[N[Det[Quiet[N[matHat[[All,#]],1000]]],500]],Power[10,-400]]]===0]&,1][[1]];superFunction[fcn Power[Det[matHat[[All,gauge]]],4]Power[Det[Ls[[{1,-1}]]],-4],(Inverse[matHat[[All,gauge]]] . matHat)[[3;;-1]]]]]@@@((Transpose[{Power[-1,Length[mat]+1]Power[Det[Ls[[{1,2}]]],2](1/Times@@Variables[mat]/.soln)/jac,(mat/.soln)}]));If[degree==1,Total[out],Total[Function[{fcn,ephMat},superFunction[fcn,RootApproximant[Quiet[Chop[Quiet@N[#,1000],Power[10,-800]]],degree]&/@#&/@ephMat]]@@@(List@@@out)]]]];



(* ::Subsection:: *)
(*Covering Relations and the Positroid Stratification*)


treeTools`functionTypes["K",9]="Covering Relations and the Positroid Stratification";
treeTools`functionNames["K",9]={"positroidDimension[\[Sigma][perm__]]","positroidBoundaries[\[Sigma][perm__]]",
"positroidBoundaryInversions[\[Sigma][perm__]]","positroidInverseBoundaries[\[Sigma][perm__]]","",
"numberOfPositroids[n_,k_,dim_:]","allPositroids[n_,k_,dim_:]",
"randomPositroid[n_,k_,dim_:]"};


positroidDimension[\[Sigma][permLabel__Integer]]:=positroidDimension[\[Sigma][permLabel]]=If[Not[\[Sigma][permLabel]===positroidCyclicRep[\[Sigma][permLabel]]],positroidDimension[positroidCyclicRep[\[Sigma][permLabel]]],Set[positroidDimension[\[Sigma][permLabel]],Block[{perm={permLabel},n=Length@{permLabel},dim},If[Mod[perm,n,1]===Range[n],0,(dim=Block[{k,ext},k=Length[Select[perm,#>n&]];ext=Transpose[{Range[n]+n,Partition[Join[perm,perm+n],n+1,1]}];Total[Function[{y,z},Length[Select[z,z[[-1]]>=#>y&]]]@@@ext]-k^2];dim)]]]];

positroidBoundaries[\[Sigma][permLabel__Integer]]:=Block[{swaps=positroids`boundaryTranspositions[\[Sigma][permLabel]],n=Length[{permLabel}]},\[Sigma]@@@(ReplacePart[{permLabel},Thread[Rule[#,Reverse@{permLabel}[[#]]+If[OrderedQ[#],0,{n,-n}]]]]&/@Mod[swaps,n,1])];

positroidBoundaryInversions[\[Sigma][perm__Integer]]:=Block[{bdy=List@@@positroidBoundaries[\[Sigma][perm]],n=Length[{perm}]},\[Pi]@@@Mod[(Select[DeleteCases[Transpose[{{perm},#}],{y_,y_}],OrderedQ,1][[1]]&/@bdy),n,1]];

positroidInverseBoundaries[\[Sigma][permLabel__Integer]]:=positroidInverseBoundaries[\[Sigma][permLabel]]=Block[{n=Length[{permLabel}],extendedPermutation=List@@(Join[#,#+Length[#]]&@(List@@decoratePermutation[\[Sigma][permLabel]])),perm=List@@decoratePermutation[\[Sigma][permLabel]],faces},faces=({permLabel}/.(Join@@(Function[{x,y,z},(If[Count[Drop[perm,x],#]>0,{y->#-n,#->y+n},{y->#,#->y}]&/@z)]@@@DeleteCases[Table[{j-n,extendedPermutation[[j]]-n,If[Count[perm,#]==1,#,#-n]&/@(Function[{y},y[[Flatten[Position[(y[[#]]<Min[Drop[y,#]]&/@Range[Length[y]]),True]]]]]@Select[extendedPermutation[[1;;j]],#>extendedPermutation[[j]]&])},{j,n+1,Length[extendedPermutation]}],{_,{}}])));\[Sigma]@@@faces];



(* ::Subsubsection:: *)
(*Listing all Positroids*)


numberOfPositroids[n_,k_Integer,dim_Integer]:=Which[dim===-1,1,MemberQ[{n-2,-2},k],KroneckerDelta[dim,0],MemberQ[{n-3,-1},k],Binomial[n,2+dim-1],k<-2||TrueQ[k>n-2],0,True,Module[{q},SeriesCoefficient[Power[q-1,-n]Sum[Power[q,-(k+2-r)^2]Power[(Power[Power[q,r-k-2]-1,r]Power[Power[q,k+3-r]-1,n-r]-Power[Power[q,r-k-1]-1,r]Power[Power[q,k+2-r]-1,n-r])Binomial[n,r]],{r,0,k+1}],{q,0,dim}]]];
numberOfPositroids[n_,k_]:=numberOfPositroids[n,k,2n-4];

allPositroids[n_Integer,k_Integer,dim_Integer]/;((-2<=k<=n-2)&&(MemberQ[Range[-1,n(k+2)-(k+2)^2],dim])):=allPositroids[n,k,dim]=(If[Not[ValueQ[treeTools`timingHead]],Set[treeTools`timingHead,{"allPositroids["<>StringJoin@@Riffle[ToString/@{n,k,dim},","]<>"]",Row[{Style["allPositroids["<>StringJoin@@Riffle[ToString/@{n,k,dim},","]<>"]",Bold,FontSize->14]}]}]];Which[dim==0,Join@@(DeleteDuplicates[NestList[rotatePositroidLabel[1],#,n-1]]&/@Sort[DeleteDuplicates[positroidCyclicRep/@(\[Sigma]@@@(Normal[SparseArray[#->n&/@#,{n}]]+Range[n]&/@Subsets[Range[n],{k+2}]))]]),dim==n(k+2)-(k+2)^2,{\[Sigma]@@(Range[n]+k+2)},dim<=(n(k+2)-(k+2)^2)/2,Join@@(DeleteDuplicates[NestList[rotatePositroidLabel[1],#,n-1]]&/@Sort[DeleteDuplicates[positroidCyclicRep/@DeleteDuplicates[Join@@(positroidInverseBoundaries/@allPositroids[n,k,dim-1])]]]),True,Join@@(DeleteDuplicates[NestList[rotatePositroidLabel[1],#,n-1]]&/@Sort[DeleteDuplicates[positroidCyclicRep/@DeleteDuplicates[Join@@(positroidBoundaries/@allPositroids[n,k,dim+1])]]])]);
allPositroids[n_Integer,k_Integer]:=allPositroids[n,k,2n-4];




(* ::Subsubsection:: *)
(*Randomly Generated Positroids*)


randomPositroid[n_Integer,k_Integer,dim_Integer]/;dim>0&&(k+2<=n)&&(0<=dim<=(n (k+2)-(k+2)^2)):=Which[dim===(n (k+2)-(k+2)^2),\[Sigma]@@(Range[n]+k+2),True,Catch[Block[{seedList=Join[{randomPositroid[n,k,0],randomPositroid[n,k,(k+2)n-(k+2)^2]},Select[DeleteDuplicates[decoratePermutation/@(\[Sigma]@@@(randomPerm[n]&/@Range[100]))],Length[Select[List@@#,#>n&]]==k+2&]],kList,dimList,best},dimList=Function[{cell},If[#==dim,Throw[cell],#]&@positroidDimension[cell]]/@seedList;best=Ordering[Abs[dimList-dim]][[1]];If[dimList[[best]]-dim>0,Nest[#[[RandomInteger[{1,Length[#]}]]]&@(positroidBoundaries[#])&@#&,seedList[[best]],Abs[dimList[[best]]-dim]],Nest[#[[RandomInteger[{1,Length[#]}]]]&@(positroidInverseBoundaries[#])&,seedList[[best]],Abs[dimList[[best]]-dim]]]]]];
randomPositroid[n_Integer,k_Integer,0]/;(k+2<=n):=\[Sigma]@@(Range[n]+Normal[SparseArray[#->n&/@randomSubset[n,k+2],n]]);
randomPositroid[n_Integer,k_Integer]/;n>=3&&MemberQ[Range@@Sort[{0,n-4}],k]:=RandomChoice[ymPositroidAmpRandom[n,k]];



(* ::Subsection:: *)
(*Oriented Canonical Charts and Signed Covering Relations*)


treeTools`functionTypes["K",10]="Oriented Charts and Signed Covering Relations";
treeTools`functionNames["K",10]={
"positroidReferenceChartOrientation[\[Sigma][perm__]]","positroidReferenceChartAtlas[\[Sigma][perm__]]","accessibleChartBoundaries[positroid[mat_]]","positroidAtlasOrientations[\[Sigma][perm__]]",
"","positroidOrientedBoundaryRule","positroidOrientedInverseBoundaryRule"};


(* ::Subsubsection:: *)
(*Induced Orientation for Positroids Obtainable via Tree Recursion *)


positroidReferenceChartOrientation[\[Sigma][perm___Integer]]:=If[treePositroidQ[\[Sigma][perm]],positroids`recursedPositroidTreeOrientation[\[Sigma][perm]],1];

positroidReferenceChartAtlas[\[Sigma][perm__]]:=Module[{n=Length[{perm}],k=positroidRank[\[Sigma][perm]]},Table[positroid@(RotateRight[positroidRepresentative[Nest[rotatePositroidLabel[-1],\[Sigma][perm],j-1]][[1]],{0,j-1}] . DiagonalMatrix[PadRight[If[EvenQ[k],-1,1]&/@Range[j-1],n,1]]),{j,n}]];

accessibleChartBoundaries[positroid[mat_List]]:=Module[{perm=positroidLabel[positroid[mat]],chart=variables[mat],bdy},bdy=positroidBoundaries[perm];Select[({#,positroidLabel[positroid[mat]/.{#->0}]}&/@Reverse@chart),MemberQ[bdy,#[[2]]]&]];

positroidAtlasOrientations[\[Sigma][perm__Integer]]:=positroidAtlasOrientations[\[Sigma][perm]]=positroids`relativeChartOrientations/@positroids`lexicographicAtlas[\[Sigma][perm]];



(* ::Subsubsection:: *)
(*Boundary Signs Induced by Chart Orientations*)


positroidOrientedBoundaryRule={\[Sigma][perm__]:>Total[positroids`signedBoundaies[\[Sigma][perm]]]};

positroidOrientedInverseBoundaryRule={\[Sigma][perm__]:>Total[positroids`signedInverseBoundaies[\[Sigma][perm]]]};


(* ::Subsubsection:: *)
(*Internal: Induced Orientations of Boundaries*)


positroids`recursedPositroidTreeOrientation[\[Sigma][2,3,4]]:=1;positroids`recursedPositroidTreeOrientation[\[Sigma][3,4,5]]:=1;

positroids`recursedPositroidTreeOrientation[\[Sigma][perm__Integer]]:=positroids`recursedPositroidTreeOrientation[\[Sigma][perm]]=(Block[{factorizations=positroids`factorizations[\[Sigma][perm]],particular,lowerSigns,refChartSign=Signature[Ordering[(Reverse/@(positroidTropicalFaceLabels[\[Sigma][perm]]))]],bridgedChartData,bridgedChartSignature},If[Length[factorizations]===0,0,(particular=Last[factorizations];lowerSigns=Times@@(positroids`recursedPositroidTreeOrientation/@particular[[1;;2]]);bridgedChartData=positroids`orientedBridge@@particular;bridgedChartSignature=Signature[Ordering[Reverse/@(positroids`tropicalizeFaceLabels[bridgedChartData])]];If[Not[TrueQ[particular[[-1]]]],-1,1]lowerSigns refChartSign bridgedChartSignature)] ]);

positroids`tropicalizeFaceLabels[{faceList__List}]:=positroids`tropicalizeFaceLabels[{faceList}]=Block[{k=Length[{faceList}[[1]]],data},data=NestList[(PadLeft[{-1},Length[#],1]*RotateLeft[#])&/@#&,{faceList},k-1];data=(Sort/@Abs/@(Sort/@Gather[#,#1[[1]]===#2[[1]]&])[[All,-1]])&/@data;data={#2,#1[[#2]]}&@@@Transpose[{{faceList},(Position[data,#][[-1,1]]&/@{faceList})}]];

positroids`relativeChartOrientations[{transListA__\[Tau]},transListB_List:{}]/;(MemberQ[{bridgeChainToPositroidLabel[{transListA}],{}},bridgeChainToPositroidLabel[transListB]]):=If[transListB==={},Block[{n=Max[Flatten[List@@@{transListA}]],perm,refChart,aChart,treeSignFix},perm=bridgeChainToPositroidLabel[{transListA}];treeSignFix=If[positroidDimension[perm]==2Length[List@@perm]-4,(positroids`recursedPositroidTreeOrientation[perm]/.{0->1}),1];refChart=positroidTropicalFaceLabels[perm];aChart=positroids`tropicalizeFaceLabels[positroids`bridgeChainToFaceLabels[{transListA}]];Set[positroids`relativeChartOrientations[{transListA}],treeSignFix Signature[Ordering[{#2,#1}&@@@aChart]]Signature[Ordering[{#2,#1}&@@@refChart]]]],Times@@(positroids`relativeChartOrientations/@{{transListA},transListB})];

positroids`lexMin[{inputFaces__List},lexMin_:1]:=Block[{n=Max[Max[Flatten[{inputFaces}]],lexMin],min,remaining,faceList},faceList=Sort[Mod[#-lexMin+1,n,1]]&/@{inputFaces};min=faceList[[-1]];remaining=faceList[[1;;-2]];While[Length[remaining]>0,(min=If[OrderedQ[{min,remaining[[-1]]}],min,remaining[[-1]]];remaining=remaining[[1;;-2]];)];Sort[Mod[min+lexMin-1,n,1]]];

positroids`bridgeChainToFaceLabels[{\[Tau][a_,b_]}]:={List[b],List[a]};
positroids`bridgeChainToFaceLabels[{\[Tau][a_,b_],sequence__\[Tau]}]:=positroids`bridgeChainToFaceLabels[{\[Tau][a,b],sequence}]=Module[{perm=bridgeChainToPositroidLabel[{\[Tau][a,b],sequence}],inv,lower=positroids`bridgeChainToFaceLabels[{sequence}],n,new,changed,conjgQ,lexMin},n=Length[List@@perm];If[Not[MemberQ[Flatten@(List@@@{sequence}),a]],lower=Sort/@(Append[#,a]&/@lower)];conjgQ=Not[MemberQ[positroids`bridgeBoundaries[perm][[1,All,1]],{a,b}]];If[Not[conjgQ],(lexMin=Sort[positroids`lexMin[lower,b]/.Thread[Rule[#,Reverse[#]]]&@(Mod[(List@@perm)[[{a,b}]],n,1])];Prepend[lower,lexMin]),lower=(lower);lexMin=Sort[positroids`lexMin[lower,a]];Prepend[Sort/@(lower/.(Thread[Rule[#,Reverse[#]]]&@({a,b}))),Sort[(lexMin)]]]];

positroids`canonicalBridgeFaceLabels[\[Sigma][perm__Integer]]:=positroids`canonicalBridgeFaceLabels[\[Sigma][perm]]=positroids`bridgeChainToFaceLabels[positroids`bridgeChain[\[Sigma][perm]][[1]]];

positroids`lexicographicAtlas[\[Sigma][perm__Integer]]:=positroids`lexicographicAtlas[\[Sigma][perm]]=Block[{n=Length[{perm}],permList},permList=NestList[rotatePositroidLabel[-1],\[Sigma][perm],n-1];#1/.#2&@@@Transpose[{(positroids`bridgeChain[#][[1]]&/@permList),(Thread[Rule[Range[n],#]]&/@Partition[Range[n],n,1,1])}]];

positroids`orientedBoundarySigns[\[Sigma][perm__Integer]]:=positroids`orientedBoundarySigns[\[Sigma][perm]]=Block[{lexSigns=positroidAtlasOrientations[\[Sigma][perm]],bdy=positroidBoundaryInversions[\[Sigma][perm]],lChains=positroids`lexicographicAtlas[\[Sigma][perm]],invLists,d},d=Length[lChains[[1]]];invLists=(positroids`bridgeChainToInversions/@lChains);Function[{inv},Block[{pos=Flatten[Position[invLists[[inv[[2]]]],inv]][[-1]]},positroids`relativeChartOrientations[Drop[lChains[[inv[[2]]]],{pos}]]*lexSigns[[inv[[2]]]]*Power[-1,pos]]]/@(List@@@bdy)];

positroids`orientedBoundaries[\[Sigma][perm__Integer]]:=Transpose[{positroidBoundaries[\[Sigma][perm]],positroids`orientedBoundarySigns[\[Sigma][perm]]}];

positroids`orientedInverseBoundarySigns[\[Sigma][perm__Integer]]:=(Cases[positroids`orientedBoundaries[#],{\[Sigma][perm],sign_}:>sign][[1]]&/@positroidInverseBoundaries[\[Sigma][perm]]);

positroids`orientedInverseBoundaries[\[Sigma][perm__Integer]]:=Transpose[{positroidInverseBoundaries[\[Sigma][perm]],positroids`orientedInverseBoundarySigns[\[Sigma][perm]]}];

positroids`signedBoundaies[\[Sigma][perm__Integer]]:=Times@@@(positroids`orientedBoundaries[\[Sigma][perm]]);

positroids`signedInverseBoundaies[\[Sigma][perm__Integer]]:=Times@@@(positroids`orientedInverseBoundaries[\[Sigma][perm]]);


(* ::Subsection:: *)
(*Functional Relations from Oriented Homology*)


treeTools`functionTypes["K",11]="Functional Relations via Oriented Positroid Homology";
treeTools`functionNames["K",11]={
"positroidIdentities[\[Sigma][perm__]]","positroidTreeIdentities[\[Sigma][perm__]]",
"","numberOfIndependentSuperFunctions[n_,k_]"};


positroidIdentities[\[Sigma][perm__Integer]]/;(positroidDimension[\[Sigma][perm]]==2Length[{perm}]-4)&&nonVanishingPositroidQ[\[Sigma][perm]]:=Block[{possibleIds=positroidInverseBoundaries[\[Sigma][perm]]},Function[{plus,minus},If[MemberQ[plus[[All,1]],\[Sigma][perm]],{DeleteDuplicates[Prepend[plus[[All,1]],\[Sigma][perm]]],minus[[All,1]]},{DeleteDuplicates[Prepend[minus[[All,1]],\[Sigma][perm]]],plus[[All,1]]}]]@@@(Gather[#,#1[[2]]===#2[[2]]&]&/@((Select[#,nonVanishingPositroidQ[#[[1]]]&]&/@Select[positroids`orientedBoundaries/@possibleIds,MemberQ[#[[All,1]],\[Sigma][perm]]&])))];

positroidTreeIdentities[\[Sigma][perm__Integer]]/;(positroidDimension[\[Sigma][perm]]==2Length[{perm}]-4)&&treePositroidQ[\[Sigma][perm]]:=Block[{possibleIds=positroidInverseBoundaries[\[Sigma][perm]]},Function[{plus,minus},If[MemberQ[plus[[All,1]],\[Sigma][perm]],{DeleteDuplicates[Prepend[plus[[All,1]],\[Sigma][perm]]],minus[[All,1]]},{DeleteDuplicates[Prepend[minus[[All,1]],\[Sigma][perm]]],plus[[All,1]]}]]@@@(Gather[#,#1[[2]]===#2[[2]]&]&/@((Select[#,nonVanishingPositroidQ[#[[1]]]&]&/@Select[Select[positroids`orientedBoundaries/@possibleIds,MemberQ[#[[All,1]],\[Sigma][perm]]&],Max[positroidKinematicSupport/@#[[All,1]]]==1&])))];

numberOfIndependentSuperFunctions[n_,k_]:=Product[Binomial[n-j,4],{j,k}]/Product[Binomial[k-j+4,4],{j,k}];



(* ::Section:: *)
(*Evaluation and Kinematics*)


treeTools`functionTypes["L"]="Evaluation and Kinematic Data ";


(* ::Subsection:: *)
(*Global Variables for use in Evaluation*)


treeTools`functionTypes["L",1]="Global Variables Used for Evaluation";
treeTools`functionNames["L",1]={
"Ls","Lbs","Zs","","pList"};


(* ::Subsection:: *)
(*Specifying Kinematic Data for Use in Evaluation*)


treeTools`functionTypes["L",2]="Specifying Kinematic Data for Evaluation";
treeTools`functionNames["L",2]={
"useReferenceKinematics[n_]","useRandomKinematics[n_,realQ_:False,prec_:\[Infinity]]","",
"useSpinors[\[Lambda]_List,\[Lambda]b_List]","useTwistors[zs_List]"};


(* ::Subsubsection:: *)
(*Reference Kinematics*)


useReferenceKinematics[n_Integer]/;n>=4:=(treeTools`resetStoredKinematicEvaluations;Zs=Array[Binomial[#1-2+Floor[4#2/3],#1-1-#2+1]&,{n,4}];(*Zs=Transpose[Join[Transpose[Zs[[All,1;;2]]],Transpose[Zs[[RotateLeft[Range[n],2],3;;4]]]]];*)Ls=Zs[[All,1;;2]];Lbs=((Normal[SparseArray[Thread[Rule[#,(Det[Ls[[{##}]]]&@@@Partition[RotateLeft[#],2,1,1])/(Det[Ls[[#[[1;;2]]]]]*Det[Ls[[#[[2;;3]]]]])]],n]]&/@(RotateRight@Partition[Range[n],3,1,1])) . Zs[[All,3;;4]]);pList=TensorProduct@@@Transpose[{Ls,Lbs}];(*xList=Total[pList[[1;;Mod[#-1,Length[pList],1]]]]&/@Range[Length[pList]];*));

treeTools`referenceTwistorList=Function[{n},{1,Binomial[n,2],Binomial[n+2,5],Binomial[n+3,7]}]/@Range[50];


(* ::Subsubsection:: *)
(*Randomly Generated Kinematics*)


useRandomKinematics[3]:=(ClearAll[Zs];treeTools`resetStoredKinematicEvaluations;Block[{seeds=RandomInteger[{1,10},{3}]*Transpose[{{1,1,1},randomSubset[10,3]}],dual},seeds=Total[seeds[[1;;#]]]&/@Range[3];dual=Transpose[# NullSpace[Transpose[seeds]][[1]]&/@RandomInteger[{1,10},{2}]];{Ls,Lbs}=(Partition[{seeds,dual},2,1,1][[RandomInteger[{1,2}]]]);pList=TensorProduct@@@Transpose[{Ls,Lbs}];];)
useRandomKinematics[n_Integer]/;n>=4:=(treeTools`resetStoredKinematicEvaluations;Zs=Nest[Function[{mat},Block[{hatted=Append[Append[Total[mat[[#;;-1]]],1]&/@Range[2,Length[mat]],Append[PadRight[{},Length[mat[[1]]]],1]],newRow=RandomInteger[{1,10},{Length[mat]}]},newRow*hatted]],RandomInteger[{1,4},{n+6,1}],3][[5;;-3]];Ls=Zs[[All,1;;2]];Lbs=((Normal[SparseArray[Thread[Rule[#,(Det[Ls[[{##}]]]&@@@Partition[RotateLeft[#],2,1,1])/(Det[Ls[[#[[1;;2]]]]]*Det[Ls[[#[[2;;3]]]]])]],n]]&/@(RotateRight@Partition[Range[n],3,1,1])) . Zs[[All,3;;4]]);pList=TensorProduct@@@Transpose[{Ls,Lbs}];(*xList=Total[pList[[1;;Mod[#-1,Length[pList],1]]]]&/@Range[Length[pList]];*));

useRandomKinematics[n_,False]:=useRandomKinematics[n];
useRandomKinematics[n_,True,prec_:0]:=useSpinors[treeTools`generateRandomSpinorsReal[n,prec]];



(* ::Subsubsection:: *)
(*Specification of Kinematics*)


useSpinors[ls_List,lbs_List]/;MatrixQ[ls]&&MatrixQ[lbs]&&Length[ls]==Length[lbs]:=(treeTools`resetStoredKinematicEvaluations;Ls=ls;Lbs=lbs;pList=FullSimplify[TensorProduct@@@Transpose[{Ls,Lbs}]];(*xList=Total[pList[[1;;Mod[#-1,Length[pList],1]]]]&/@Range[Length[pList]];*)Zs=Join@@@Transpose[{Ls,(Normal[SparseArray[{i_,j_}:>If[j>1&&i>j,Det[Ls[[{j,i}]]],0],{Length[Ls],Length[Ls]}]] . Lbs)}];);
useSpinors[{ls_List,lbs_List}]:=useSpinors[ls,lbs];

useTwistors[zs_List]/;Length[zs]>=4:=(treeTools`resetStoredKinematicEvaluations;Zs=zs;Ls=Zs[[All,1;;2]];Lbs=FullSimplify[((Normal[SparseArray[Thread[Rule[#,(Det[Ls[[{##}]]]&@@@Partition[RotateLeft[#],2,1,1])/(Det[Ls[[#[[1;;2]]]]]*Det[Ls[[#[[2;;3]]]]])]],Length[zs]]]&/@(RotateRight@Partition[Range[Length[zs]],3,1,1])) . Zs[[All,3;;4]])];pList=FullSimplify[TensorProduct@@@Transpose[{Ls,Lbs}]];(*xList=Total[pList[[1;;Mod[#-1,Length[pList],1]]]]&/@Range[Length[pList]];*));
useTwistors[zs__List]:=useTwistors[{zs}];



(* ::Subsection:: *)
(*Display of Globally-Specified Kinematic Data*)


treeTools`functionTypes["L",3]="Displaying Specified Kinematic Data";
treeTools`functionNames["L",3]={
"showSpinors","showTwistors","showMomenta","showMomentaComponents"};


showSpinors:=If[Length[Ls]==0,Print["No kinematic data has been specified. Try calling ",Style["useReferenceKinematics[]",Bold]," or ",Style["useRandomKinematics[]",Bold],"."],Grid[Join[{Join[{""},nice[\[Lambda][#]]&/@Range[Length[Ls]]]},Transpose@Join[Prepend[Style[#,FontFamily->Times,FontSize->14]&/@#&/@Ls,nice@{\[Lambda]["",1],\[Lambda]["",2]}]],{""&/@Range[Length[Ls]+1]},{Join[{""},nice[\[Lambda]b[#]]&/@Range[Length[Ls]]]},Transpose@Join[Prepend[Style[#,FontFamily->Times,FontSize->14]&/@#&/@Lbs,nice@{\[Lambda]b["",1],\[Lambda]b["",2]}]]],Frame->{None,None,{{{6,7},{2,Length[Ls]+1}}->True,{{2,3},{2,Length[Ls]+1}}->True}},Spacings->{0,0.2}]];

showTwistors:=If[Length[Zs]==0,Print["No kinematic data has been specified. Try calling ",Style["useReferenceKinematics[]",Bold]," or ",Style["useRandomKinematics[]",Bold],"."],TableForm[Transpose[Zs],TableHeadings->{{nice[\[Lambda]["",1]],nice[\[Lambda]["",2]],Superscript["\[Mu]",1],Superscript["\[Mu]",2]},(Subscript[z,#]&/@Range[Length[Zs]])},TableAlignments->Center]];

showMomenta:=If[Length[Ls]==0,Print["No kinematic data has been specified. Try calling ",Style["useReferenceKinematics[]",Bold]," or ",Style["useRandomKinematics[]",Bold],"."],TableForm[{nice/@(TensorProduct@@@Transpose[{Ls,Lbs}])},TableHeadings->{{},(nice[p/@Range[Length[Ls]]])},TableAlignments->Center]];

showMomentaComponents:=If[Length[Ls]==0,Print["No kinematic data has been specified. Try calling ",Style["useReferenceKinematics[]",Bold]," or ",Style["useRandomKinematics[]",Bold],"."],TableForm[Transpose@toFourComponentMomenta[Ls,Lbs],TableHeadings->{Superscript[p,ToString[#]]&/@Range[0,3],(Subsuperscript[p,#,"\[Mu]"]&/@Range[Length[Ls]])},TableAlignments->Center]];



(* ::Subsection:: *)
(*Generating Random Kinematics*)


treeTools`functionTypes["L",4]="Randomly Generating OnShell Kinematic Data";
treeTools`functionNames["L",4]={
"generateRandomSpinors[n_,realQ_:False,prec_:\[Infinity]]","generateRandomMomenta[n_,prec_:\[Infinity]]","generateRandomTwistors[n_]"};


generateRandomSpinors[n_Integer]/;n>=4:=Block[{ls=Function[{diffs},{1&/@Range[n],Total[diffs[[1;;#]]]&/@Range[Length[diffs]]}]@(RandomInteger[{1,20},{n}]),lPerp,lbs},lPerp=NullSpace[ls];RotateLeft/@Transpose/@{ls,RandomInteger[{1,20},{2,n-2}] . lPerp}];
generateRandomSpinors[n_Integer,True,prec_:0]:=treeTools`generateRandomSpinorsReal[n,prec];

generateRandomMomenta[n_Integer,prec_:0]/;n>=4:=TensorProduct@@@Transpose[treeTools`generateRandomSpinorsReal[n,prec]];

generateRandomTwistors[n_Integer]/;n>=4:=Nest[Function[{mat},Block[{hatted=Append[Append[Total[mat[[#;;-1]]],1]&/@Range[2,Length[mat]],Append[PadRight[{},Length[mat[[1]]]],1]],newRow=RandomInteger[{1,20},{Length[mat]}]},newRow*hatted]],RandomInteger[{1,10},{n+6,1}],3][[5;;-3]];


treeTools`generateRandomSpinorsReal[n_Integer,prec_:0]/;n>=4:=Module[{\[Alpha],\[Beta],\[Gamma],\[Delta]},Block[{out,seedLsLbs,net,netRules},seedLsLbs=Transpose[List[{#1,#2+I #3},{#1,#2-I #3}]&@@@({#1,2#2 #3,(#2^2-#3^2)}&@@@RandomInteger[{-10,10},{n-2,3}])];net=Total[TensorProduct@@@Transpose[seedLsLbs]];netRules=Thread[Rule[{\[Alpha],\[Beta],\[Gamma],\[Delta]},{net[[1,1]],1/2 (net[[1,2]]+net[[2,1]]),1/2 I (net[[1,2]]-net[[2,1]]),net[[2,2]]}]];out=List[Join[{{Sqrt[Abs[(\[Beta]^2 + \[Gamma]^2 - \[Alpha]*\[Delta])/\[Delta]]], 0},{Sqrt[Abs[(\[Beta]^2 + \[Gamma]^2)/\[Delta]]],(((\[Beta] + I*\[Gamma]))/Sqrt[Abs[(\[Beta]^2 + \[Gamma]^2)/\[Delta]]])}},seedLsLbs[[1]]],Join[{{-Sqrt[Abs[(\[Beta]^2 + \[Gamma]^2 - \[Alpha]*\[Delta])/\[Delta]]], 0},{-Sqrt[Abs[(\[Beta]^2 + \[Gamma]^2)/\[Delta]]],- (\[Beta] - I*\[Gamma])/Sqrt[Abs[(\[Beta]^2 + \[Gamma]^2)/\[Delta]]]}},seedLsLbs[[2]]]]/.netRules;If[prec===0,out,Quiet[N[out,prec]]]]];


(* ::Subsection:: *)
(*Maps Between Kinematic Variables*)


treeTools`functionTypes["L",5]="Mapping Between Different Kinematic Variables";
treeTools`functionNames["L",5]={
"fromMomentumToSpinors[pList_]","toFourComponentMomenta[pMat_]","",
"fromMomentumXToBiTwistor[xMat_]","fromBitwistorToMomentumX[{zA_,zB_}]"};


fromMomentumToSpinors[pMat_List]/;(Dimensions[pMat]==={2,2}):=Block[{testMat=Quiet[Chop[Quiet[N[explicify[0,pMat],500]],Power[10,-400]]]},If[Chop[Det[testMat],Power[10,-400]]!=0,Print["The momentum is not null."];pMat,Which[testMat[[1]]==={0,0},{{0,1},pMat[[2]]},pMat[[All,1]]==={0,0},{pMat[[All,2]],{0,1}},True,({{1,pMat[[2,1]]/pMat[[1,1]]},pMat[[1]]})]]];

toFourComponentMomenta[pMat_List]/;(Dimensions[pMat]==={2,2}):=If[Not[Chop[Quiet[N[Det[explicify[0,pMat]],400]],Power[10,-300]]==0],toFourComponentMomenta[TensorProduct@@pMat],1/2 {#1+#4,#2+#3,1/I (#3-#2),#1-#4}&@@Flatten[pMat]];
toFourComponentMomenta[\[Lambda]_List,\[Lambda]b_List]/;(Length/@{\[Lambda],\[Lambda]b}==={2,2}):=toFourComponentMomenta@(TensorProduct[\[Lambda],\[Lambda]b]);
toFourComponentMomenta[\[Lambda]_List,\[Lambda]b_List]/;SameQ@@(Length/@{\[Lambda],\[Lambda]b}):=toFourComponentMomenta@(TensorProduct@@@Transpose[{\[Lambda],\[Lambda]b}]);
toFourComponentMomenta[pMat_List]/;(Dimensions[pMat]==={Length[Ls],2,2}):=toFourComponentMomenta/@pMat;

fromMomentumXToBiTwistor[pMat_List]/;MatrixQ[pMat]&&Length[pMat]==2:={{1,0,-pMat[[2,1]],-pMat[[2,2]]},{0,1,pMat[[1,1]],pMat[[1,2]]}};

fromBiTwistorToMomentumX[zA_List,zB_List]/;Length[zA]==Length[zB]==4:=Module[{twoBracket=Det[{zA[[1;;2]],zB[[1;;2]]}]},If[twoBracket===0,{{inf,inf},{inf,inf}},(TensorProduct[zA[[1;;2]],zB[[3;;4]]]-TensorProduct[zB[[1;;2]],zA[[3;;4]]])/twoBracket]];
fromBiTwistorToMomentumX[{zA_,zB_}]:=fromBiTwistorToMomentumX[zA,zB];


(* ::Subsection:: *)
(*Evaluation of Analytic Expressions*)


treeTools`functionTypes["L",6]="Evaluation of Analytic Expressions";
treeTools`functionNames["L",6]={
"evaluate[exprn_]","evaluatePermuted[legOrdering_][exprn_]","",
"evaluateWithSpinors[\[Lambda]_List,\[Lambda]b_List][exprn_]","evaluateWithTwistors[zs_List][exprn_]"};


evaluate[exprn0_]:=Block[{exprn},exprn=(ReleaseHold[exprn0]/.{\[Sigma][x_Integer,y_Integer]:>\[Sigma][x]-\[Sigma][y]});Unprotect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,ss,\[Epsilon]p,\[Epsilon]m,superFunction];ClearAll[ab,sb,sab,asb,p,br,s,\[Lambda],\[Lambda]b,ss,\[Epsilon]p,\[Epsilon]m,abZs,superFunction];If[Not[MatrixQ[Ls]],(Block[{workingN=Max[Cases[Flatten[List[Cases[exprn,sb[x__]:>x,{0,\[Infinity]}],Cases[exprn,ab[x__]:>x,{0,\[Infinity]}],Cases[exprn,asb[x__]:>x,{0,\[Infinity]}],Cases[exprn,sab[x__]:>x,{0,\[Infinity]}],Cases[exprn,p[x__]:>x,{0,\[Infinity]}],Cases[exprn,s[x__]:>x,{0,\[Infinity]}]]],q_Integer,{0,\[Infinity]}]]},If[workingN<3,exprn,(Print["No kinematic data has been specified. Reference kinematics for ",workingN," particles have been used."];useReferenceKinematics[workingN];evaluate[ReleaseHold[exprn0]])]]),(If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],((Set@@@{{ab,treeTools`abNr[Length[Zs]]},{sb,treeTools`sbNr[Length[Zs]]},{asb,treeTools`asbNr[Length[Zs]]},{sab,treeTools`sabNr[Length[Zs]]},{br,treeTools`brNr[Length[Zs]]},{s,treeTools`sNr[Length[Zs]]},{\[Lambda],treeTools`\[Lambda]Nr[Length[Zs]]},{\[Lambda]b,treeTools`\[Lambda]bNr[Length[Zs]]},{\[Epsilon]p,treeTools`\[Epsilon]pNr[Length[Zs]]},{\[Epsilon]m,treeTools`\[Epsilon]mNr[Length[Zs]]},{ss,treeTools`ssNr[Length[Zs]]}})),(Set@@@{{ab,treeTools`abN},{sb,treeTools`sbN},{asb,treeTools`asbN},{sab,treeTools`sabN},{br,treeTools`brN},{s,treeTools`sN},{\[Lambda],treeTools`\[Lambda]N},{\[Lambda]b,treeTools`\[Lambda]bN},{\[Epsilon]p,treeTools`\[Epsilon]pN},{\[Epsilon]m,treeTools`\[Epsilon]mN},{ss,treeTools`ssN}})];(exprn=exprn;If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],(abZs[x___Integer]:=abZs[x]=Signature[Ordering[{x}]]treeTools`abZsNr[Length[Zs]][Sequence@@Sort[{x}]]),(abZs[x___Integer]:=abZs[x]=Signature[Ordering[{x}]]treeTools`abZsN[Sequence@@Sort[{x}]])];exprn=exprn;(*If[Zs===treeTools`referenceTwistorList[[1;;Length[Zs]]],Set[p,treeTools`pNr[Length[Zs]]],Set[p,treeTools`pN]];exprn=exprn;*)ClearAll[ab,sb,sab,asb,p,br,s,\[Lambda],\[Lambda]b,abZs,ss,\[Epsilon]p,\[Epsilon]m,superFunction];Protect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,ss,\[Epsilon]p,\[Epsilon]m,superFunction];If[Not[Not[TrueQ[storeKinematicEvaluationsQ]]],resetStoredKinematicEvaluations];If[Length[Cases[Variables[exprn],treeTools`abN[__]|treeTools`sbN[__]|treeTools`asbN[__]|treeTools`brN[__]|treeTools`sN[__]|abZs[__]|treeTools`abZsN[__]|treeTools`\[Lambda]N[__]|treeTools`\[Lambda]bN[__]|treeTools`abNr[_][__]|treeTools`sbNr[_][__]|treeTools`asbNr[_][__]|treeTools`brNr[_][__]|treeTools`sNr[_][__]|treeTools`abZsNr[_][__]|treeTools`\[Lambda]Nr[_][__]|treeTools`\[Lambda]bNr[_][__]|treeTools`ssNr[_][__]|treeTools`\[Epsilon]mNr[_][__]|treeTools`\[Epsilon]pNr[_][__]|treeTools`ssN[__]|treeTools`\[Epsilon]mN[__]|treeTools`\[Epsilon]pN[__]|error[__],{0,\[Infinity]}]]>0,exprn=(exprn/.Join[Rule@@@(Reverse/@{{ab,treeTools`abN},{sb,treeTools`sbN},{asb,treeTools`asbN},{sab,treeTools`sabN},{br,treeTools`brN},{s,treeTools`sN},{\[Lambda],treeTools`\[Lambda]N},{\[Lambda]b,treeTools`\[Lambda]bN},{ab,abZs},{\[Epsilon]p,treeTools`\[Epsilon]pN},{\[Epsilon]m,treeTools`\[Epsilon]mN},{ss,treeTools`ssN}}),Rule@@@(Reverse/@{{ab,treeTools`abNr[Length[Zs]]},{sb,treeTools`sbNr[Length[Zs]]},{asb,treeTools`asbNr[Length[Zs]]},{sab,treeTools`sabNr[Length[Zs]]},{br,treeTools`brNr[Length[Zs]]},{s,treeTools`sNr[Length[Zs]]},{\[Lambda],treeTools`\[Lambda]Nr[Length[Zs]]},{\[Lambda]b,treeTools`\[Lambda]bNr[Length[Zs]]},{ab,abZs},{\[Epsilon]p,treeTools`\[Epsilon]pNr[Length[Zs]]},{\[Epsilon]m,treeTools`\[Epsilon]mNr[Length[Zs]]},{ss,treeTools`ssNr[Length[Zs]]}})]);If[Count[exprn,error[__],{0,\[Infinity]}]>0,Print["Incorrectly specified kinematic function(s): ",DeleteDuplicates[Cases[exprn,error[head_,args_]:>nice[head@@args],{0,\[Infinity]}]]];(exprn/.{error[head_,args_]:>(head@@args)}/.Join[Rule@@@(Reverse/@{{ab,treeTools`abN},{sb,treeTools`sbN},{asb,treeTools`asbN},{sab,treeTools`sabN},{br,treeTools`brN},{s,treeTools`sN},{\[Lambda],treeTools`\[Lambda]N},{\[Lambda]b,treeTools`\[Lambda]bN}}),Rule@@@(Reverse/@{{ab,treeTools`abNr[Length[Zs]]},{sb,treeTools`sbNr[Length[Zs]]},{asb,treeTools`asbNr[Length[Zs]]},{sab,treeTools`sabNr[Length[Zs]]},{br,treeTools`brNr[Length[Zs]]},{s,treeTools`sNr[Length[Zs]]},{\[Lambda],treeTools`\[Lambda]Nr[Length[Zs]]},{\[Lambda]b,treeTools`\[Lambda]bNr[Length[Zs]]}})]),Block[{workingN=Max[Cases[Flatten[List[Cases[exprn0,sb[x__]:>x,{0,\[Infinity]}],Cases[exprn0,ab[x__]:>x,{0,\[Infinity]}],Cases[exprn0,asb[x__]:>x,{0,\[Infinity]}],Cases[exprn0,sab[x__]:>x,{0,\[Infinity]}],Cases[exprn0,p[x__]:>x,{0,\[Infinity]}],Cases[exprn0,s[x__]:>x,{0,\[Infinity]}],Cases[exprn0,\[Epsilon]p[x__]:>x,{0,\[Infinity]}],Cases[exprn0,\[Epsilon]m[x__]:>x,{0,\[Infinity]}],Cases[exprn0,ss[x__]:>x,{0,\[Infinity]}]]],q_Integer,{0,\[Infinity]}]]},If[workingN<3||workingN>30||Count[exprn0,\[Epsilon][y_],{0,\[Infinity]}]>0,exprn,(Print["Insufficient kinematic data has been specified. Reference kinematics for ",workingN," particles have been used."];evaluateWithTwistors[treeTools`referenceTwistorList[[1;;workingN]]][ReleaseHold[exprn0]])]]],exprn]))]];SetAttributes[evaluate,HoldFirst];

evaluatePermuted[perm_List][exprn0_]:=If[perm===Sort[perm],evaluate[exprn0],If[(Length[DeleteDuplicates[perm]]==Length[perm]<=Length[Ls])&&(Max[Abs[perm]]<=Length[Ls]),Block[{exprn,evalRules,rotate=Thread[Rule[Sort[perm],perm]],permZs},Unprotect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,ss,\[Epsilon]p,\[Epsilon]m,superFunction];ClearAll[ab,sb,sab,asb,p,br,s,\[Lambda],\[Lambda]b,abZs,superFunction,ss,\[Epsilon]p,\[Epsilon]m];permZs=treeTools`zPerm[Range[Length[Ls]]/.rotate];exprn=(ReleaseHold[exprn0]);\[Epsilon]p[x_Integer]:=treeTools`\[Epsilon]pN[(x)/.rotate];\[Epsilon]m[x_Integer]:=treeTools`\[Epsilon]mN[(x)/.rotate];ss[x___]:=treeTools`ssN@@({x}/.rotate);ab[x___]:=ab[x]=treeTools`abN@@({x}/.rotate);sb[x___]:=sb[x]=treeTools`sbN@@({x}/.rotate);asb[x___]:=asb[x]=treeTools`asbN@@({x}/.rotate);sab[x___]:=sab[x]=treeTools`sabN@@({x}/.rotate);br[x___]:=br[x]=treeTools`brN@@({x}/.rotate);s[x___]:=s[x]=treeTools`sN@@Sort[({x}/.rotate)];\[Lambda][x_,y___]:=\[Lambda][x,y]=treeTools`\[Lambda]N[(x/.rotate),y];\[Lambda]b[x_,y___]:=\[Lambda]b[x,y]=treeTools`\[Lambda]bN[(x/.rotate),y];exprn=exprn;abZs[x__Integer]:=If[Not[OrderedQ[{x}]],Signature[Ordering[{x}]]abZs@@Sort[{x}],(abZs[x]=Det[permZs[[{x}/.Reverse/@rotate]]])];exprn=(exprn/.{superFunction[fcn_,cMat_]:>superFunction[ fcn,cMat[[All,Ordering@(Range[Length[cMat[[1]]]]/.rotate)]]]}/.{colorFactor[x__]:>colorFactor@@({x}/.rotate)});ClearAll[ab,sb,sab,asb,p,br,s,\[Lambda],\[Lambda]b,abZs,superFunction,ss,\[Epsilon]p,\[Epsilon]m];Protect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,superFunction,ss,\[Epsilon]p,\[Epsilon]m];exprn]]];SetAttributes[evaluatePermuted,HoldRest];

evaluateWithSpinors[ls_List,lbs_List][exprn_]:=evaluateWithSpinors[{ls,lbs}][exprn];
evaluateWithSpinors[{ls_List,lbs_List}][exprn0_]:=Block[{exprn,evalRules,pList=TensorProduct@@@Transpose[{ls,lbs}],Ls=ls,Lbs=lbs,zs=Normal[SparseArray[{i_,j_}:>If[j>1&&i>j,Det[ls[[{j,i}]]],0],{Length[ls],Length[ls]}]]},Unprotect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,superFunction,ss,\[Epsilon]p,\[Epsilon]m];ClearAll[p,br,s,f,ab,sb,sab,asb,\[Lambda],\[Lambda]b,superFunction,ss,\[Epsilon]p,\[Epsilon]m];zs=Join@@@Transpose[{ls,zs . lbs}];evalRules={p[x___]:>Total[pList[[{x}]]],x[y_]:>Total[pList[[1;;Mod[y-1,Length[pList],1]]]]};exprn=ReleaseHold[exprn0];br[args__]:=Block[{eps=Array[Signature[{##}]&,{2,2}],xList=({args}/.evalRules)},Tr[Dot@@(Join@@({#1 . eps,Transpose[eps . #2]}&@@@Partition[xList,2]))]];ss[x_,y_]:=Block[{args={x,y}/.({\[Epsilon]p[q_Integer]:>TensorProduct[{-1,1},Lbs[[q]]]/Det[{{-1,1},Ls[[q]]}],\[Epsilon]m[q_Integer]:>TensorProduct[Ls[[q]],{-1,1}]/Det[{{-1,1},Lbs[[q]]}],p[q_Integer]:>TensorProduct[Ls[[q]],Lbs[[q]]]})},If[And@@MatrixQ/@args,Det[Total[args]],error[ss,{x,y}]]];s[x__Integer]:=Det[Total[pList[[Flatten[List@@@{x}]]]]];ab[x___,cap[y_,z_,q___],w___]:=ab[x,cap[y,z,q],w]=If[Length[Join[y,z]]==5,(ab[x,#,w]&/@y) . ((ab@@@RotateLeft[Partition[Join[y,z],4,1,1]][[1;;Length[y]]])),Total[(((ab[x,#1,#2,w]ab@@Prepend[z,#3]))&@@@Partition[y,3,1,1])]];ab[a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@(Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[{B},2]/.evalRules)]))]),Ls[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];asb[a_Integer,B__p,c_Integer]/;OddQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@((Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[Append[{B},{{0,0},{0,0}}],2]/.evalRules)]))])[[1;;-2]]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];ab[x1_Integer,x2_Integer]:=ab[x1,x2]=Det[Ls[[{x1,x2}]]];ab[x1_Integer,x2_Integer,y__Integer]:=If[Not[OrderedQ[{x1,x2,y}]],Signature[Ordering[{x1,x2,y}]]ab@@Sort[{x1,x2,y}],(ab[x1,x2,y]=Det[zs[[{x1,x2,y}]]])];sb[a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Lbs[[a]],Sequence@@(Join@@Transpose[({Transpose/@#1,#2}&@@(Transpose[(Partition[{B},2]/.evalRules)]))]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];sab[a_Integer,B__p,c_Integer]/;OddQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Lbs[[a]],Sequence@@((Join@@Transpose[({Transpose/@#1,#2}&@@(Transpose[(Partition[Append[{B},{{0,0},{0,0}}],2]/.evalRules)]))])[[1;;-2]]),Ls[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];sb[x1_Integer,x2_Integer]:=sb[x1,x2]=Det[Lbs[[{x1,x2}]]];\[Lambda][x__]:=Ls[[x]];\[Lambda]b[x__]:=Lbs[[x]];exprn=(exprn/.evalRules);ClearAll[p,br,s,f,ab,sb,sab,asb,\[Lambda],\[Lambda]b,superFunction,ss,\[Epsilon]p,\[Epsilon]m];Protect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,superFunction,ss,\[Epsilon]p,\[Epsilon]m];exprn];SetAttributes[evaluateWithSpinors,HoldRest];

evaluateWithTwistors[zs_List][exprn0_]:=Block[{exprn,evalRules,pList,Ls,Lbs},Ls=zs[[All,1;;2]];Lbs=((Normal[SparseArray[Thread[Rule[#,(Det[Ls[[{##}]]]&@@@Partition[RotateLeft[#],2,1,1])/(Det[Ls[[#[[1;;2]]]]]*Det[Ls[[#[[2;;3]]]]])]],Length[zs]]]&/@(RotateRight@Partition[Range[Length[zs]],3,1,1])) . zs[[All,3;;4]]);pList=TensorProduct@@@Transpose[{Ls,Lbs}];Unprotect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,superFunction];ClearAll[p,br,s,f,ab,sb,sab,asb,\[Lambda],\[Lambda]b];(evalRules={p[x___]:>Total[pList[[{x}]]],x[y_]:>Total[pList[[1;;Mod[y-1,Length[pList],1]]]]};exprn=ReleaseHold[exprn0];br[args__]:=Block[{eps=Array[Signature[{##}]&,{2,2}],xList=({args}/.evalRules)},Tr[Dot@@(Join@@({#1 . eps,Transpose[eps . #2]}&@@@Partition[xList,2]))]];s[x__Integer]:=Det[Total[pList[[Flatten[List@@@{x}]]]]];ab[x___,cap[y_,z_,q___],w___]:=ab[x,cap[y,z,q],w]=If[Length[Join[y,z]]==5,(ab[x,#,w]&/@y) . ((ab@@@RotateLeft[Partition[Join[y,z],4,1,1]][[1;;Length[y]]])),Total[(((ab[x,#1,#2,w]ab@@Prepend[z,#3]))&@@@Partition[y,3,1,1])]];ab[a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@(Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[{B},2]/.evalRules)]))]),Ls[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];asb[a_Integer,B__p,c_Integer]/;OddQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@((Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[Append[{B},{{0,0},{0,0}}],2]/.evalRules)]))])[[1;;-2]]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];ab[x1_Integer,x2_Integer]:=ab[x1,x2]=Det[Ls[[{x1,x2}]]];ab[x1_Integer,x2_Integer,y__Integer]:=If[Not[OrderedQ[{x1,x2,y}]],Signature[Ordering[{x1,x2,y}]]ab@@Sort[{x1,x2,y}],(ab[x1,x2,y]=Det[zs[[{x1,x2,y}]]])];sb[a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Lbs[[a]],Sequence@@(Join@@Transpose[({Transpose/@#1,#2}&@@(Transpose[(Partition[{B},2]/.evalRules)]))]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];sab[a_Integer,B__p,c_Integer]/;OddQ[Length[{B}]]:=Module[{spacer},(Dot@@(Riffle[{Lbs[[a]],Sequence@@((Join@@Transpose[({Transpose/@#1,#2}&@@(Transpose[(Partition[Append[{B},{{0,0},{0,0}}],2]/.evalRules)]))])[[1;;-2]]),Ls[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))];sb[x1_Integer,x2_Integer]:=sb[x1,x2]=Det[Lbs[[{x1,x2}]]];\[Lambda][x__]:=Ls[[x]];\[Lambda]b[x__]:=Lbs[[x]];exprn=(exprn/.evalRules);ClearAll[p,br,s,f,ab,sb,sab,asb,\[Lambda],\[Lambda]b];Protect[ab,asb,sab,br,s,cap,p,\[Lambda],\[Lambda]b,abZs,superFunction];exprn)];SetAttributes[evaluateWithTwistors,HoldRest];


(* ::Subsubsection:: *)
(*Internal: Evaluation Behind-the-Scenes*)


storeKinematicEvaluationsQ=True;

treeTools`resetStoredKinematicEvaluations:=(ClearAll[treeTools`pN,treeTools`abN,treeTools`sbN,treeTools`asbN,treeTools`sabN,treeTools`sN,treeTools`brN,treeTools`\[Lambda]N,treeTools`\[Lambda]bN,treeTools`zPerm,treeTools`abZsN,treeTools`\[Epsilon]pN,treeTools`\[Epsilon]mN,treeTools`ssN,treeTools`scatteringEquationSolutionsN];treeTools`zPerm[perm_List]/;(Length[perm]<=Length[Ls]):=treeTools`zPerm[perm]=If[(Length[DeleteDuplicates[perm]]==Length[perm])&&Max[Abs[perm]]<=Length[Ls],Join@@@Transpose[{Ls[[perm]],(Normal[SparseArray[{i_,j_}:>If[j>1&&i>j,Det[Ls[[perm[[{j,i}]]]]],0],{Length[perm],Length[perm]}]] . (Lbs[[perm]]))}]];treeTools`\[Lambda]N[x__Integer]/;({x}[[1]]<=Length[Ls]):=treeTools`\[Lambda]N[x]=Ls[[x]];treeTools`\[Lambda]bN[x__Integer]/;({x}[[1]]<=Length[Lbs]):=treeTools`\[Lambda]bN[x]=Lbs[[x]];treeTools`pN[]={{0,0},{0,0}};treeTools`pN[x_Integer]/;(Abs[x]<=Length[Ls]):=(treeTools`pN[x]=TensorProduct[Ls[[x]],Lbs[[x]]]);treeTools`pN[x__Integer]/;(Max[Abs[{x}]]<=Length[Ls]):=If[Not[OrderedQ[{x}]],treeTools`pN@@Sort[{x}],(treeTools`pN[x]=Total[treeTools`pN/@{x}])];treeTools`sN[x__Integer]/;(Max[Abs[{x}]]<=Length[Ls]):=If[Not[OrderedQ[{x}]],treeTools`sN@@Sort[{x}],(treeTools`sN[x]=Det[treeTools`pN[x]])];treeTools`\[Epsilon]pN[x_Integer]/;(x<=Length[Ls]):=treeTools`\[Epsilon]pN[x]=TensorProduct[{-1,1},Lbs[[x]]]/Det[{{-1,1},Ls[[x]]}];treeTools`\[Epsilon]mN[x_Integer]/;(x<=Length[Ls]):=treeTools`\[Epsilon]mN[x]=TensorProduct[Ls[[x]],{-1,1}]/Det[{{-1,1},Lbs[[x]]}];treeTools`ssN[x_,y_]/;And[MatrixQ[x],MatrixQ[y]]:=treeTools`ssN[x,y]=Det[x+y];treeTools`ssN[x_,p[y__Integer]]/;(0<=Max[{y}]<=Length[Ls])&&MatrixQ[x]:=treeTools`ssN[x,p[y]]=Det[x+treeTools`pN[y]];treeTools`ssN[p[y__Integer],x_]/;(0<=Max[{y}]<=Length[Ls])&&MatrixQ[x]:=treeTools`ssN[p[y],x]=Det[x+treeTools`pN[y]];treeTools`ssN[p[y__Integer],p[x__Integer]]/;(0<=Max[{y,x}]<=Length[Ls])&&MatrixQ[x]:=treeTools`ssN[p[y],p[x]]=Det[treeTools`pN[y]+treeTools`pN[y]];treeTools`brN[args__p]:=treeTools`brN[args]=Module[{eps=Array[Signature[{##}]&,{2,2}],xList=({args}/.{p[x___]:>treeTools`pN[x]})},Tr[Dot@@(Join@@({#1 . eps,Transpose[eps . #2]}&@@@Partition[xList,2]))]];treeTools`abN[x_Integer,y_Integer]/;(Max[Abs[{x,y}]]<=Length[Ls]):=If[Not[OrderedQ[{x,y}]],-treeTools`abN[y,x],(treeTools`abN[x,y]=Det[Ls[[{x,y}]]])];treeTools`abN[x_Integer,y_Integer,z__Integer]:=treeTools`abN[x,y,z]=If[Length[DeleteDuplicates[{x,y,z}]]<4,0,abZs[x,y,z]];treeTools`abZsN[x___Integer]/;(Max[Abs[{x}]]<=Length[Zs]):=If[Not[OrderedQ[{x}]],Signature[Ordering[{x}]]treeTools`abZsN@@Sort[{x}],(treeTools`abZsN[x]=Det[Zs[[{x},1;;Length[{x}]]]])];treeTools`abN[x___,cap[y_,z_,q___],w___]:=treeTools`abN[x,cap[y,z,q],w]=If[Length[Join[y,z]]==5,(treeTools`abN[x,#,w]&/@y) . ((treeTools`abN@@@RotateLeft[Partition[Join[y,z],4,1,1]][[1;;Length[y]]])),Total[(((treeTools`abN[x,#1,#2,w]treeTools`abN@@Prepend[z,#3]))&@@@Partition[y,3,1,1])]];treeTools`abN[a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Module[{argList={B}/.{p[x___]:>treeTools`pN[x]}},If[Count[argList,p[___],{0,\[Infinity]}]>0||(Max[Abs[{a,c}]]>Length[Ls])||(Not[And@@(MatrixQ/@argList)]),error2[ab,{a,B,c}],(treeTools`abN[a,B,c]=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@(Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[argList,2])]))]),Ls[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))])]];treeTools`asbN[a_Integer,B__p,c_Integer]/;OddQ[Length[{B}]]:=Module[{argList=({B}/.{p[x___]:>treeTools`pN[x]})},If[Count[argList,p[___],{0,\[Infinity]}]>0||(Max[Abs[{a,c}]]>Length[Ls])||(Not[And@@(MatrixQ/@argList)]),error2[asb,{a,B,c}],(treeTools`asbN[a,B,c]=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@((Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[Append[argList,{{0,0},{0,0}}],2])]))])[[1;;-2]]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))])]];treeTools`sbN[x_Integer,y_Integer]/;(Max[Abs[{x,y}]]<=Length[Lbs]):=If[Not[OrderedQ[{x,y}]],-treeTools`sbN[y,x],(treeTools`sbN[x,y]=Det[Lbs[[{x,y}]]])];treeTools`sbN[a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Block[{argList={B}/.{p[x___]:>treeTools`pN[x]}},If[Count[argList,p[___],{0,\[Infinity]}]>0||(Max[Abs[{a,c}]]>Length[Lbs])||(Not[And@@(MatrixQ/@argList)]),error2[sb,{a,B,c}],(treeTools`sbN[a,B,c]=Module[{spacer},(Dot@@(Riffle[{Lbs[[a]],Sequence@@(Join@@Transpose[({Transpose/@#1,#2}&@@(Transpose[(Partition[argList,2])]))]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))])]];treeTools`sabN[a_,B___,c_]:=treeTools`asbN[c,Sequence@@Reverse[{B}],a];treeTools`abN[a_,B__,c_]/;(OddQ[Length[{B}]]):=error[ab,{a,B,c}];treeTools`sbN[a_,B__,c_]/;(OddQ[Length[{B}]]):=error[sb,{a,B,c}];treeTools`asbN[a_,B__,c_]/;(EvenQ[Length[{B}]]):=error[asb,{a,B,c}];);
treeTools`resetStoredKinematicEvaluations;

treeTools`clearAllStoredKinematicEvaluations:=((ClearAll[treeTools`pNr,treeTools`abNr,treeTools`sbNr,treeTools`asbNr,treeTools`sabNr,treeTools`sNr,treeTools`\[Lambda]Nr,treeTools`\[Lambda]bNr,treeTools`zPermNr,treeTools`abZsNr,treeTools`brNr,treeTools`ssNr,treeTools`\[Epsilon]pNr,treeTools`\[Epsilon]mNr,treeTools`scatteringEquationSolutionsN];treeTools`zPermNr[n_Integer][perm_List]/;(Length[perm]<=Length[Ls]):=treeTools`zPermNr[n][perm]=If[(Length[DeleteDuplicates[perm]]==Length[perm])&&Max[Abs[perm]]<=Length[Ls],Join@@@Transpose[{Ls[[perm]],(Normal[SparseArray[{i_,j_}:>If[j>1&&i>j,Det[Ls[[perm[[{j,i}]]]]],0],{Length[perm],Length[perm]}]] . (Lbs[[perm]]))}]];treeTools`\[Lambda]Nr[n_Integer][x__Integer]/;({x}[[1]]<=Length[Ls]):=treeTools`\[Lambda]Nr[n][x]=Ls[[x]];treeTools`\[Lambda]bNr[n_Integer][x__Integer]/;({x}[[1]]<=Length[Lbs]):=treeTools`\[Lambda]bNr[n][x]=Lbs[[x]];treeTools`pNr[n_Integer][]={{0,0},{0,0}};treeTools`pNr[n_Integer][x_Integer]/;(Abs[x]<=Length[Ls]):=(treeTools`pNr[n][x]=TensorProduct[Ls[[x]],Lbs[[x]]]);treeTools`pNr[n_Integer][x__Integer]/;(Max[Abs[{x}]]<=Length[Ls]):=If[Not[OrderedQ[{x}]],treeTools`pNr[n]@@Sort[{x}],(treeTools`pNr[n][x]=Total[treeTools`pNr[n]/@{x}])];treeTools`\[Epsilon]pNr[n_Integer][x_Integer]/;(x<=Length[Ls]):=treeTools`\[Epsilon]pNr[n][x]=TensorProduct[{-1,1},Lbs[[x]]]/Det[{{-1,1},Ls[[x]]}];treeTools`\[Epsilon]mNr[n_Integer][x_Integer]/;(x<=Length[Ls]):=treeTools`\[Epsilon]mNr[n][x]=TensorProduct[Ls[[x]],{-1,1}]/Det[{{-1,1},Lbs[[x]]}];treeTools`ssNr[n_Integer][x_?MatrixQ,y_?MatrixQ]:=treeTools`ssNr[n][x,y]=Det[x+y];treeTools`ssNr[n_Integer][x_?MatrixQ,p[y__Integer]]/;0<=Max[{y}]<=Length[Ls]:=treeTools`ssNr[n][x,p[y]]=Det[x+treeTools`pNr[n][y]];treeTools`ssNr[n_Integer][p[y__Integer],x_?MatrixQ]/;0<=Max[{y}]<=Length[Ls]:=treeTools`ssNr[n][p[y],x]=Det[x+treeTools`pNr[n][y]];treeTools`ssNr[n_Integer][p[y__Integer],p[x__Integer]]/;0<=Max[{x,y}]<=Length[Ls]:=treeTools`ssNr[n][p[y],p[x]]=Det[treeTools`pNr[n][x]+treeTools`pNr[n][y]];treeTools`sNr[n_Integer][x__Integer]/;(Max[Abs[{x}]]<=Length[Ls]):=If[Not[OrderedQ[{x}]],treeTools`sNr[n]@@Sort[{x}],(treeTools`sNr[n][x]=Det[treeTools`pNr[n][x]])];treeTools`abNr[n_Integer][x_Integer,y_Integer]/;(Max[Abs[{x,y}]]<=Length[Ls]):=If[Not[OrderedQ[{x,y}]],-treeTools`abNr[Length[Zs]][y,x],(treeTools`abNr[Length[Zs]][x,y]=Det[Ls[[{x,y}]]])];treeTools`abNr[n_Integer][x_Integer,y_Integer,z__Integer]:=If[Not[OrderedQ[{x,y,z}]],Signature[Ordering[{x,y,z}]]treeTools`abNr[n]@@Sort[{x,y,z}],(treeTools`abNr[n][x,y,z]=If[Length[DeleteDuplicates[{x,y,z}]]<4,0,abZs[x,y,z]])];treeTools`abZsNr[n_Integer][x___Integer]/;(Max[Abs[{x}]]<=Length[Zs]):=If[Not[OrderedQ[{x}]],Signature[Ordering[{x}]]treeTools`abZsNr[n]@@Sort[{x}],(treeTools`abZsNr[n][x]=Det[Zs[[{x},1;;Length[{x}]]]])];treeTools`brNr[n_Integer][args__]:=treeTools`brNr[n][args]=Module[{eps=Array[Signature[{##}]&,{2,2}],xList=({args}/.{p[x___]:>treeTools`pNr[n][x]})},Tr[Dot@@(Join@@({#1 . eps,Transpose[eps . #2]}&@@@Partition[xList,2]))]];treeTools`abNr[n_Integer][x___,cap[y_,z_,q___],w___]:=treeTools`abNr[n][x,cap[y,z,q],w]=If[Length[Join[y,z]]==5,(treeTools`abNr[n][x,#,w]&/@y) . ((treeTools`abNr[n]@@@RotateLeft[Partition[Join[y,z],4,1,1]][[1;;Length[y]]])),Total[(((treeTools`abNr[n][x,#1,#2,w]treeTools`abNr[n]@@Prepend[z,#3]))&@@@Partition[y,3,1,1])]];treeTools`abNr[n_Integer][a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Module[{argList={B}/.{p[x___]:>treeTools`pNr[n]@@Sort[{x}]}},If[Count[argList,p[___],{0,\[Infinity]}]>0||(Max[Abs[{a,c}]]>Length[Ls])||(Not[And@@(MatrixQ/@argList)]),error[ab,{a,B,c}],(treeTools`abNr[n][a,B,c]=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@(Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[argList,2])]))]),Ls[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))])]];treeTools`asbNr[n_Integer][a_Integer,B__p,c_Integer]/;OddQ[Length[{B}]]:=Module[{argList=({B}/.{p[x___]:>treeTools`pNr[n]@@Sort[{x}]})},If[Count[argList,p[___],{0,\[Infinity]}]>0||(Max[Abs[{a,c}]]>Length[Ls])||(Not[And@@(MatrixQ/@argList)]),error[asb,{a,B,c}],(treeTools`asbNr[n][a,B,c]=Module[{spacer},(Dot@@(Riffle[{Ls[[a]],Sequence@@((Join@@Transpose[({#1,Transpose/@#2}&@@(Transpose[(Partition[Append[argList,{{0,0},{0,0}}],2])]))])[[1;;-2]]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))])]];treeTools`sbNr[n_Integer][x_Integer,y_Integer]/;(Max[Abs[{x,y}]]<=Length[Lbs]):=If[Not[OrderedQ[{x,y}]],-treeTools`sbNr[n][y,x],(treeTools`sbNr[n][x,y]=Det[Lbs[[{x,y}]]])];treeTools`sbNr[n_Integer][a_Integer,B__p,c_Integer]/;EvenQ[Length[{B}]]:=Block[{argList={B}/.{p[x___]:>treeTools`pNr[n]@@Sort[{x}]}},If[Count[argList,p[___],{0,\[Infinity]}]>0||(Max[Abs[{a,c}]]>Length[Lbs])||(Not[And@@(MatrixQ/@argList)]),error[sb,{a,B,c}],(treeTools`sbNr[n][a,B,c]=Module[{spacer},(Dot@@(Riffle[{Lbs[[a]],Sequence@@(Join@@Transpose[({Transpose/@#1,#2}&@@(Transpose[(Partition[argList,2])]))]),Lbs[[c]]},spacer]/.{spacer->{{0,1},{-1,0}}}))])]];treeTools`sabNr[n_Integer][a_,B__,c_]:=treeTools`asbNr[n][c,Sequence@@Reverse[{B}],a];treeTools`abNr[n_Integer][a_,B__,c_]/;(OddQ[Length[{B}]]):=error[ab,{a,B,c}];treeTools`sbNr[n_Integer][a_,B__,c_]/;(OddQ[Length[{B}]]):=error[sb,{a,B,c}];treeTools`asbNr[n_Integer][a_,B__,c_]/;(EvenQ[Length[{B}]]):=error[asb,{a,B,c}];);treeTools`resetStoredKinematicEvaluations;);
treeTools`clearAllStoredKinematicEvaluations;


(* ::Subsection:: *)
(*Modifications of Kinematics: Shifts etc.*)


treeTools`functionTypes["L",7]="Modifications of Kinematic Data";
treeTools`functionNames["L",7]={
"bcfwShiftSpinors[{a_,b_}]","",
"inverseSoftSpinors[newLegs__]"};


(* ::Subsubsection:: *)
(*BCFW Shifted Spinors*)


bcfwShiftSpinors[a_Integer,b_Integer]/;a<=Length[Ls]&&b<=Length[Ls]&&Not[SameQ@@Mod[{a,b},Length[Ls]]]:={ReplacePart[Ls,{b->Ls[[b]]+\[Alpha] Ls[[a]]}],ReplacePart[Lbs,{a->Lbs[[a]]-\[Alpha] Lbs[[b]]}]};
bcfwShiftSpinors[{a_Integer,b_Integer}]:=bcfwShiftSpinors[a,b];


(* ::Subsubsection:: *)
(*Inverse Soft Spinors*)


inverseSoftSpinors[slot_Integer,{ls_List,lbs_List}]/;1<=slot<=(Length[ls]+1):=Block[{n=Length[ls],l,lb},{l,lb}=RandomInteger[{1,20},{2,2}];{Insert[ReplacePart[ls,{Mod[slot-1,n,1]->ls[[Mod[slot-1,n,1]]]-\[Epsilon] l Det[{lbs[[Mod[slot,n,1]]],lb}]/Det[lbs[[Mod[{slot,slot-1},n,1]]]],Mod[slot,n,1]->ls[[Mod[slot,n,1]]]+\[Epsilon] l Det[{lbs[[Mod[slot-1,n,1]]],lb}]/Det[lbs[[Mod[{slot,slot-1},n,1]]]]}],\[Epsilon] l,slot],Insert[lbs,lb,slot]}];
inverseSoftSpinors[slot_Integer,{ls_List,lbs_List}]/;-1>=slot>=-(Length[ls]+1):=Block[{n=Length[ls],l,lb},{l,lb}=RandomInteger[{1,20},{2,2}];{Insert[ls,l,-slot],Insert[ReplacePart[lbs,{Mod[-slot-1,n,1]->lbs[[Mod[-slot-1,n,1]]]-\[Epsilon] lb Det[{ls[[Mod[-slot,n,1]]],l}]/Det[ls[[Mod[{-slot,-slot-1},n,1]]]],Mod[-slot,n,1]->lbs[[Mod[-slot,n,1]]]+\[Epsilon] lb Det[{ls[[Mod[-slot-1,n,1]]],l}]/Det[ls[[Mod[{-slot,-slot-1},n,1]]]]}],\[Epsilon] lb,-slot]}];
inverseSoftSpinors[slot_]:=inverseSoftSpinors[slot,{Ls,Lbs}];
inverseSoftSpinors[{slotList_Integer},{ls_List,lbs_List}]:=(inverseSoftSpinors[slotList,{ls,lbs}]/.\[Epsilon]->Symbol[StringJoin["\[Epsilon]"<>ToString[Length[{slotList}]]]]);
inverseSoftSpinors[{slotList__Integer,lastSlot_Integer},{ls_List,lbs_List}]:=inverseSoftSpinors[{slotList},(inverseSoftSpinors[lastSlot,{ls,lbs}]/.\[Epsilon]->Symbol[StringJoin["\[Epsilon]"<>ToString[Length[{slotList}]+1]]])];


(* ::Section:: *)
(*About the Package*)


treeTools`functionTypes["M"]="Information and Syntax for Using Package";


(* ::Subsection:: *)
(*Listing Functions*)


treeTools`functionTypes["M",1]="Information about the Package";
treeTools`functionNames["M",1]={
"protectedSymbolList","symbolsAndFunctionHeads","",
"definedFunctionCategories[]","definedFunctionCategories[section_]","definedFunctionCategories[sec_,subsection_]"};


ClearAll[protectedSymbolList,symbolsAndFunctionHeads,treeTools`definedFunctionsList];


protectedSymbolList:=protectedSymbolList=DeleteDuplicates[DeleteCases[Join@@treeTools`symbolsAndFunctionHeads[[1]],""]];

symbolsAndFunctionHeads:=symbolsAndFunctionHeads=Sort[DeleteDuplicates[DeleteCases[Join@@(Join@@treeTools`symbolsAndFunctionHeads),""]]]/.Append[(#->Style[#,Darker[Blue],Bold]&/@protectedSymbolList),x_String:>Style[x,Bold]];

definedFunctionCategories[]:=Grid[Transpose[{Style[#<>". ",FontFamily->"Times",FontSize->24,Bold]&/@(treeTools`functionGroupings),Style[#,FontFamily->"Times",Darker@Red,FontSize->24,Bold]&/@#}]&@treeTools`definedFunctionsList[[1,All,1,1,1]],Alignment->Left];

definedFunctionCategories[x_]/;MemberQ[Join[treeTools`functionGroupings,Symbol/@treeTools`functionGroupings],x]:=definedFunctionCategories[x]=Module[{no=Flatten[Position[treeTools`functionGroupings,ToString[x]]][[1]]},Grid[Prepend[Transpose[{Row[{Style[ToString[x]<>".",FontFamily->"Times",FontSize->16,Bold],#}]&/@(Style[ToString[#],FontFamily->"Times",FontSize->16,Bold]&/@Range[Length[#]]),Row[{"  ",Style[#,FontFamily->"Times",Darker@Blue,FontSize->20,Bold]}]&/@#}]&@(treeTools`definedFunctionsList[[1,no,1,2,1,All,1,1,1]]),definedFunctionCategories[][[1,no]]],Alignment->Left]];

definedFunctionCategories[x_,b_Integer]/;MemberQ[Join[treeTools`functionGroupings,Symbol/@treeTools`functionGroupings],x]:=definedFunctionCategories[x,b]=Module[{a=Flatten[Position[treeTools`functionGroupings,ToString[x]]][[1]]},If[b>Length[treeTools`definedFunctionsList[[1,a,1,2,1]]],"",Column[{Grid[{definedFunctionCategories[x][[1,1]],definedFunctionCategories[x][[1,b+1]]},Alignment->Left],Column[Row[{"      ",#}]&/@(Join@@treeTools`definedFunctionsList[[1,a,1,2,1,b,1,2,1,All,1]]//.{{q___,"","",r___}:>{q,"",r},{q___,""}:>{q}}),Alignment->Left]},Alignment->Left]]];

definedFunctionCategories[x_Integer,q___]/;MemberQ[Range[Length[treeTools`functionGroupings]],x]:=definedFunctionCategories[treeTools`functionGroupings[[x]],q];







treeTools`definedFunctionsList:=treeTools`definedFunctionsList=Column[Column[{#[[1]],Column[(Function[{data},Column[{data[[1]],Row[Column[#,Alignment->Left]&/@(Function[{list},Module[{breaks=Prepend[Append[Flatten[Position[list,""]],Length[list]+1],0],new,lens},new=list[[#1+1;;#2-1]]&@@@Partition[breaks,2,1];new=(new//.{{x___,{y__},{z__},w___}/;Length[{y,z}]<=6:>{x,{y,"",z},w}});new=Join@@(If[Length[#]>7,PadRight[#,If[Length[new]==1,Length[new[[1]]]-Count[new[[1]],"",{0,\[Infinity]}]+1,7],""]&/@Partition[#,7,7,1,{}],{PadRight[#,7,""]}]&/@new);If[Length[new]==1,((new[[{1}]]//.{{x___,"",""}:>{x,""}})),new]]]@data[[2;;-1]]),Spacer[1]]},Alignment->{Left,Center}]]/@#[[2;;-1]])]},Alignment->Left]&/@(Prepend[(Prepend[#2,#1]&@@@#2),#1]&@@@Prepend[Function[{head,range},{Style[treeTools`functionTypes[head],FontFamily->"Times",Bold,FontSize->32,Darker@Red],({Style[treeTools`functionTypes[head,#],FontFamily->"Times",Bold,Italic,FontSize->26,Darker@Blue],(treeTools`formatFunctionName/@treeTools`functionNames[head,#])}&/@Range[range])}]@@@(treeTools`functionSections[[2;;-1]]),{Style[treeTools`functionTypes["A"],FontFamily->"Times",Bold,FontSize->32,Darker@Red],({Style[treeTools`functionTypes["A",#],FontFamily->"Times",Bold,Italic,FontSize->26,Darker@Blue],(treeTools`formatFunctionName[#,True]&/@treeTools`functionNames["A",#])})&/@Range[5]}])];
treeTools`functionGroupings:=Select[DownValues[treeTools`functionTypes][[All,1,1,-1]],Head[#]==String&];
treeTools`functionSections:=Module[{dv=DownValues[treeTools`functionTypes][[All,1,1,1]]},({#,Count[dv,#]-1}&/@DeleteDuplicates[dv])];



treeTools`symbolsAndFunctionHeads:=Function[{head,range},StringJoin@@@#&/@((Characters/@#&/@(treeTools`functionNames[head,#]&/@Range[range]))//.{a___,"[",b___}:>{a})]@@@(treeTools`functionSections);

treeTools`formatFunctionName["",protectedQ_:False]:="";
treeTools`formatFunctionName[name_String,protectedQ_:False]:=Module[{blackList=Characters/@{"Ls","Zs","colorDressedYMampSeeds","colorDressedYMamp","localCovariantPartialYMamp","localCovariantColoredYMamp","localCovariantGRamp","colorFactorToTracesRule","colorFactorReductionRule","False","True","Integer"},blueList=Characters/@{"\[Xi]","superFunction","colorFactor","\[Sigma]","amp","\[Lambda]b","\[Lambda]"},replace},replace=Join[{{x___,"_","L","i","s","t",y___}:>{x,Row[Join[Style[#,Bold,RGBColor[0.263`,0.537`,0.345`]]&/@{"_"},Style[#,Bold,Black]&/@{"L","i","s","t"}]],y}},Function[{b},{x___,Sequence@@b,y___}:>{x,Row[Style[#,Bold,Black]&/@b],y}]/@blackList,{{x___,"t","r","[",y___}:>{x,Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{"t","r"}],"[",y}},Prepend[Function[{b},{x___,Sequence@@b,y___}:>{x,Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@b],y}]/@blueList,#->#&@Characters["superFunctionProductRule"]],{{x___,"_","p",y___}:>{x,Row[Join[Style[#,Bold,RGBColor[0.263`,0.537`,0.345`]]&/@{"_"},Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{"p"}]],y},{x___,"_","a","m","p",y___}:>{x,Row[Join[Style[#,Bold,RGBColor[0.263`,0.537`,0.345`]]&/@{"_"},Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{"a","m","p"}]],y},{x___,"_","m",y___}:>{x,Row[Join[Style[#,Bold,RGBColor[0.263`,0.537`,0.345`]]&/@{"_"},Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{"m"}]],y},{x___,"_","\[Tau]",y___}:>{x,Row[Join[Style[#,Bold,RGBColor[0.263`,0.537`,0.345`]]&/@{"_"},Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{"\[Tau]"}]],y}}];(If[Head[#]===String,{#},#]&@Characters[name])//.replace/.{{x_}:>Row[{Style[x,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]}],{x_,y_}:>Row[{Style[StringJoin[x,y],Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]}],{"t","r","[",y___,"]"}:>Row[{Style["tr",Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{"s","u","p","e","r","F","u","n","c","t","i","o","n","[",y___,"]"}:>Row[{Style["superFunction",Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{"a","b","[",y___,"]"}:>Row[{Style["ab",Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Style["[",Bold,Black],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{"c","a","p","[",y___,"]"}:>Row[{Style["cap",Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{"R","[",y___,"]"}:>Row[{Style["R",Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{"c","o","l","o","r","F","a","c","t","o","r","[",y___,"]"}:>Row[{Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{"c","o","l","o","r","F","a","c","t","o","r"}],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{"a","m","p","[",y___,"]"}:>Row[{Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{"a","m","p"}],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{x___,"[",y___,":",y0___,",",y3___,":",y4___,"]","[",y5___,"]"}:>Row[{Row[Style[#,Bold,If[protectedQ,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`],Black]]&/@{x}],Style["[",Bold],Row[Which[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Head[#]===Style,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style[":",Bold],Row[Style[#,Bold]&/@{y0,","}],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y3}],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Black]]&/@{":",y4}],Style["][",Bold,Black],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y5}],Style["]",Bold,Black]}],{x___,"[",y___,":",y0___,",",y3___,":",y4___,"]"}:>Row[{Row[Style[#,Bold,If[protectedQ,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`],Black]]&/@{x}],Style["[",Bold],Row[Which[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style[":",Bold],Row[Style[#,Bold]&/@{y0,","}],Row[Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]&/@{y3}],Row[Style[#,Bold]&/@{":",y4}],Style["]",Bold,Black]}],{x___,"[",y___,":",y2___,"]","[",z___,"]"}:>Row[{Row[Style[#,Bold,If[protectedQ,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`],Black]]&/@{x}],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style[":",Bold,Black],If[{y2}==={},Nothing,Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Black]]&/@{y2}]],Style["][",Black,Bold],Row[Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]&/@{z}],Style["]",Bold]}],{x___,"[",y___,":",y2___,"]"}:>Row[{Row[Style[#,Bold,If[protectedQ,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`],Black]]&/@{x}],Style["[",Bold],(*Row[Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]&/@{y}]*)Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style[":",Bold],If[{y2}==={},Nothing,Row[Which[MemberQ[{"3","{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y2}]],Style["]",Bold,Black]}],{x___,"[",y___,"]","[",z___,"]"}:>Row[{Row[Style[#,Bold,If[protectedQ,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`],Black]]&/@{x}],Style["[",Bold,Black],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["][",Black,Bold],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{z}],Style["]",Bold]}],{x___,"[",y___,"]"}:>Row[{Row[Style[#,Bold,If[protectedQ,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`],Black]]&/@{x}],Style["[",Bold],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],Head[#]===Row,#,True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{x_,y__}:>Row[Style[#,Bold,Black]&/@{x,y}]}];
treeTools`formatSymbol[name_String]:=(If[Head[#]===String,{#},#]&@Characters[name])/.{{"(","p","L","i","s","t",")"}->Row[Style[#,Bold,Black]&/@{"(","p","L","i","s","t",")"}],{"L","s"}->Row[Style[#,Bold,Black]&/@{"L","s"}],{"L","b","s"}->Row[Style[#,Bold,Black]&/@{"L","b","s"}],{"Z","s"}->Row[Style[#,Bold,Black]&/@{"Z","s"}],{x___,"[",y___,":",y2___,"]","[",z___,"]"}:>Row[{Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{x}],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",":",","},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style[":",Bold,Black],Row[Style[#,Black]&/@{y2}],Style["][",Black,Bold],Row[Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]&/@{z}],Style["]",Bold]}],{x___,"[",y___,":",y2___,"]"}:>Row[{Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{x}],Style["[",Bold],Row[Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]&/@{y}],Style[":",Bold],Row[Style[#,Bold]&/@{y2}],Style["]",Bold,Black]}],{x___,"[",y___,"]","[",z___,"]"}:>Row[{Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{x}],Style["[",Bold,Black],Row[If[MemberQ[{"{","}",",",":"},#],Style[#,Bold,Black],Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["][",Black,Bold],Row[Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]&/@{z}],Style["]",Bold]}],{x___,"[",y___,"]"}:>Row[{Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{x}],Style["[",Bold],Row[Which[MemberQ[{"{","}",":",",","[","]"},#],Style[#,Bold,Black],MemberQ[{"\[Sigma]"},#],Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]],True,Style[#,Bold,Italic,RGBColor[0.263`,0.537`,0.345`]]]&/@{y}],Style["]",Bold,Black]}],{x_,y___}:>Row[Style[#,Bold,RGBColor[0.`,0.17131303883421073`,0.7671473258564127`]]&/@{x,y}]};
treeTools`formatSymbol[""]:="";


(* ::Subsection:: *)
(*Installing the Package*)


treeTools`functionTypes["M",2]="Installing the Package";
treeTools`functionNames["M",2]={"installTreeAmplitudesPackage"};


installTreeAmplitudesPackage:=Module[{pathList=$Path,notebookDirs=DeleteDuplicates[DeleteCases[Quiet[NotebookDirectory/@Notebooks[]],$Failed]],installPath},installPath=pathList[[Append[Flatten[Position[(Characters[pathList]//.{x___,"/",y___}:>{y}),Characters["Applications"]]],1][[1]]]];If[treeTools`packageDirectory===installPath,If[Not[notebookDirs==={$Failed}]&&(Or@@(MemberQ[FileNames["*.m",#],FileNameJoin[{#,"tree_amplitudes.m"}]]&/@notebookDirs)),If[FileExistsQ[FileNameJoin[{installPath,"tree_amplitudes.m"}]],DeleteFile[FileNameJoin[{installPath,"tree_amplitudes.m"}]]];notebookDirs=Select[notebookDirs,MemberQ[FileNames["*.m",#],FileNameJoin[{#,"tree_amplitudes.m"}]]&,1][[1]];CopyFile[FileNameJoin[{notebookDirs,"tree_amplitudes.m"}],FileNameJoin[{installPath,"tree_amplitudes.m"}]];Print["The tree_amplitudes Package has been successfully (re)installed to\n ","   ",installPath,"\n","To use, simply evaluate: ","<<tree_amplitudes.m"," in any new notebook."];,Print["The package is already installed.\nIf you'd like to reinstall, call `installTreeAmplitudesPackage' again\n from a notebook saved to a directory with a copy of tree_amplitudes.m in it."]],If[FileExistsQ[treeTools`packagePath],If[FileExistsQ[FileNameJoin[{installPath,"tree_amplitudes.m"}]],DeleteFile[FileNameJoin[{installPath,"tree_amplitudes.m"}]]];CopyFile[treeTools`packagePath,FileNameJoin[{installPath,"tree_amplitudes.m"}]];Print["The tree_amplitudes Package has been successfully installed to\n ","   ",installPath,"\n","To use, simply evaluate: ","<<tree_amplitudes.m"," in any new notebook."];]];];


treeTools`packagePath=$InputFileName;
treeTools`packageDirectory=FileNameJoin[FileNameSplit[treeTools`packagePath][[1;;-2]]];


(* ::Section:: *)
(*Suppression the Listing of Stored Data (when using "?")*)


(* ::Subsection:: *)
(*Suppressing the Display of Stored Numeric  Values*)


treeTools`abN::usage=""
treeTools`sabN::usage=""
treeTools`asbN::usage=""
treeTools`sbN::usage=""
treeTools`pN::usage=""
treeTools`sN::usage=""
treeTools`abZsN::usage=""
treeTools`abNr::usage=""
treeTools`sabNr::usage=""
treeTools`asbNr::usage=""
treeTools`sbNr::usage=""
treeTools`pNr::usage=""
treeTools`sNr::usage=""
treeTools`abZsNr::usage=""
treeTools`ymAmpReferenceN::usage=""
treeTools`fullYMampReferenceN::usage=""
treeTools`grAmpReferenceN::usage=""

ymAmpN::usage=""
grAmpN::usage=""


(* ::Section:: *)
(*Splash Screen*)


treeTools`splashGraphics:=Module[{offSets=PadRight[{{-0.275,-0.015},{-0.275,-0.275},{-0.25,-0.135},{-0.25,-0.135},{0.485,-0.175},{0.485,0.175},{0.1,0.2},{-0.05,0.35}},8,{0,0}],anchors=PadRight[{{-1,-1},{-1,0},{-1,0},{-1,0},{1,0},{1,0},{-1,1},{-1,1}},8,{{-1,0}}],states={randomComponentStatesYM[4][8,2],randomComponentStatesGR[6][8,2]}},Row[{Graphics[Join[{Text[(nice[states[[1,#]]]/.{Subsuperscript[x_,y_,z_]:>Subsuperscript[Row@(Style[#,FontFamily->"Times",FontSize->18]&/@x[[1,2;;-2]]),Row[{"",Style[#,FontSize->12]&@y}],Row[{" ",Style[z,FontSize->12]}]]}),1.65{Cos[2\[Pi]/8*(#-1)+3\[Pi]/4+\[Pi]/8],Sin[2\[Pi]/8*(#-1)+3\[Pi]/4+\[Pi]/8]}+offSets[[#]],anchors[[#]]]&/@Range[8]},{Black,AbsoluteThickness[3],CapForm["Round"],Line[{1.5{Cos[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8],Sin[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8]},{0,0}}]&/@Range[8],Arrowheads[0.1],Arrow[{1.5{Cos[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8],Sin[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8]},{0,0}},{0,0.9}]&/@Range[8]},{Black,AbsoluteThickness[6],Circle[{0,0},0.65],Opacity[1],GrayLevel[0.7],Disk[{0,0},0.65]},{}],PlotRange->{{-2,2},{-2,2}},Background->White,ImageSize->200],Spacer[20],Graphics[Join[{Text[(nice[states[[2,#]]]/.{Subsuperscript[x_,y_,z_]:>Subsuperscript[Row@(Style[#,FontFamily->"Times",FontSize->18]&/@x[[1,2;;-2]]),y,Style[z,FontSize->12]]}),1.65{Cos[2\[Pi]/8*(#-1)+3\[Pi]/4+\[Pi]/8],Sin[2\[Pi]/8*(#-1)+3\[Pi]/4+\[Pi]/8]}+offSets[[#]],anchors[[#]]]&/@Range[8]},{Black,AbsoluteThickness[3],CapForm["Round"],Line[{1.5{Cos[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8],Sin[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8]},{0,0}}]&/@Range[8],Arrowheads[0.1],Arrow[{1.5{Cos[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8],Sin[2\[Pi]/8*#+3\[Pi]/4+\[Pi]/8]},{0,0}},{0,0.9}]&/@Range[8]},{Black,AbsoluteThickness[6],Circle[{0,0},0.65],Opacity[1],GrayLevel[0.7],Disk[{0,0},0.65]},{}],PlotRange->{{-2,2},{-2,2}},Background->White,ImageSize->200]}]];
Print[\!\(\*
TagBox[
StyleBox[
RowBox[{"Panel", "[", 
RowBox[{
RowBox[{"Column", "[", 
RowBox[{
RowBox[{"List", "[", 
RowBox[{
RowBox[{"Row", "[", 
RowBox[{"List", "[", 
RowBox[{"Style", "[", 
RowBox[{"\"\<Computational Tools\>\"", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "22"}], "]"}]}], "]"}], "]"}], "]"}], ",", 
RowBox[{"Row", "[", 
RowBox[{"List", "[", 
RowBox[{
RowBox[{"Style", "[", 
RowBox[{"\"\<for \>\"", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "18"}], "]"}]}], "]"}], ",", 
RowBox[{"Style", "[", 
RowBox[{"\"\<Tree Amplitudes\>\"", ",", "Bold", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "28"}], "]"}]}], "]"}], ",", 
RowBox[{"Style", "[", 
RowBox[{"\"\< in\>\"", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "18"}], "]"}]}], "]"}]}], "]"}], "]"}], ",", "treeTools`splashGraphics", ",", 
RowBox[{"Row", "[", 
RowBox[{"List", "[", 
RowBox[{
RowBox[{"Style", "[", 
RowBox[{"\"\<Gauge Theory\>\"", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", "Bold", ",", "Italic", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "28"}], "]"}]}], "]"}], ",", 
RowBox[{"Style", "[", 
RowBox[{"\"\< & \>\"", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "18"}], "]"}]}], "]"}], ",", 
RowBox[{"Style", "[", 
RowBox[{"\"\<Gravity\>\"", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", "Bold", ",", "Italic", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "28"}], "]"}]}], "]"}]}], "]"}], "]"}], ",", 
RowBox[{"Row", "[", 
RowBox[{"List", "[", 
RowBox[{"Style", "[", 
RowBox[{"\"\<Jacob L. Bourjaily, 2023\>\"", ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontFamily", ",", "\"\<Times\>\""}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"FontSize", ",", "18"}], "]"}]}], "]"}], "]"}], "]"}]}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"Alignment", ",", "Center"}], "]"}], ",", 
RowBox[{"Spacings", "->", 
RowBox[{"{", 
RowBox[{"0", ",", 
RowBox[{"{", 
RowBox[{"0.0", ",", "0.6", ",", "0.6", ",", "0.6", ",", "1.2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"Background", ",", 
RowBox[{"RGBColor", "[", 
RowBox[{
RowBox[{"Rational", "[", 
RowBox[{"3", ",", "4"}], "]"}], ",", 
RowBox[{"Rational", "[", 
RowBox[{"3", ",", "4"}], "]"}], ",", 
RowBox[{"Rational", "[", 
RowBox[{"9", ",", "10"}], "]"}]}], "]"}]}], "]"}], ",", 
RowBox[{"Rule", "[", 
RowBox[{"FrameMargins", ",", 
RowBox[{"List", "[", 
RowBox[{
RowBox[{"List", "[", 
RowBox[{"15", ",", "15"}], "]"}], ",", 
RowBox[{"List", "[", 
RowBox[{"0", ",", "0"}], "]"}]}], "]"}]}], "]"}]}], "]"}],
ShowSpecialCharacters->False,
ShowStringCharacters->True,
NumberMarks->True],
FullForm]\)];



End[]
EndPackage[]
